
477final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d54  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08009f38  08009f38  00019f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a758  0800a758  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800a758  0800a758  0001a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a760  0800a760  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a760  0800a760  0001a760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000234  0800a99c  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800a99c  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011043  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025f7  00000000  00000000  000312a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  000338a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b32  00000000  00000000  000354d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c322  00000000  00000000  0005800a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d103e  00000000  00000000  0006432c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013536a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000490c  00000000  00000000  001353e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000234 	.word	0x20000234
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009f1c 	.word	0x08009f1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000238 	.word	0x20000238
 800021c:	08009f1c 	.word	0x08009f1c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <lcd_changeColor>:
#include "lcd.h"

void lcd_changeColor(char color, UART_HandleTypeDef huart)
{
 8000f38:	b084      	sub	sp, #16
 8000f3a:	b590      	push	{r4, r7, lr}
 8000f3c:	b089      	sub	sp, #36	; 0x24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4604      	mov	r4, r0
 8000f42:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	71fb      	strb	r3, [r7, #7]
	unsigned char start[] = {0x7C, 0x2B};
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <lcd_changeColor+0xf8>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	83bb      	strh	r3, [r7, #28]
	HAL_UART_Transmit(&huart, (uint8_t *)start, 2, 20);
 8000f54:	f107 011c 	add.w	r1, r7, #28
 8000f58:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f005 f811 	bl	8005f86 <HAL_UART_Transmit>
	if (color == 'r') {
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b72      	cmp	r3, #114	; 0x72
 8000f68:	d111      	bne.n	8000f8e <lcd_changeColor+0x56>
		unsigned char red[] = {0xff, 0x0f, 0x0f};
 8000f6a:	4a32      	ldr	r2, [pc, #200]	; (8001034 <lcd_changeColor+0xfc>)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	4611      	mov	r1, r2
 8000f74:	8019      	strh	r1, [r3, #0]
 8000f76:	3302      	adds	r3, #2
 8000f78:	0c12      	lsrs	r2, r2, #16
 8000f7a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t *) red, 3, 20);
 8000f7c:	f107 0118 	add.w	r1, r7, #24
 8000f80:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f84:	2314      	movs	r3, #20
 8000f86:	2203      	movs	r2, #3
 8000f88:	f004 fffd 	bl	8005f86 <HAL_UART_Transmit>
	}
	else {
		unsigned char wht[] = {0xff, 0xff, 0xff};
		HAL_UART_Transmit(&huart, (uint8_t *) wht, 3, 20);
	}
}
 8000f8c:	e049      	b.n	8001022 <lcd_changeColor+0xea>
	else if (color == 'g') {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b67      	cmp	r3, #103	; 0x67
 8000f92:	d10e      	bne.n	8000fb2 <lcd_changeColor+0x7a>
		unsigned char grn[] = {0x00, 0x0ff, 0x00};
 8000f94:	2300      	movs	r3, #0
 8000f96:	753b      	strb	r3, [r7, #20]
 8000f98:	23ff      	movs	r3, #255	; 0xff
 8000f9a:	757b      	strb	r3, [r7, #21]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75bb      	strb	r3, [r7, #22]
		HAL_UART_Transmit(&huart, (uint8_t *) grn, 3, 20);
 8000fa0:	f107 0114 	add.w	r1, r7, #20
 8000fa4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fa8:	2314      	movs	r3, #20
 8000faa:	2203      	movs	r2, #3
 8000fac:	f004 ffeb 	bl	8005f86 <HAL_UART_Transmit>
}
 8000fb0:	e037      	b.n	8001022 <lcd_changeColor+0xea>
	else if (color == 'b') {
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b62      	cmp	r3, #98	; 0x62
 8000fb6:	d111      	bne.n	8000fdc <lcd_changeColor+0xa4>
		unsigned char blue[] = {0x00, 0xaf, 0xff};
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <lcd_changeColor+0x100>)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	0c12      	lsrs	r2, r2, #16
 8000fc8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t *) blue, 3, 20);
 8000fca:	f107 0110 	add.w	r1, r7, #16
 8000fce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fd2:	2314      	movs	r3, #20
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f004 ffd6 	bl	8005f86 <HAL_UART_Transmit>
}
 8000fda:	e022      	b.n	8001022 <lcd_changeColor+0xea>
	else if (color == '0')
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b30      	cmp	r3, #48	; 0x30
 8000fe0:	d10e      	bne.n	8001000 <lcd_changeColor+0xc8>
		unsigned char off[] = {0x00, 0x00, 0x00};
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	733b      	strb	r3, [r7, #12]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	737b      	strb	r3, [r7, #13]
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart, (uint8_t *) off, 3, 20);
 8000fee:	f107 010c 	add.w	r1, r7, #12
 8000ff2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	f004 ffc4 	bl	8005f86 <HAL_UART_Transmit>
}
 8000ffe:	e010      	b.n	8001022 <lcd_changeColor+0xea>
		unsigned char wht[] = {0xff, 0xff, 0xff};
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <lcd_changeColor+0x104>)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	4611      	mov	r1, r2
 800100a:	8019      	strh	r1, [r3, #0]
 800100c:	3302      	adds	r3, #2
 800100e:	0c12      	lsrs	r2, r2, #16
 8001010:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t *) wht, 3, 20);
 8001012:	f107 0108 	add.w	r1, r7, #8
 8001016:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800101a:	2314      	movs	r3, #20
 800101c:	2203      	movs	r2, #3
 800101e:	f004 ffb2 	bl	8005f86 <HAL_UART_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800102c:	b004      	add	sp, #16
 800102e:	4770      	bx	lr
 8001030:	08009f38 	.word	0x08009f38
 8001034:	08009f3c 	.word	0x08009f3c
 8001038:	08009f40 	.word	0x08009f40
 800103c:	08009f44 	.word	0x08009f44

08001040 <lcd_clear>:
	unsigned char * msg[] = {0x7C, 0x2B, r, g, b};
	HAL_UART_Transmit(&huart, (uint8_t *) msg, 5, 10);
}

void lcd_clear(UART_HandleTypeDef huart)
{
 8001040:	b084      	sub	sp, #16
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
 8001046:	f107 0c08 	add.w	ip, r7, #8
 800104a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *) "|-", strlen("|-"), 15);
 800104e:	230f      	movs	r3, #15
 8001050:	2202      	movs	r2, #2
 8001052:	4905      	ldr	r1, [pc, #20]	; (8001068 <lcd_clear+0x28>)
 8001054:	f107 0008 	add.w	r0, r7, #8
 8001058:	f004 ff95 	bl	8005f86 <HAL_UART_Transmit>
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001064:	b004      	add	sp, #16
 8001066:	4770      	bx	lr
 8001068:	08009f48 	.word	0x08009f48

0800106c <lcd_showMessage>:

void lcd_showMessage(char * msg, UART_HandleTypeDef huart)
{
 800106c:	b084      	sub	sp, #16
 800106e:	b5b0      	push	{r4, r5, r7, lr}
 8001070:	b08e      	sub	sp, #56	; 0x38
 8001072:	af0c      	add	r7, sp, #48	; 0x30
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	f107 001c 	add.w	r0, r7, #28
 800107a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	lcd_clear(huart);
 800107e:	466d      	mov	r5, sp
 8001080:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001090:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109a:	f7ff ffd1 	bl	8001040 <lcd_clear>
	HAL_UART_Transmit(&huart, (uint8_t *) msg , strlen(msg), 80);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f8be 	bl	8000220 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	f107 001c 	add.w	r0, r7, #28
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f004 ff69 	bl	8005f86 <HAL_UART_Transmit>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80010be:	b004      	add	sp, #16
 80010c0:	4770      	bx	lr
	...

080010c4 <updateMenuDisplay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updateMenuDisplay()
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b0df      	sub	sp, #380	; 0x17c
 80010c8:	af0e      	add	r7, sp, #56	; 0x38
	char * buf[80] = {0};;
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010d2:	461a      	mov	r2, r3
 80010d4:	2100      	movs	r1, #0
 80010d6:	f005 fe87 	bl	8006de8 <memset>
	sprintf(buf, "#%d\r%s\r\rPush knob to select.", CURRENT_PRESET, presetBank[CURRENT_PRESET - 1]);
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <updateMenuDisplay+0x60>)
 80010dc:	6819      	ldr	r1, [r3, #0]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <updateMenuDisplay+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <updateMenuDisplay+0x64>)
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	4638      	mov	r0, r7
 80010ec:	460a      	mov	r2, r1
 80010ee:	490f      	ldr	r1, [pc, #60]	; (800112c <updateMenuDisplay+0x68>)
 80010f0:	f006 fade 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 80010f4:	4e0e      	ldr	r6, [pc, #56]	; (8001130 <updateMenuDisplay+0x6c>)
 80010f6:	46bc      	mov	ip, r7
 80010f8:	466d      	mov	r5, sp
 80010fa:	f106 040c 	add.w	r4, r6, #12
 80010fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001112:	4660      	mov	r0, ip
 8001114:	f7ff ffaa 	bl	800106c <lcd_showMessage>

}
 8001118:	bf00      	nop
 800111a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800111e:	46bd      	mov	sp, r7
 8001120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004
 800112c:	0800a030 	.word	0x0800a030
 8001130:	2000031c 	.word	0x2000031c

08001134 <clockwise_menu_event>:

void clockwise_menu_event()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	CURRENT_PRESET++;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <clockwise_menu_event+0x24>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a06      	ldr	r2, [pc, #24]	; (8001158 <clockwise_menu_event+0x24>)
 8001140:	6013      	str	r3, [r2, #0]
	if (CURRENT_PRESET > NUM_PRESETS)
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <clockwise_menu_event+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dd02      	ble.n	8001150 <clockwise_menu_event+0x1c>
	{
		CURRENT_PRESET = 1;
 800114a:	4b03      	ldr	r3, [pc, #12]	; (8001158 <clockwise_menu_event+0x24>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
	}
	updateMenuDisplay();
 8001150:	f7ff ffb8 	bl	80010c4 <updateMenuDisplay>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000

0800115c <anticlockwise_menu_event>:

void anticlockwise_menu_event()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	CURRENT_PRESET--;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <anticlockwise_menu_event+0x24>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <anticlockwise_menu_event+0x24>)
 8001168:	6013      	str	r3, [r2, #0]
	if (CURRENT_PRESET < 1)
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <anticlockwise_menu_event+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	dc02      	bgt.n	8001178 <anticlockwise_menu_event+0x1c>
	{
		CURRENT_PRESET = NUM_PRESETS;
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <anticlockwise_menu_event+0x24>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
	}
	updateMenuDisplay();
 8001178:	f7ff ffa4 	bl	80010c4 <updateMenuDisplay>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000

08001184 <reset_rtrencFlags>:

void reset_rtrencFlags()
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	RTRENC_CCW_EVENT = 0;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <reset_rtrencFlags+0x20>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
	RTRENC_CW_EVENT = 0;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <reset_rtrencFlags+0x24>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
	RTRENC_PUSHB_EVENT = 0;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <reset_rtrencFlags+0x28>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000250 	.word	0x20000250
 80011a8:	20000254 	.word	0x20000254
 80011ac:	20000258 	.word	0x20000258

080011b0 <increase_octave>:

void increase_octave()
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	MIDI_octave_offset++;
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <increase_octave+0x18>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <increase_octave+0x18>)
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	2000026c 	.word	0x2000026c

080011cc <decrease_octave>:

void decrease_octave()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	MIDI_octave_offset--;
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <decrease_octave+0x18>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <decrease_octave+0x18>)
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	2000026c 	.word	0x2000026c

080011e8 <LED_Test>:

void LED_Test()
{
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b0e1      	sub	sp, #388	; 0x184
 80011ec:	af0e      	add	r7, sp, #56	; 0x38
	lcd_showMessage("Welcome to the\rLED Test Mode!", huart4);
 80011ee:	4e3e      	ldr	r6, [pc, #248]	; (80012e8 <LED_Test+0x100>)
 80011f0:	466d      	mov	r5, sp
 80011f2:	f106 040c 	add.w	r4, r6, #12
 80011f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	602b      	str	r3, [r5, #0]
 8001206:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800120a:	4838      	ldr	r0, [pc, #224]	; (80012ec <LED_Test+0x104>)
 800120c:	f7ff ff2e 	bl	800106c <lcd_showMessage>
	HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001214:	f002 fac6 	bl	80037a4 <HAL_Delay>
	lcd_clear(huart4);
 8001218:	4e33      	ldr	r6, [pc, #204]	; (80012e8 <LED_Test+0x100>)
 800121a:	466d      	mov	r5, sp
 800121c:	f106 0410 	add.w	r4, r6, #16
 8001220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001228:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800122c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001230:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001234:	f7ff ff04 	bl	8001040 <lcd_clear>

	int numLEDS = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	char * buf[80] = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001246:	461a      	mov	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	f005 fdcd 	bl	8006de8 <memset>
	sprintf(buf, "Rotate knob to\rchange number\rof LEDs.");
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <LED_Test+0x108>)
 8001252:	461c      	mov	r4, r3
 8001254:	4615      	mov	r5, r2
 8001256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001262:	6020      	str	r0, [r4, #0]
 8001264:	3404      	adds	r4, #4
 8001266:	8021      	strh	r1, [r4, #0]
	lcd_showMessage(buf, huart4);
 8001268:	4e1f      	ldr	r6, [pc, #124]	; (80012e8 <LED_Test+0x100>)
 800126a:	f107 0c04 	add.w	ip, r7, #4
 800126e:	466d      	mov	r5, sp
 8001270:	f106 040c 	add.w	r4, r6, #12
 8001274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001288:	4660      	mov	r0, ip
 800128a:	f7ff feef 	bl	800106c <lcd_showMessage>
	while (1)
	{
		if (RTRENC_CW_EVENT)
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <LED_Test+0x10c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00c      	beq.n	80012b0 <LED_Test+0xc8>
		{
			numLEDS++;
 8001296:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800129a:	3301      	adds	r3, #1
 800129c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (numLEDS > 12)
 80012a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	dd13      	ble.n	80012d0 <LED_Test+0xe8>
			{
				numLEDS = 12;
 80012a8:	230c      	movs	r3, #12
 80012aa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80012ae:	e00f      	b.n	80012d0 <LED_Test+0xe8>
			}
		}
		else if (RTRENC_CCW_EVENT)
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <LED_Test+0x110>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <LED_Test+0xe8>
		{
			numLEDS--;
 80012b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80012bc:	3b01      	subs	r3, #1
 80012be:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (numLEDS < 0)
 80012c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da02      	bge.n	80012d0 <LED_Test+0xe8>
			{
				numLEDS = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			}
		}
		updateRingLED(0, numLEDS);
 80012d0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012d4:	2000      	movs	r0, #0
 80012d6:	f001 fb83 	bl	80029e0 <updateRingLED>
		reset_rtrencFlags();
 80012da:	f7ff ff53 	bl	8001184 <reset_rtrencFlags>
		HAL_Delay(80);
 80012de:	2050      	movs	r0, #80	; 0x50
 80012e0:	f002 fa60 	bl	80037a4 <HAL_Delay>
		if (RTRENC_CW_EVENT)
 80012e4:	e7d3      	b.n	800128e <LED_Test+0xa6>
 80012e6:	bf00      	nop
 80012e8:	2000031c 	.word	0x2000031c
 80012ec:	0800a050 	.word	0x0800a050
 80012f0:	0800a070 	.word	0x0800a070
 80012f4:	20000254 	.word	0x20000254
 80012f8:	20000250 	.word	0x20000250
 80012fc:	00000000 	.word	0x00000000

08001300 <DAC_Test>:
	}
}

void DAC_Test()
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b0e5      	sub	sp, #404	; 0x194
 8001304:	af0e      	add	r7, sp, #56	; 0x38
	lcd_showMessage("Welcome to the\rDAC Test Mode!", huart4);
 8001306:	4e8c      	ldr	r6, [pc, #560]	; (8001538 <DAC_Test+0x238>)
 8001308:	466d      	mov	r5, sp
 800130a:	f106 040c 	add.w	r4, r6, #12
 800130e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001322:	4886      	ldr	r0, [pc, #536]	; (800153c <DAC_Test+0x23c>)
 8001324:	f7ff fea2 	bl	800106c <lcd_showMessage>
	HAL_Delay(1000);
 8001328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132c:	f002 fa3a 	bl	80037a4 <HAL_Delay>
	lcd_clear(huart4);
 8001330:	4e81      	ldr	r6, [pc, #516]	; (8001538 <DAC_Test+0x238>)
 8001332:	466d      	mov	r5, sp
 8001334:	f106 0410 	add.w	r4, r6, #16
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001344:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001348:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800134c:	f7ff fe78 	bl	8001040 <lcd_clear>

	double adjustment = 0.3;
 8001350:	a473      	add	r4, pc, #460	; (adr r4, 8001520 <DAC_Test+0x220>)
 8001352:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001356:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148

	double dac_vout = 0;
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	f04f 0400 	mov.w	r4, #0
 8001362:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	int dac_write = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	char * buf[80] = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001374:	461a      	mov	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f005 fd36 	bl	8006de8 <memset>
	sprintf(buf, "DAC V_out: %.2fV\r\rRotate knob to\radjust voltage.", dac_vout);
 800137c:	1d38      	adds	r0, r7, #4
 800137e:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001382:	496f      	ldr	r1, [pc, #444]	; (8001540 <DAC_Test+0x240>)
 8001384:	f006 f994 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 8001388:	4e6b      	ldr	r6, [pc, #428]	; (8001538 <DAC_Test+0x238>)
 800138a:	f107 0c04 	add.w	ip, r7, #4
 800138e:	466d      	mov	r5, sp
 8001390:	f106 040c 	add.w	r4, r6, #12
 8001394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	602b      	str	r3, [r5, #0]
 80013a4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80013a8:	4660      	mov	r0, ip
 80013aa:	f7ff fe5f 	bl	800106c <lcd_showMessage>
	while (1)
	{
		if (RTRENC_CW_EVENT)
 80013ae:	4b65      	ldr	r3, [pc, #404]	; (8001544 <DAC_Test+0x244>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d054      	beq.n	8001460 <DAC_Test+0x160>
		{
			dac_vout += adjustment;
 80013b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80013ba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80013be:	f7fe ff8d 	bl	80002dc <__adddf3>
 80013c2:	4603      	mov	r3, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			if (dac_vout > 3.3)
 80013ca:	a357      	add	r3, pc, #348	; (adr r3, 8001528 <DAC_Test+0x228>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80013d4:	f7ff fbc8 	bl	8000b68 <__aeabi_dcmpgt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <DAC_Test+0xe8>
			{
				dac_vout = 3.3;
 80013de:	a452      	add	r4, pc, #328	; (adr r4, 8001528 <DAC_Test+0x228>)
 80013e0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013e4:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			}
			sprintf(buf, "DAC V_out: %.2fV\r\rRotate knob to\radjust voltage.", dac_vout);
 80013e8:	1d38      	adds	r0, r7, #4
 80013ea:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80013ee:	4954      	ldr	r1, [pc, #336]	; (8001540 <DAC_Test+0x240>)
 80013f0:	f006 f95e 	bl	80076b0 <siprintf>
			lcd_showMessage(buf, huart4);
 80013f4:	4e50      	ldr	r6, [pc, #320]	; (8001538 <DAC_Test+0x238>)
 80013f6:	f107 0c04 	add.w	ip, r7, #4
 80013fa:	466d      	mov	r5, sp
 80013fc:	f106 040c 	add.w	r4, r6, #12
 8001400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	602b      	str	r3, [r5, #0]
 8001410:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001414:	4660      	mov	r0, ip
 8001416:	f7ff fe29 	bl	800106c <lcd_showMessage>

			dac_write = (int) (dac_vout / (3.3/4095));
 800141a:	a345      	add	r3, pc, #276	; (adr r3, 8001530 <DAC_Test+0x230>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001424:	f7ff fa3a 	bl	800089c <__aeabi_ddiv>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	4618      	mov	r0, r3
 800142e:	4621      	mov	r1, r4
 8001430:	f7ff fbba 	bl	8000ba8 <__aeabi_d2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (dac_write == 4096)
 800143a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800143e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001442:	d104      	bne.n	800144e <DAC_Test+0x14e>
				DAC->DHR12R1 = 4095;
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <DAC_Test+0x248>)
 8001446:	f640 72ff 	movw	r2, #4095	; 0xfff
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	e003      	b.n	8001456 <DAC_Test+0x156>
			else
				DAC->DHR12R1 = dac_write;
 800144e:	4a3e      	ldr	r2, [pc, #248]	; (8001548 <DAC_Test+0x248>)
 8001450:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001454:	6093      	str	r3, [r2, #8]
			HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001456:	2100      	movs	r1, #0
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <DAC_Test+0x24c>)
 800145a:	f002 faf8 	bl	8003a4e <HAL_DAC_Start>
 800145e:	e059      	b.n	8001514 <DAC_Test+0x214>
		}
		else if (RTRENC_CCW_EVENT)
 8001460:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <DAC_Test+0x250>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d055      	beq.n	8001514 <DAC_Test+0x214>
		{
			dac_vout -= adjustment;
 8001468:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800146c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001470:	f7fe ff32 	bl	80002d8 <__aeabi_dsub>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			if (dac_vout < 0)
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001488:	f7ff fb50 	bl	8000b2c <__aeabi_dcmplt>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <DAC_Test+0x19e>
			{
				dac_vout = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f04f 0400 	mov.w	r4, #0
 800149a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			}
			sprintf(buf, "DAC V_out: %.2fV\r\rRotate knob to\radjust voltage.", dac_vout);
 800149e:	1d38      	adds	r0, r7, #4
 80014a0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80014a4:	4926      	ldr	r1, [pc, #152]	; (8001540 <DAC_Test+0x240>)
 80014a6:	f006 f903 	bl	80076b0 <siprintf>
			lcd_showMessage(buf, huart4);
 80014aa:	4e23      	ldr	r6, [pc, #140]	; (8001538 <DAC_Test+0x238>)
 80014ac:	f107 0c04 	add.w	ip, r7, #4
 80014b0:	466d      	mov	r5, sp
 80014b2:	f106 040c 	add.w	r4, r6, #12
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	602b      	str	r3, [r5, #0]
 80014c6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80014ca:	4660      	mov	r0, ip
 80014cc:	f7ff fdce 	bl	800106c <lcd_showMessage>

			dac_write = (int) (dac_vout / (3.3/4095));
 80014d0:	a317      	add	r3, pc, #92	; (adr r3, 8001530 <DAC_Test+0x230>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80014da:	f7ff f9df 	bl	800089c <__aeabi_ddiv>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	f7ff fb5f 	bl	8000ba8 <__aeabi_d2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (dac_write == 4096)
 80014f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80014f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014f8:	d104      	bne.n	8001504 <DAC_Test+0x204>
				DAC->DHR12R1 = 4095;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <DAC_Test+0x248>)
 80014fc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	e003      	b.n	800150c <DAC_Test+0x20c>
			else
				DAC->DHR12R1 = dac_write;
 8001504:	4a10      	ldr	r2, [pc, #64]	; (8001548 <DAC_Test+0x248>)
 8001506:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800150a:	6093      	str	r3, [r2, #8]
			HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800150c:	2100      	movs	r1, #0
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <DAC_Test+0x24c>)
 8001510:	f002 fa9d 	bl	8003a4e <HAL_DAC_Start>
		}
		reset_rtrencFlags();
 8001514:	f7ff fe36 	bl	8001184 <reset_rtrencFlags>
		HAL_Delay(150);
 8001518:	2096      	movs	r0, #150	; 0x96
 800151a:	f002 f943 	bl	80037a4 <HAL_Delay>
		if (RTRENC_CW_EVENT)
 800151e:	e746      	b.n	80013ae <DAC_Test+0xae>
 8001520:	33333333 	.word	0x33333333
 8001524:	3fd33333 	.word	0x3fd33333
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	e734d9b4 	.word	0xe734d9b4
 8001534:	3f4a680c 	.word	0x3f4a680c
 8001538:	2000031c 	.word	0x2000031c
 800153c:	0800a098 	.word	0x0800a098
 8001540:	0800a0b8 	.word	0x0800a0b8
 8001544:	20000254 	.word	0x20000254
 8001548:	40007400 	.word	0x40007400
 800154c:	200002c8 	.word	0x200002c8
 8001550:	20000250 	.word	0x20000250

08001554 <Demo_Mode>:
	}
}

void Demo_Mode(int preset)
{
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	b0e7      	sub	sp, #412	; 0x19c
 8001558:	af0e      	add	r7, sp, #56	; 0x38
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	6018      	str	r0, [r3, #0]
	int preset_ind = preset - 1;
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3b01      	subs	r3, #1
 8001564:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	char * buf[80] = {0};
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	4618      	mov	r0, r3
 800156e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001572:	461a      	mov	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f005 fc37 	bl	8006de8 <memset>
	char * switch_setting = NULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	MIDI_octave_offset = 0;
 8001580:	4ba8      	ldr	r3, [pc, #672]	; (8001824 <Demo_Mode+0x2d0>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	reset_rtrencFlags();
 8001586:	f7ff fdfd 	bl	8001184 <reset_rtrencFlags>
	sprintf(buf, "Showing parameters\rfor %s\r\rPress knob to start.", presetBank[preset_ind]);
 800158a:	4aa7      	ldr	r2, [pc, #668]	; (8001828 <Demo_Mode+0x2d4>)
 800158c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	49a4      	ldr	r1, [pc, #656]	; (800182c <Demo_Mode+0x2d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f006 f888 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 80015a0:	4ea3      	ldr	r6, [pc, #652]	; (8001830 <Demo_Mode+0x2dc>)
 80015a2:	f107 0c08 	add.w	ip, r7, #8
 80015a6:	466d      	mov	r5, sp
 80015a8:	f106 040c 	add.w	r4, r6, #12
 80015ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80015c0:	4660      	mov	r0, ip
 80015c2:	f7ff fd53 	bl	800106c <lcd_showMessage>
	while (!RTRENC_PUSHB_EVENT)
 80015c6:	e002      	b.n	80015ce <Demo_Mode+0x7a>
	{
		HAL_Delay(100);
 80015c8:	2064      	movs	r0, #100	; 0x64
 80015ca:	f002 f8eb 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 80015ce:	4b99      	ldr	r3, [pc, #612]	; (8001834 <Demo_Mode+0x2e0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f8      	beq.n	80015c8 <Demo_Mode+0x74>
	}
	reset_rtrencFlags();
 80015d6:	f7ff fdd5 	bl	8001184 <reset_rtrencFlags>

	//step 1: octave switcher
	int octave_preset = parameterVals[preset_ind][0];
 80015da:	4a97      	ldr	r2, [pc, #604]	; (8001838 <Demo_Mode+0x2e4>)
 80015dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	if (octave_preset < 0)
 80015ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da08      	bge.n	8001604 <Demo_Mode+0xb0>
	{
		sprintf(buf, "Decrease Octave\rto %d.\r\rPress knob to go on.", octave_preset);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80015fa:	4990      	ldr	r1, [pc, #576]	; (800183c <Demo_Mode+0x2e8>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 f857 	bl	80076b0 <siprintf>
 8001602:	e019      	b.n	8001638 <Demo_Mode+0xe4>
	}
	else if (octave_preset > 0)
 8001604:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001608:	2b00      	cmp	r3, #0
 800160a:	dd08      	ble.n	800161e <Demo_Mode+0xca>
	{
		sprintf(buf, "Increase Octave\rto +%d.\r\rPress knob to go on.", octave_preset);
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001614:	498a      	ldr	r1, [pc, #552]	; (8001840 <Demo_Mode+0x2ec>)
 8001616:	4618      	mov	r0, r3
 8001618:	f006 f84a 	bl	80076b0 <siprintf>
 800161c:	e00c      	b.n	8001638 <Demo_Mode+0xe4>
	}
	else
	{
		sprintf(buf, "Octave is already\rset to 0.\r\rPress knob to go on.");
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4a88      	ldr	r2, [pc, #544]	; (8001844 <Demo_Mode+0x2f0>)
 8001624:	461c      	mov	r4, r3
 8001626:	4615      	mov	r5, r2
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	8023      	strh	r3, [r4, #0]
	}
	lcd_showMessage(buf, huart4);
 8001638:	4e7d      	ldr	r6, [pc, #500]	; (8001830 <Demo_Mode+0x2dc>)
 800163a:	f107 0c08 	add.w	ip, r7, #8
 800163e:	466d      	mov	r5, sp
 8001640:	f106 040c 	add.w	r4, r6, #12
 8001644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	602b      	str	r3, [r5, #0]
 8001654:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001658:	4660      	mov	r0, ip
 800165a:	f7ff fd07 	bl	800106c <lcd_showMessage>

	while (!RTRENC_PUSHB_EVENT)
 800165e:	e02d      	b.n	80016bc <Demo_Mode+0x168>
	{
		if (MIDI_octave_offset > octave_preset)
 8001660:	4b70      	ldr	r3, [pc, #448]	; (8001824 <Demo_Mode+0x2d0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001668:	429a      	cmp	r2, r3
 800166a:	da09      	bge.n	8001680 <Demo_Mode+0x12c>
		{
			//blink decrease LED
			HAL_GPIO_WritePin(LD_OCTAVE_UP_GPIO_Port, LD_OCTAVE_UP_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2102      	movs	r1, #2
 8001670:	4875      	ldr	r0, [pc, #468]	; (8001848 <Demo_Mode+0x2f4>)
 8001672:	f003 f873 	bl	800475c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LD_OCTAVE_DOWN_GPIO_Port, LD_OCTAVE_DOWN_Pin);
 8001676:	2101      	movs	r1, #1
 8001678:	4873      	ldr	r0, [pc, #460]	; (8001848 <Demo_Mode+0x2f4>)
 800167a:	f003 f888 	bl	800478e <HAL_GPIO_TogglePin>
 800167e:	e019      	b.n	80016b4 <Demo_Mode+0x160>
		}
		else if (MIDI_octave_offset < octave_preset)
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <Demo_Mode+0x2d0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001688:	429a      	cmp	r2, r3
 800168a:	dd09      	ble.n	80016a0 <Demo_Mode+0x14c>
		{
			//blink increase LED
			HAL_GPIO_WritePin(LD_OCTAVE_DOWN_GPIO_Port, LD_OCTAVE_DOWN_Pin, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2101      	movs	r1, #1
 8001690:	486d      	ldr	r0, [pc, #436]	; (8001848 <Demo_Mode+0x2f4>)
 8001692:	f003 f863 	bl	800475c <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LD_OCTAVE_UP_GPIO_Port, LD_OCTAVE_UP_Pin);
 8001696:	2102      	movs	r1, #2
 8001698:	486b      	ldr	r0, [pc, #428]	; (8001848 <Demo_Mode+0x2f4>)
 800169a:	f003 f878 	bl	800478e <HAL_GPIO_TogglePin>
 800169e:	e009      	b.n	80016b4 <Demo_Mode+0x160>
		}
		else
		{
			//both of them are on
			HAL_GPIO_WritePin(LD_OCTAVE_UP_GPIO_Port, LD_OCTAVE_UP_Pin, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2102      	movs	r1, #2
 80016a4:	4868      	ldr	r0, [pc, #416]	; (8001848 <Demo_Mode+0x2f4>)
 80016a6:	f003 f859 	bl	800475c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD_OCTAVE_DOWN_GPIO_Port, LD_OCTAVE_DOWN_Pin, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2101      	movs	r1, #1
 80016ae:	4866      	ldr	r0, [pc, #408]	; (8001848 <Demo_Mode+0x2f4>)
 80016b0:	f003 f854 	bl	800475c <HAL_GPIO_WritePin>
		}
		HAL_Delay(600);
 80016b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80016b8:	f002 f874 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 80016bc:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <Demo_Mode+0x2e0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0cd      	beq.n	8001660 <Demo_Mode+0x10c>
	}

	//step 2: switch LED for vco1
	switch (parameterVals[preset_ind][1])
 80016c4:	4a5c      	ldr	r2, [pc, #368]	; (8001838 <Demo_Mode+0x2e4>)
 80016c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	3301      	adds	r3, #1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d007      	beq.n	80016e6 <Demo_Mode+0x192>
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d009      	beq.n	80016ee <Demo_Mode+0x19a>
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10b      	bne.n	80016f6 <Demo_Mode+0x1a2>
	{
		case 1:
			switch_setting = "SAWTOOTH";
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <Demo_Mode+0x2f8>)
 80016e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 80016e4:	e00a      	b.n	80016fc <Demo_Mode+0x1a8>
		case 2:
			switch_setting = "SQUARE";
 80016e6:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <Demo_Mode+0x2fc>)
 80016e8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 80016ec:	e006      	b.n	80016fc <Demo_Mode+0x1a8>
		case 3:
			switch_setting = "TRIANGLE";
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <Demo_Mode+0x300>)
 80016f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 80016f4:	e002      	b.n	80016fc <Demo_Mode+0x1a8>
		default:
			switch_setting = "ERROR";
 80016f6:	4b58      	ldr	r3, [pc, #352]	; (8001858 <Demo_Mode+0x304>)
 80016f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	}
	sprintf(buf, "Set the VCO 1\rWaveform switch to\routput a %s.\rPress knob to go on.", switch_setting);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001704:	4955      	ldr	r1, [pc, #340]	; (800185c <Demo_Mode+0x308>)
 8001706:	4618      	mov	r0, r3
 8001708:	f005 ffd2 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 800170c:	4e48      	ldr	r6, [pc, #288]	; (8001830 <Demo_Mode+0x2dc>)
 800170e:	f107 0c08 	add.w	ip, r7, #8
 8001712:	466d      	mov	r5, sp
 8001714:	f106 040c 	add.w	r4, r6, #12
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	602b      	str	r3, [r5, #0]
 8001728:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800172c:	4660      	mov	r0, ip
 800172e:	f7ff fc9d 	bl	800106c <lcd_showMessage>
	HAL_GPIO_WritePin(LD_SW_VCO1_GPIO_Port, LD_SW_VCO1_Pin, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	4844      	ldr	r0, [pc, #272]	; (8001848 <Demo_Mode+0x2f4>)
 8001738:	f003 f810 	bl	800475c <HAL_GPIO_WritePin>
	reset_rtrencFlags();
 800173c:	f7ff fd22 	bl	8001184 <reset_rtrencFlags>
	while (!RTRENC_PUSHB_EVENT)
 8001740:	e002      	b.n	8001748 <Demo_Mode+0x1f4>
	{
		HAL_Delay(100);
 8001742:	2064      	movs	r0, #100	; 0x64
 8001744:	f002 f82e 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <Demo_Mode+0x2e0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f8      	beq.n	8001742 <Demo_Mode+0x1ee>
	}
	reset_rtrencFlags();
 8001750:	f7ff fd18 	bl	8001184 <reset_rtrencFlags>
	HAL_GPIO_WritePin(LD_SW_VCO1_GPIO_Port, LD_SW_VCO1_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	483b      	ldr	r0, [pc, #236]	; (8001848 <Demo_Mode+0x2f4>)
 800175a:	f002 ffff 	bl	800475c <HAL_GPIO_WritePin>

	//step 3: switch LED for vco2
	switch (parameterVals[preset_ind][2])
 800175e:	4a36      	ldr	r2, [pc, #216]	; (8001838 <Demo_Mode+0x2e4>)
 8001760:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4413      	add	r3, r2
 8001768:	3302      	adds	r3, #2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d007      	beq.n	8001780 <Demo_Mode+0x22c>
 8001770:	2b03      	cmp	r3, #3
 8001772:	d009      	beq.n	8001788 <Demo_Mode+0x234>
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10b      	bne.n	8001790 <Demo_Mode+0x23c>
	{
		case 1:
			switch_setting = "SAWTOOTH";
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <Demo_Mode+0x2f8>)
 800177a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 800177e:	e00a      	b.n	8001796 <Demo_Mode+0x242>
		case 2:
			switch_setting = "SQUARE";
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <Demo_Mode+0x2fc>)
 8001782:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 8001786:	e006      	b.n	8001796 <Demo_Mode+0x242>
		case 3:
			switch_setting = "TRIANGLE";
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <Demo_Mode+0x300>)
 800178a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 800178e:	e002      	b.n	8001796 <Demo_Mode+0x242>
		default:
			switch_setting = "ERROR";
 8001790:	4b31      	ldr	r3, [pc, #196]	; (8001858 <Demo_Mode+0x304>)
 8001792:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	}
	sprintf(buf, "Set the VCO 2\rWaveform switch to\routput a %s.\rPress knob to go on.", switch_setting);
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800179e:	4930      	ldr	r1, [pc, #192]	; (8001860 <Demo_Mode+0x30c>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 ff85 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 80017a6:	4e22      	ldr	r6, [pc, #136]	; (8001830 <Demo_Mode+0x2dc>)
 80017a8:	f107 0c08 	add.w	ip, r7, #8
 80017ac:	466d      	mov	r5, sp
 80017ae:	f106 040c 	add.w	r4, r6, #12
 80017b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	602b      	str	r3, [r5, #0]
 80017c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80017c6:	4660      	mov	r0, ip
 80017c8:	f7ff fc50 	bl	800106c <lcd_showMessage>
	HAL_GPIO_WritePin(LD_SW_VCO2_GPIO_Port, LD_SW_VCO2_Pin, 1);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	481d      	ldr	r0, [pc, #116]	; (8001848 <Demo_Mode+0x2f4>)
 80017d4:	f002 ffc2 	bl	800475c <HAL_GPIO_WritePin>
	reset_rtrencFlags();
 80017d8:	f7ff fcd4 	bl	8001184 <reset_rtrencFlags>
	while (!RTRENC_PUSHB_EVENT)
 80017dc:	e002      	b.n	80017e4 <Demo_Mode+0x290>
	{
		HAL_Delay(100);
 80017de:	2064      	movs	r0, #100	; 0x64
 80017e0:	f001 ffe0 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <Demo_Mode+0x2e0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f8      	beq.n	80017de <Demo_Mode+0x28a>
	}
	reset_rtrencFlags();
 80017ec:	f7ff fcca 	bl	8001184 <reset_rtrencFlags>
	HAL_GPIO_WritePin(LD_SW_VCO2_GPIO_Port, LD_SW_VCO2_Pin, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	4814      	ldr	r0, [pc, #80]	; (8001848 <Demo_Mode+0x2f4>)
 80017f8:	f002 ffb0 	bl	800475c <HAL_GPIO_WritePin>

	//step 4: switch LED for lfo waveform
	switch (parameterVals[preset_ind][3])
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <Demo_Mode+0x2e4>)
 80017fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	3303      	adds	r3, #3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d002      	beq.n	8001814 <Demo_Mode+0x2c0>
 800180e:	2b02      	cmp	r3, #2
 8001810:	d004      	beq.n	800181c <Demo_Mode+0x2c8>
 8001812:	e027      	b.n	8001864 <Demo_Mode+0x310>
	{
		case 1:
			switch_setting = "SQUARE";
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <Demo_Mode+0x2fc>)
 8001816:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 800181a:	e026      	b.n	800186a <Demo_Mode+0x316>
		case 2:
			switch_setting = "TRIANGLE";
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <Demo_Mode+0x300>)
 800181e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 8001822:	e022      	b.n	800186a <Demo_Mode+0x316>
 8001824:	2000026c 	.word	0x2000026c
 8001828:	20000004 	.word	0x20000004
 800182c:	0800a0ec 	.word	0x0800a0ec
 8001830:	2000031c 	.word	0x2000031c
 8001834:	20000258 	.word	0x20000258
 8001838:	0800a344 	.word	0x0800a344
 800183c:	0800a11c 	.word	0x0800a11c
 8001840:	0800a14c 	.word	0x0800a14c
 8001844:	0800a17c 	.word	0x0800a17c
 8001848:	40021400 	.word	0x40021400
 800184c:	0800a1b0 	.word	0x0800a1b0
 8001850:	0800a1bc 	.word	0x0800a1bc
 8001854:	0800a1c4 	.word	0x0800a1c4
 8001858:	0800a1d0 	.word	0x0800a1d0
 800185c:	0800a1d8 	.word	0x0800a1d8
 8001860:	0800a21c 	.word	0x0800a21c
		default:
			switch_setting = "ERROR";
 8001864:	4b96      	ldr	r3, [pc, #600]	; (8001ac0 <Demo_Mode+0x56c>)
 8001866:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	}
	sprintf(buf, "Set the LFO\rWaveform switch to\routput a %s.\rPress knob to go on.", switch_setting);
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001872:	4994      	ldr	r1, [pc, #592]	; (8001ac4 <Demo_Mode+0x570>)
 8001874:	4618      	mov	r0, r3
 8001876:	f005 ff1b 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 800187a:	4e93      	ldr	r6, [pc, #588]	; (8001ac8 <Demo_Mode+0x574>)
 800187c:	f107 0c08 	add.w	ip, r7, #8
 8001880:	466d      	mov	r5, sp
 8001882:	f106 040c 	add.w	r4, r6, #12
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	602b      	str	r3, [r5, #0]
 8001896:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800189a:	4660      	mov	r0, ip
 800189c:	f7ff fbe6 	bl	800106c <lcd_showMessage>
	HAL_GPIO_WritePin(LD_SW_LFO_WV_GPIO_Port, LD_SW_LFO_WV_Pin, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4889      	ldr	r0, [pc, #548]	; (8001acc <Demo_Mode+0x578>)
 80018a6:	f002 ff59 	bl	800475c <HAL_GPIO_WritePin>
	reset_rtrencFlags();
 80018aa:	f7ff fc6b 	bl	8001184 <reset_rtrencFlags>
	while (!RTRENC_PUSHB_EVENT)
 80018ae:	e002      	b.n	80018b6 <Demo_Mode+0x362>
	{
		HAL_Delay(100);
 80018b0:	2064      	movs	r0, #100	; 0x64
 80018b2:	f001 ff77 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 80018b6:	4b86      	ldr	r3, [pc, #536]	; (8001ad0 <Demo_Mode+0x57c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f8      	beq.n	80018b0 <Demo_Mode+0x35c>
	}
	reset_rtrencFlags();
 80018be:	f7ff fc61 	bl	8001184 <reset_rtrencFlags>
	HAL_GPIO_WritePin(LD_SW_LFO_WV_GPIO_Port, LD_SW_LFO_WV_Pin, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2104      	movs	r1, #4
 80018c6:	4881      	ldr	r0, [pc, #516]	; (8001acc <Demo_Mode+0x578>)
 80018c8:	f002 ff48 	bl	800475c <HAL_GPIO_WritePin>

	//step 5: switch LED for lfo target
	switch (parameterVals[preset_ind][4])
 80018cc:	4a81      	ldr	r2, [pc, #516]	; (8001ad4 <Demo_Mode+0x580>)
 80018ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d002      	beq.n	80018e4 <Demo_Mode+0x390>
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d004      	beq.n	80018ec <Demo_Mode+0x398>
 80018e2:	e007      	b.n	80018f4 <Demo_Mode+0x3a0>
	{
		case 1:
			switch_setting = "LFO";
 80018e4:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <Demo_Mode+0x584>)
 80018e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 80018ea:	e006      	b.n	80018fa <Demo_Mode+0x3a6>
		case 2:
			switch_setting = "VCO";
 80018ec:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <Demo_Mode+0x588>)
 80018ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			break;
 80018f2:	e002      	b.n	80018fa <Demo_Mode+0x3a6>
		default:
			switch_setting = "ERROR";
 80018f4:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <Demo_Mode+0x56c>)
 80018f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	}
	sprintf(buf, "Set the Target\rswitch to %s.\r\rPress knob to go on.", switch_setting);
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001902:	4977      	ldr	r1, [pc, #476]	; (8001ae0 <Demo_Mode+0x58c>)
 8001904:	4618      	mov	r0, r3
 8001906:	f005 fed3 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 800190a:	4e6f      	ldr	r6, [pc, #444]	; (8001ac8 <Demo_Mode+0x574>)
 800190c:	f107 0c08 	add.w	ip, r7, #8
 8001910:	466d      	mov	r5, sp
 8001912:	f106 040c 	add.w	r4, r6, #12
 8001916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	602b      	str	r3, [r5, #0]
 8001926:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800192a:	4660      	mov	r0, ip
 800192c:	f7ff fb9e 	bl	800106c <lcd_showMessage>
	HAL_GPIO_WritePin(LD_SW_LFO_TRGT_GPIO_Port, LD_SW_LFO_TRGT_Pin, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001936:	4865      	ldr	r0, [pc, #404]	; (8001acc <Demo_Mode+0x578>)
 8001938:	f002 ff10 	bl	800475c <HAL_GPIO_WritePin>
	reset_rtrencFlags();
 800193c:	f7ff fc22 	bl	8001184 <reset_rtrencFlags>
	while (!RTRENC_PUSHB_EVENT)
 8001940:	e002      	b.n	8001948 <Demo_Mode+0x3f4>
	{
		HAL_Delay(100);
 8001942:	2064      	movs	r0, #100	; 0x64
 8001944:	f001 ff2e 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 8001948:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <Demo_Mode+0x57c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f8      	beq.n	8001942 <Demo_Mode+0x3ee>
	}
	reset_rtrencFlags();
 8001950:	f7ff fc18 	bl	8001184 <reset_rtrencFlags>
	HAL_GPIO_WritePin(LD_SW_LFO_TRGT_GPIO_Port, LD_SW_LFO_TRGT_Pin, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195a:	485c      	ldr	r0, [pc, #368]	; (8001acc <Demo_Mode+0x578>)
 800195c:	f002 fefe 	bl	800475c <HAL_GPIO_WritePin>

	//step 6: all the mf neopixels

	for (int curParameter = 5; curParameter < NUM_PARAMETERS + 5; curParameter++)
 8001960:	2305      	movs	r3, #5
 8001962:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001966:	e074      	b.n	8001a52 <Demo_Mode+0x4fe>
	{
		int parameterVal = parameterVals[preset_ind][curParameter];
 8001968:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <Demo_Mode+0x580>)
 800196a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	441a      	add	r2, r3
 8001972:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		sprintf(buf, "Set the\r%s\rknob to %d.\rPress knob to go on.", parameterNames[curParameter], parameterVal);
 800197e:	4a59      	ldr	r2, [pc, #356]	; (8001ae4 <Demo_Mode+0x590>)
 8001980:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001984:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001988:	f107 0008 	add.w	r0, r7, #8
 800198c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001990:	4955      	ldr	r1, [pc, #340]	; (8001ae8 <Demo_Mode+0x594>)
 8001992:	f005 fe8d 	bl	80076b0 <siprintf>
		lcd_showMessage(buf, huart4);
 8001996:	4e4c      	ldr	r6, [pc, #304]	; (8001ac8 <Demo_Mode+0x574>)
 8001998:	f107 0c08 	add.w	ip, r7, #8
 800199c:	466d      	mov	r5, sp
 800199e:	f106 040c 	add.w	r4, r6, #12
 80019a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	602b      	str	r3, [r5, #0]
 80019b2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019b6:	4660      	mov	r0, ip
 80019b8:	f7ff fb58 	bl	800106c <lcd_showMessage>
		if (parameterVal != 0)
 80019bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d027      	beq.n	8001a14 <Demo_Mode+0x4c0>
		{
			flashLED(curParameter);
 80019c4:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80019c8:	f001 f83c 	bl	8002a44 <flashLED>
			HAL_Delay(600);
 80019cc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80019d0:	f001 fee8 	bl	80037a4 <HAL_Delay>
			flashLED(curParameter);
 80019d4:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80019d8:	f001 f834 	bl	8002a44 <flashLED>
			HAL_Delay(600);
 80019dc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80019e0:	f001 fee0 	bl	80037a4 <HAL_Delay>
			for (int i = 1; i <= parameterVal; i++)
 80019e4:	2301      	movs	r3, #1
 80019e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019ea:	e00d      	b.n	8001a08 <Demo_Mode+0x4b4>
			{
				updateRingLED(curParameter, i);
 80019ec:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80019f0:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80019f4:	f000 fff4 	bl	80029e0 <updateRingLED>
				HAL_Delay(80);
 80019f8:	2050      	movs	r0, #80	; 0x50
 80019fa:	f001 fed3 	bl	80037a4 <HAL_Delay>
			for (int i = 1; i <= parameterVal; i++)
 80019fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a02:	3301      	adds	r3, #1
 8001a04:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a08:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001a0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001a10:	429a      	cmp	r2, r3
 8001a12:	ddeb      	ble.n	80019ec <Demo_Mode+0x498>
			}
		}

		reset_rtrencFlags();
 8001a14:	f7ff fbb6 	bl	8001184 <reset_rtrencFlags>
		while (!RTRENC_PUSHB_EVENT)
 8001a18:	e00e      	b.n	8001a38 <Demo_Mode+0x4e4>
		{
			HAL_Delay(100);
 8001a1a:	2064      	movs	r0, #100	; 0x64
 8001a1c:	f001 fec2 	bl	80037a4 <HAL_Delay>
			if (parameterVal == 0)
 8001a20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <Demo_Mode+0x4e4>
			{
				flashLED(curParameter);
 8001a28:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8001a2c:	f001 f80a 	bl	8002a44 <flashLED>
				HAL_Delay(500);
 8001a30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a34:	f001 feb6 	bl	80037a4 <HAL_Delay>
		while (!RTRENC_PUSHB_EVENT)
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <Demo_Mode+0x57c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ec      	beq.n	8001a1a <Demo_Mode+0x4c6>
			}
		}
		reset_rtrencFlags();
 8001a40:	f7ff fba0 	bl	8001184 <reset_rtrencFlags>
		clearLEDs();
 8001a44:	f001 f872 	bl	8002b2c <clearLEDs>
	for (int curParameter = 5; curParameter < NUM_PARAMETERS + 5; curParameter++)
 8001a48:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	dd86      	ble.n	8001968 <Demo_Mode+0x414>
	}

	//step 7: ta-da
	sprintf(buf, "Parameters for\r%s\rhave been set!\rPush knob to return.", presetBank[preset_ind]);
 8001a5a:	4a24      	ldr	r2, [pc, #144]	; (8001aec <Demo_Mode+0x598>)
 8001a5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4921      	ldr	r1, [pc, #132]	; (8001af0 <Demo_Mode+0x59c>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 fe20 	bl	80076b0 <siprintf>
	lcd_showMessage(buf, huart4);
 8001a70:	4e15      	ldr	r6, [pc, #84]	; (8001ac8 <Demo_Mode+0x574>)
 8001a72:	f107 0c08 	add.w	ip, r7, #8
 8001a76:	466d      	mov	r5, sp
 8001a78:	f106 040c 	add.w	r4, r6, #12
 8001a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	602b      	str	r3, [r5, #0]
 8001a8c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a90:	4660      	mov	r0, ip
 8001a92:	f7ff faeb 	bl	800106c <lcd_showMessage>
	reset_rtrencFlags();
 8001a96:	f7ff fb75 	bl	8001184 <reset_rtrencFlags>
	while (!RTRENC_PUSHB_EVENT)
 8001a9a:	e002      	b.n	8001aa2 <Demo_Mode+0x54e>
	{
		HAL_Delay(100);
 8001a9c:	2064      	movs	r0, #100	; 0x64
 8001a9e:	f001 fe81 	bl	80037a4 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <Demo_Mode+0x57c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f8      	beq.n	8001a9c <Demo_Mode+0x548>
	}
	reset_rtrencFlags();
 8001aaa:	f7ff fb6b 	bl	8001184 <reset_rtrencFlags>
	MIDI_octave_offset = 0;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <Demo_Mode+0x5a0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	0800a1d0 	.word	0x0800a1d0
 8001ac4:	0800a260 	.word	0x0800a260
 8001ac8:	2000031c 	.word	0x2000031c
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	20000258 	.word	0x20000258
 8001ad4:	0800a344 	.word	0x0800a344
 8001ad8:	0800a2a4 	.word	0x0800a2a4
 8001adc:	0800a2a8 	.word	0x0800a2a8
 8001ae0:	0800a2ac 	.word	0x0800a2ac
 8001ae4:	20000020 	.word	0x20000020
 8001ae8:	0800a2e0 	.word	0x0800a2e0
 8001aec:	20000004 	.word	0x20000004
 8001af0:	0800a30c 	.word	0x0800a30c
 8001af4:	2000026c 	.word	0x2000026c

08001af8 <updateDAC>:

void updateDAC()
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	char temp = MIDI_current_note + (12 * MIDI_octave_offset);
 8001afe:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <updateDAC+0x198>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	0052      	lsls	r2, r2, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b61      	ldr	r3, [pc, #388]	; (8001c94 <updateDAC+0x19c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	71fb      	strb	r3, [r7, #7]
	if (temp == 0 || temp < 5 || temp > 76)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <updateDAC+0x32>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d902      	bls.n	8001b2a <updateDAC+0x32>
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b4c      	cmp	r3, #76	; 0x4c
 8001b28:	d909      	bls.n	8001b3e <updateDAC+0x46>
	{
		DAC->DHR12R1 = 0;
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <updateDAC+0x1a0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
		//set gate low
		HAL_GPIO_WritePin(DAC_GATE_GPIO_Port, DAC_GATE_Pin, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	4859      	ldr	r0, [pc, #356]	; (8001c9c <updateDAC+0x1a4>)
 8001b38:	f002 fe10 	bl	800475c <HAL_GPIO_WritePin>
 8001b3c:	e081      	b.n	8001c42 <updateDAC+0x14a>
	}
	else
	{
		DAC->DHR12R1 = (int) (0.00039 * pow(temp, 4)) - (0.03641 * pow(temp, 3)) + (1.32121 * pow(temp, 2)) - (9.4721 * temp) + 34.89;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fd07 	bl	8000554 <__aeabi_ui2d>
 8001b46:	4603      	mov	r3, r0
 8001b48:	460c      	mov	r4, r1
 8001b4a:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001c50 <updateDAC+0x158>
 8001b4e:	ec44 3b10 	vmov	d0, r3, r4
 8001b52:	f007 f98d 	bl	8008e70 <pow>
 8001b56:	ec51 0b10 	vmov	r0, r1, d0
 8001b5a:	a33f      	add	r3, pc, #252	; (adr r3, 8001c58 <updateDAC+0x160>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fd72 	bl	8000648 <__aeabi_dmul>
 8001b64:	4603      	mov	r3, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	f7ff f81c 	bl	8000ba8 <__aeabi_d2iz>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcfe 	bl	8000574 <__aeabi_i2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fce8 	bl	8000554 <__aeabi_ui2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001c60 <updateDAC+0x168>
 8001b8c:	ec43 2b10 	vmov	d0, r2, r3
 8001b90:	f007 f96e 	bl	8008e70 <pow>
 8001b94:	ec51 0b10 	vmov	r0, r1, d0
 8001b98:	a333      	add	r3, pc, #204	; (adr r3, 8001c68 <updateDAC+0x170>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fd53 	bl	8000648 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f7fe fb95 	bl	80002d8 <__aeabi_dsub>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	4625      	mov	r5, r4
 8001bb4:	461c      	mov	r4, r3
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fccb 	bl	8000554 <__aeabi_ui2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001c70 <updateDAC+0x178>
 8001bc6:	ec43 2b10 	vmov	d0, r2, r3
 8001bca:	f007 f951 	bl	8008e70 <pow>
 8001bce:	ec51 0b10 	vmov	r0, r1, d0
 8001bd2:	a329      	add	r3, pc, #164	; (adr r3, 8001c78 <updateDAC+0x180>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fd36 	bl	8000648 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4620      	mov	r0, r4
 8001be2:	4629      	mov	r1, r5
 8001be4:	f7fe fb7a 	bl	80002dc <__adddf3>
 8001be8:	4603      	mov	r3, r0
 8001bea:	460c      	mov	r4, r1
 8001bec:	4625      	mov	r5, r4
 8001bee:	461c      	mov	r4, r3
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcbe 	bl	8000574 <__aeabi_i2d>
 8001bf8:	a321      	add	r3, pc, #132	; (adr r3, 8001c80 <updateDAC+0x188>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fd23 	bl	8000648 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fb65 	bl	80002d8 <__aeabi_dsub>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460c      	mov	r4, r1
 8001c12:	4618      	mov	r0, r3
 8001c14:	4621      	mov	r1, r4
 8001c16:	a31c      	add	r3, pc, #112	; (adr r3, 8001c88 <updateDAC+0x190>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fb5e 	bl	80002dc <__adddf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	461a      	mov	r2, r3
 8001c26:	4623      	mov	r3, r4
 8001c28:	4c1b      	ldr	r4, [pc, #108]	; (8001c98 <updateDAC+0x1a0>)
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffe3 	bl	8000bf8 <__aeabi_d2uiz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	60a3      	str	r3, [r4, #8]
		//set gate high
		HAL_GPIO_WritePin(DAC_GATE_GPIO_Port, DAC_GATE_Pin, 1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <updateDAC+0x1a4>)
 8001c3e:	f002 fd8d 	bl	800475c <HAL_GPIO_WritePin>
	}
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40100000 	.word	0x40100000
 8001c58:	3ed527e5 	.word	0x3ed527e5
 8001c5c:	3f398f1d 	.word	0x3f398f1d
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40080000 	.word	0x40080000
 8001c68:	de7ea5f8 	.word	0xde7ea5f8
 8001c6c:	3fa2a454 	.word	0x3fa2a454
 8001c70:	00000000 	.word	0x00000000
 8001c74:	40000000 	.word	0x40000000
 8001c78:	18d25edd 	.word	0x18d25edd
 8001c7c:	3ff523ad 	.word	0x3ff523ad
 8001c80:	1758e219 	.word	0x1758e219
 8001c84:	4022f1b7 	.word	0x4022f1b7
 8001c88:	851eb852 	.word	0x851eb852
 8001c8c:	404171eb 	.word	0x404171eb
 8001c90:	2000026c 	.word	0x2000026c
 8001c94:	20000268 	.word	0x20000268
 8001c98:	40007400 	.word	0x40007400
 8001c9c:	40021400 	.word	0x40021400

08001ca0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if (MIDI_input == 0xFE)
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_UART_RxCpltCallback+0x90>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2bfe      	cmp	r3, #254	; 0xfe
 8001cae:	d036      	beq.n	8001d1e <HAL_UART_RxCpltCallback+0x7e>
	{

	}
	else if (MIDI_input == 0x90)
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_UART_RxCpltCallback+0x90>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b90      	cmp	r3, #144	; 0x90
 8001cb6:	d103      	bne.n	8001cc0 <HAL_UART_RxCpltCallback+0x20>
	{
		MIDI_MESSAGE_RECEIVED_EVENT = 1;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_UART_RxCpltCallback+0x94>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e02e      	b.n	8001d1e <HAL_UART_RxCpltCallback+0x7e>
	}
	else if (MIDI_CHECK_VELOCITY_FLAG)
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_UART_RxCpltCallback+0x98>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d016      	beq.n	8001cf6 <HAL_UART_RxCpltCallback+0x56>
	{
		if (!MIDI_input && (MIDI_temp == MIDI_current_note))
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_UART_RxCpltCallback+0x90>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_UART_RxCpltCallback+0x44>
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_UART_RxCpltCallback+0x9c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_UART_RxCpltCallback+0xa0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d102      	bne.n	8001ce4 <HAL_UART_RxCpltCallback+0x44>
		{
			MIDI_current_note = 0;
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_UART_RxCpltCallback+0xa0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
		}
		MIDI_CHECK_VELOCITY_FLAG = 0;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_UART_RxCpltCallback+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
		MIDI_MESSAGE_RECEIVED_EVENT = 0;
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_UART_RxCpltCallback+0x94>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
		//change DAC routine
		updateDAC();
 8001cf0:	f7ff ff02 	bl	8001af8 <updateDAC>
 8001cf4:	e013      	b.n	8001d1e <HAL_UART_RxCpltCallback+0x7e>
	}
	else if (MIDI_MESSAGE_RECEIVED_EVENT)
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_UART_RxCpltCallback+0x94>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00f      	beq.n	8001d1e <HAL_UART_RxCpltCallback+0x7e>
	{
		MIDI_temp = MIDI_input;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_UART_RxCpltCallback+0x90>)
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_UART_RxCpltCallback+0x9c>)
 8001d04:	701a      	strb	r2, [r3, #0]
		if (!MIDI_current_note)
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_UART_RxCpltCallback+0xa0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d104      	bne.n	8001d18 <HAL_UART_RxCpltCallback+0x78>
		{
			MIDI_current_note = MIDI_input;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_UART_RxCpltCallback+0x90>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_UART_RxCpltCallback+0xa0>)
 8001d16:	601a      	str	r2, [r3, #0]
		}
		MIDI_CHECK_VELOCITY_FLAG = 1;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_UART_RxCpltCallback+0x98>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart5, &MIDI_input, 1);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_UART_RxCpltCallback+0x90>)
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <HAL_UART_RxCpltCallback+0xa4>)
 8001d24:	f004 f9c8 	bl	80060b8 <HAL_UART_Receive_IT>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000264 	.word	0x20000264
 8001d34:	2000025c 	.word	0x2000025c
 8001d38:	20000260 	.word	0x20000260
 8001d3c:	20000265 	.word	0x20000265
 8001d40:	20000268 	.word	0x20000268
 8001d44:	20000288 	.word	0x20000288

08001d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	b08f      	sub	sp, #60	; 0x3c
 8001d4c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d4e:	f001 fcb7 	bl	80036c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d52:	f000 f88f 	bl	8001e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d56:	f000 fa21 	bl	800219c <MX_GPIO_Init>
  MX_UART4_Init();
 8001d5a:	f000 f9cb 	bl	80020f4 <MX_UART4_Init>
  MX_DAC_Init();
 8001d5e:	f000 f8f3 	bl	8001f48 <MX_DAC_Init>
  MX_TIM1_Init();
 8001d62:	f000 f91b 	bl	8001f9c <MX_TIM1_Init>
  MX_UART5_Init();
 8001d66:	f000 f9ef 	bl	8002148 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(800);
 8001d6a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d6e:	f001 fd19 	bl	80037a4 <HAL_Delay>
  lcd_changeColor('w', huart4);
 8001d72:	4e37      	ldr	r6, [pc, #220]	; (8001e50 <main+0x108>)
 8001d74:	466d      	mov	r5, sp
 8001d76:	f106 040c 	add.w	r4, r6, #12
 8001d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	602b      	str	r3, [r5, #0]
 8001d8a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d8e:	2077      	movs	r0, #119	; 0x77
 8001d90:	f7ff f8d2 	bl	8000f38 <lcd_changeColor>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_clear(huart4);
 8001d94:	4e2e      	ldr	r6, [pc, #184]	; (8001e50 <main+0x108>)
 8001d96:	466d      	mov	r5, sp
 8001d98:	f106 0410 	add.w	r4, r6, #16
 8001d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001dac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001db0:	f7ff f946 	bl	8001040 <lcd_clear>
  updateMenuDisplay();
 8001db4:	f7ff f986 	bl	80010c4 <updateMenuDisplay>
  visInit();
 8001db8:	f000 fde6 	bl	8002988 <visInit>
  clearLEDs();
 8001dbc:	f000 feb6 	bl	8002b2c <clearLEDs>
  HAL_Delay(150);
 8001dc0:	2096      	movs	r0, #150	; 0x96
 8001dc2:	f001 fcef 	bl	80037a4 <HAL_Delay>
  updateRingLED(0, 0);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 fe09 	bl	80029e0 <updateRingLED>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4820      	ldr	r0, [pc, #128]	; (8001e54 <main+0x10c>)
 8001dd2:	f001 fe3c 	bl	8003a4e <HAL_DAC_Start>
  DAC->DHR12R1=0;
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <main+0x110>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  HAL_UART_Receive_IT(&huart5, &MIDI_input, 1);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	491f      	ldr	r1, [pc, #124]	; (8001e5c <main+0x114>)
 8001de0:	481f      	ldr	r0, [pc, #124]	; (8001e60 <main+0x118>)
 8001de2:	f004 f969 	bl	80060b8 <HAL_UART_Receive_IT>

  while (1)
  {
	  if (RTRENC_CW_EVENT)
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <main+0x11c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <main+0xac>
	  {
	 	 clockwise_menu_event();
 8001dee:	f7ff f9a1 	bl	8001134 <clockwise_menu_event>
 8001df2:	e027      	b.n	8001e44 <main+0xfc>
	  }
	  else if (RTRENC_CCW_EVENT)
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <main+0x120>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <main+0xba>
	  {
	  	 anticlockwise_menu_event();
 8001dfc:	f7ff f9ae 	bl	800115c <anticlockwise_menu_event>
 8001e00:	e020      	b.n	8001e44 <main+0xfc>
	  }
	  else if (CURRENT_PRESET == 6 && RTRENC_PUSHB_EVENT)
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <main+0x124>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d106      	bne.n	8001e18 <main+0xd0>
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <main+0x128>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <main+0xd0>
	  {
		 DAC_Test();
 8001e12:	f7ff fa75 	bl	8001300 <DAC_Test>
 8001e16:	e015      	b.n	8001e44 <main+0xfc>
	  }
	  else if (CURRENT_PRESET == 7 && RTRENC_PUSHB_EVENT)
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <main+0x124>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b07      	cmp	r3, #7
 8001e1e:	d106      	bne.n	8001e2e <main+0xe6>
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <main+0x128>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <main+0xe6>
	  {
		  LED_Test();
 8001e28:	f7ff f9de 	bl	80011e8 <LED_Test>
 8001e2c:	e00a      	b.n	8001e44 <main+0xfc>
	  }
	  else if (RTRENC_PUSHB_EVENT)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <main+0x128>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <main+0xfc>
	  {
		  //demo mode bb
		  Demo_Mode(CURRENT_PRESET);
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <main+0x124>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fb8a 	bl	8001554 <Demo_Mode>
		  updateMenuDisplay();
 8001e40:	f7ff f940 	bl	80010c4 <updateMenuDisplay>
	  }

	  reset_rtrencFlags();
 8001e44:	f7ff f99e 	bl	8001184 <reset_rtrencFlags>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(130);
 8001e48:	2082      	movs	r0, #130	; 0x82
 8001e4a:	f001 fcab 	bl	80037a4 <HAL_Delay>
	  if (RTRENC_CW_EVENT)
 8001e4e:	e7ca      	b.n	8001de6 <main+0x9e>
 8001e50:	2000031c 	.word	0x2000031c
 8001e54:	200002c8 	.word	0x200002c8
 8001e58:	40007400 	.word	0x40007400
 8001e5c:	20000264 	.word	0x20000264
 8001e60:	20000288 	.word	0x20000288
 8001e64:	20000254 	.word	0x20000254
 8001e68:	20000250 	.word	0x20000250
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000258 	.word	0x20000258

08001e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b094      	sub	sp, #80	; 0x50
 8001e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	2234      	movs	r2, #52	; 0x34
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 ffb0 	bl	8006de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <SystemClock_Config+0xcc>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <SystemClock_Config+0xcc>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <SystemClock_Config+0xcc>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <SystemClock_Config+0xd0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <SystemClock_Config+0xd0>)
 8001ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <SystemClock_Config+0xd0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed8:	2310      	movs	r3, #16
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001edc:	2302      	movs	r3, #2
 8001ede:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ee8:	2360      	movs	r3, #96	; 0x60
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eec:	2302      	movs	r3, #2
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fe51 	bl	8004ba4 <HAL_RCC_OscConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f08:	f000 fa6c 	bl	80023e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f10:	2302      	movs	r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	2103      	movs	r1, #3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fc6f 	bl	800480c <HAL_RCC_ClockConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f34:	f000 fa56 	bl	80023e4 <Error_Handler>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3750      	adds	r7, #80	; 0x50
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000

08001f48 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f4e:	463b      	mov	r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_DAC_Init+0x4c>)
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <MX_DAC_Init+0x50>)
 8001f5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <MX_DAC_Init+0x4c>)
 8001f5e:	f001 fd54 	bl	8003a0a <HAL_DAC_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f68:	f000 fa3c 	bl	80023e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f74:	463b      	mov	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4806      	ldr	r0, [pc, #24]	; (8001f94 <MX_DAC_Init+0x4c>)
 8001f7c:	f001 fdcd 	bl	8003b1a <HAL_DAC_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f86:	f000 fa2d 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200002c8 	.word	0x200002c8
 8001f98:	40007400 	.word	0x40007400

08001f9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b096      	sub	sp, #88	; 0x58
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 ff07 	bl	8006de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fda:	4b44      	ldr	r3, [pc, #272]	; (80020ec <MX_TIM1_Init+0x150>)
 8001fdc:	4a44      	ldr	r2, [pc, #272]	; (80020f0 <MX_TIM1_Init+0x154>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <MX_TIM1_Init+0x150>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <MX_TIM1_Init+0x150>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fec:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <MX_TIM1_Init+0x150>)
 8001fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <MX_TIM1_Init+0x150>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <MX_TIM1_Init+0x150>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <MX_TIM1_Init+0x150>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002006:	4839      	ldr	r0, [pc, #228]	; (80020ec <MX_TIM1_Init+0x150>)
 8002008:	f003 f80e 	bl	8005028 <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002012:	f000 f9e7 	bl	80023e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800201c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002020:	4619      	mov	r1, r3
 8002022:	4832      	ldr	r0, [pc, #200]	; (80020ec <MX_TIM1_Init+0x150>)
 8002024:	f003 fa90 	bl	8005548 <HAL_TIM_ConfigClockSource>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800202e:	f000 f9d9 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002032:	482e      	ldr	r0, [pc, #184]	; (80020ec <MX_TIM1_Init+0x150>)
 8002034:	f003 f847 	bl	80050c6 <HAL_TIM_PWM_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800203e:	f000 f9d1 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800204e:	4619      	mov	r1, r3
 8002050:	4826      	ldr	r0, [pc, #152]	; (80020ec <MX_TIM1_Init+0x150>)
 8002052:	f003 fe69 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800205c:	f000 f9c2 	bl	80023e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002060:	2360      	movs	r3, #96	; 0x60
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800207c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	4819      	ldr	r0, [pc, #100]	; (80020ec <MX_TIM1_Init+0x150>)
 8002086:	f003 f999 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002090:	f000 f9a8 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	2204      	movs	r2, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4813      	ldr	r0, [pc, #76]	; (80020ec <MX_TIM1_Init+0x150>)
 800209e:	f003 f98d 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80020a8:	f000 f99c 	bl	80023e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4807      	ldr	r0, [pc, #28]	; (80020ec <MX_TIM1_Init+0x150>)
 80020d0:	f003 fea6 	bl	8005e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80020da:	f000 f983 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020de:	4803      	ldr	r0, [pc, #12]	; (80020ec <MX_TIM1_Init+0x150>)
 80020e0:	f000 fa16 	bl	8002510 <HAL_TIM_MspPostInit>

}
 80020e4:	bf00      	nop
 80020e6:	3758      	adds	r7, #88	; 0x58
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200002dc 	.word	0x200002dc
 80020f0:	40010000 	.word	0x40010000

080020f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_UART4_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_UART4_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_UART4_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_UART4_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_UART4_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_UART4_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_UART4_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_UART4_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_UART4_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_UART4_Init+0x4c>)
 800212c:	f003 fede 	bl	8005eec <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 f955 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2000031c 	.word	0x2000031c
 8002144:	40004c00 	.word	0x40004c00

08002148 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_UART5_Init+0x4c>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_UART5_Init+0x50>)
 8002150:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 31250;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_UART5_Init+0x4c>)
 8002154:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002158:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_UART5_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_UART5_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_UART5_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_UART5_Init+0x4c>)
 800216e:	2204      	movs	r2, #4
 8002170:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_UART5_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_UART5_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_UART5_Init+0x4c>)
 8002180:	f003 feb4 	bl	8005eec <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800218a:	f000 f92b 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000288 	.word	0x20000288
 8002198:	40005000 	.word	0x40005000

0800219c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a83      	ldr	r2, [pc, #524]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4b7d      	ldr	r3, [pc, #500]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a7c      	ldr	r2, [pc, #496]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021d8:	f043 0320 	orr.w	r3, r3, #32
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b7a      	ldr	r3, [pc, #488]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <MX_GPIO_Init+0x22c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <MX_GPIO_Init+0x22c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a67      	ldr	r2, [pc, #412]	; (80023c8 <MX_GPIO_Init+0x22c>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a60      	ldr	r2, [pc, #384]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b5e      	ldr	r3, [pc, #376]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a59      	ldr	r2, [pc, #356]	; (80023c8 <MX_GPIO_Init+0x22c>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <MX_GPIO_Init+0x22c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD_OCTAVE_DOWN_Pin|LD_OCTAVE_UP_Pin|LD_SW_LFO_WV_Pin|LD_SW_VCO1_Pin
 8002276:	2201      	movs	r2, #1
 8002278:	f241 3187 	movw	r1, #4999	; 0x1387
 800227c:	4853      	ldr	r0, [pc, #332]	; (80023cc <MX_GPIO_Init+0x230>)
 800227e:	f002 fa6d 	bl	800475c <HAL_GPIO_WritePin>
                          |LD_SW_VCO2_Pin|LD_SW_LFO_TRGT_Pin|DAC_GATE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f244 0181 	movw	r1, #16513	; 0x4081
 8002288:	4851      	ldr	r0, [pc, #324]	; (80023d0 <MX_GPIO_Init+0x234>)
 800228a:	f002 fa67 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	4850      	ldr	r0, [pc, #320]	; (80023d4 <MX_GPIO_Init+0x238>)
 8002294:	f002 fa62 	bl	800475c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229e:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <MX_GPIO_Init+0x23c>)
 80022a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 031c 	add.w	r3, r7, #28
 80022aa:	4619      	mov	r1, r3
 80022ac:	484b      	ldr	r0, [pc, #300]	; (80023dc <MX_GPIO_Init+0x240>)
 80022ae:	f002 f8ab 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_OCTAVE_DOWN_Pin LD_OCTAVE_UP_Pin LD_SW_LFO_WV_Pin LD_SW_VCO1_Pin
                           LD_SW_VCO2_Pin LD_SW_LFO_TRGT_Pin */
  GPIO_InitStruct.Pin = LD_OCTAVE_DOWN_Pin|LD_OCTAVE_UP_Pin|LD_SW_LFO_WV_Pin|LD_SW_VCO1_Pin
 80022b2:	f240 3387 	movw	r3, #903	; 0x387
 80022b6:	61fb      	str	r3, [r7, #28]
                          |LD_SW_VCO2_Pin|LD_SW_LFO_TRGT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	4840      	ldr	r0, [pc, #256]	; (80023cc <MX_GPIO_Init+0x230>)
 80022cc:	f002 f89c 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTAVE_DOWN_PUSHB_Pin OCTAVE_DOWN_PUSHBC2_Pin RTRENC_PSH_Pin */
  GPIO_InitStruct.Pin = OCTAVE_DOWN_PUSHB_Pin|OCTAVE_DOWN_PUSHBC2_Pin|RTRENC_PSH_Pin;
 80022d0:	230e      	movs	r3, #14
 80022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <MX_GPIO_Init+0x23c>)
 80022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	483e      	ldr	r0, [pc, #248]	; (80023dc <MX_GPIO_Init+0x240>)
 80022e4:	f002 f890 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pins : RTRENC_A_Pin RTRENC_B_Pin */
  GPIO_InitStruct.Pin = RTRENC_A_Pin|RTRENC_B_Pin;
 80022e8:	2330      	movs	r3, #48	; 0x30
 80022ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022ec:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <MX_GPIO_Init+0x244>)
 80022ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	4838      	ldr	r0, [pc, #224]	; (80023dc <MX_GPIO_Init+0x240>)
 80022fc:	f002 f884 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002300:	f244 0381 	movw	r3, #16513	; 0x4081
 8002304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	482d      	ldr	r0, [pc, #180]	; (80023d0 <MX_GPIO_Init+0x234>)
 800231a:	f002 f875 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_GATE_Pin */
  GPIO_InitStruct.Pin = DAC_GATE_Pin;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2302      	movs	r3, #2
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DAC_GATE_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	4825      	ldr	r0, [pc, #148]	; (80023cc <MX_GPIO_Init+0x230>)
 8002338:	f002 f866 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800233c:	2340      	movs	r3, #64	; 0x40
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	4820      	ldr	r0, [pc, #128]	; (80023d4 <MX_GPIO_Init+0x238>)
 8002354:	f002 f858 	bl	8004408 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4619      	mov	r1, r3
 800236a:	481a      	ldr	r0, [pc, #104]	; (80023d4 <MX_GPIO_Init+0x238>)
 800236c:	f002 f84c 	bl	8004408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	2007      	movs	r0, #7
 8002376:	f001 fb12 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800237a:	2007      	movs	r0, #7
 800237c:	f001 fb2b 	bl	80039d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	2008      	movs	r0, #8
 8002386:	f001 fb0a 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800238a:	2008      	movs	r0, #8
 800238c:	f001 fb23 	bl	80039d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2009      	movs	r0, #9
 8002396:	f001 fb02 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800239a:	2009      	movs	r0, #9
 800239c:	f001 fb1b 	bl	80039d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	200a      	movs	r0, #10
 80023a6:	f001 fafa 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023aa:	200a      	movs	r0, #10
 80023ac:	f001 fb13 	bl	80039d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2017      	movs	r0, #23
 80023b6:	f001 faf2 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023ba:	2017      	movs	r0, #23
 80023bc:	f001 fb0b 	bl	80039d6 <HAL_NVIC_EnableIRQ>

}
 80023c0:	bf00      	nop
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40021400 	.word	0x40021400
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	10110000 	.word	0x10110000
 80023dc:	40020800 	.word	0x40020800
 80023e0:	10210000 	.word	0x10210000

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_MspInit+0x4c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_MspInit+0x4c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_DAC_MspInit+0x7c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d127      	bne.n	80024b6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_DAC_MspInit+0x80>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_DAC_MspInit+0x80>)
 8002470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_DAC_MspInit+0x80>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_DAC_MspInit+0x80>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_DAC_MspInit+0x80>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_DAC_MspInit+0x80>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800249e:	2310      	movs	r3, #16
 80024a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a2:	2303      	movs	r3, #3
 80024a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <HAL_DAC_MspInit+0x84>)
 80024b2:	f001 ffa9 	bl	8004408 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40007400 	.word	0x40007400
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000

080024cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_TIM_Base_MspInit+0x3c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10d      	bne.n	80024fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_TIM_Base_MspInit+0x40>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_TIM_Base_MspInit+0x40>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_TIM_Base_MspInit+0x40>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40023800 	.word	0x40023800

08002510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <HAL_TIM_MspPostInit+0x68>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d11e      	bne.n	8002570 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_TIM_MspPostInit+0x6c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_TIM_MspPostInit+0x6c>)
 800253c:	f043 0310 	orr.w	r3, r3, #16
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_TIM_MspPostInit+0x6c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800254e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002552:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002560:	2301      	movs	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	4619      	mov	r1, r3
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_TIM_MspPostInit+0x70>)
 800256c:	f001 ff4c 	bl	8004408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40010000 	.word	0x40010000
 800257c:	40023800 	.word	0x40023800
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08c      	sub	sp, #48	; 0x30
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_UART_MspInit+0x134>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d12c      	bne.n	8002600 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a43      	ldr	r2, [pc, #268]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_UART_MspInit+0x138>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025de:	2303      	movs	r3, #3
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 80025ee:	230b      	movs	r3, #11
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4831      	ldr	r0, [pc, #196]	; (80026c0 <HAL_UART_MspInit+0x13c>)
 80025fa:	f001 ff05 	bl	8004408 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80025fe:	e057      	b.n	80026b0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART5)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <HAL_UART_MspInit+0x140>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d152      	bne.n	80026b0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_UART_MspInit+0x138>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_UART_MspInit+0x138>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_UART_MspInit+0x138>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_UART_MspInit+0x138>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800265e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002668:	2301      	movs	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8002670:	230b      	movs	r3, #11
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	4813      	ldr	r0, [pc, #76]	; (80026c8 <HAL_UART_MspInit+0x144>)
 800267c:	f001 fec4 	bl	8004408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002680:	2304      	movs	r3, #4
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002690:	2308      	movs	r3, #8
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <HAL_UART_MspInit+0x13c>)
 800269c:	f001 feb4 	bl	8004408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2035      	movs	r0, #53	; 0x35
 80026a6:	f001 f97a 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80026aa:	2035      	movs	r0, #53	; 0x35
 80026ac:	f001 f993 	bl	80039d6 <HAL_NVIC_EnableIRQ>
}
 80026b0:	bf00      	nop
 80026b2:	3730      	adds	r7, #48	; 0x30
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40004c00 	.word	0x40004c00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40005000 	.word	0x40005000
 80026c8:	40020400 	.word	0x40020400

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f001 f820 	bl	8003764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	decrease_octave();
 800272c:	f7fe fd4e 	bl	80011cc <decrease_octave>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002730:	2002      	movs	r0, #2
 8002732:	f002 f847 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	increase_octave();
 800273e:	f7fe fd37 	bl	80011b0 <increase_octave>

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002742:	2004      	movs	r0, #4
 8002744:	f002 f83e 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	//rotary encoder push button event
		RTRENC_PUSHB_EVENT++;
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <EXTI3_IRQHandler+0x18>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a03      	ldr	r2, [pc, #12]	; (8002764 <EXTI3_IRQHandler+0x18>)
 8002758:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800275a:	2008      	movs	r0, #8
 800275c:	f002 f832 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000258 	.word	0x20000258

08002768 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	  if (HAL_GPIO_ReadPin(RTRENC_B_GPIO_Port, RTRENC_B_Pin))
 800276c:	2120      	movs	r1, #32
 800276e:	4808      	ldr	r0, [pc, #32]	; (8002790 <EXTI4_IRQHandler+0x28>)
 8002770:	f001 ffdc 	bl	800472c <HAL_GPIO_ReadPin>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <EXTI4_IRQHandler+0x1c>
	  {
		  RTRENC_CW_EVENT++;
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <EXTI4_IRQHandler+0x2c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <EXTI4_IRQHandler+0x2c>)
 8002782:	6013      	str	r3, [r2, #0]
	  }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002784:	2010      	movs	r0, #16
 8002786:	f002 f81d 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020800 	.word	0x40020800
 8002794:	20000254 	.word	0x20000254

08002798 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (HAL_GPIO_ReadPin(RTRENC_A_GPIO_Port, RTRENC_A_Pin))
 800279c:	2110      	movs	r1, #16
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <EXTI9_5_IRQHandler+0x28>)
 80027a0:	f001 ffc4 	bl	800472c <HAL_GPIO_ReadPin>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <EXTI9_5_IRQHandler+0x1c>
		{
			RTRENC_CCW_EVENT++;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <EXTI9_5_IRQHandler+0x2c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <EXTI9_5_IRQHandler+0x2c>)
 80027b2:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80027b4:	2020      	movs	r0, #32
 80027b6:	f002 f805 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40020800 	.word	0x40020800
 80027c4:	20000250 	.word	0x20000250

080027c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <UART5_IRQHandler+0x10>)
 80027ce:	f003 fcc9 	bl	8006164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000288 	.word	0x20000288

080027dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <_sbrk+0x5c>)
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <_sbrk+0x60>)
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <_sbrk+0x64>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <_sbrk+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d207      	bcs.n	800281c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800280c:	f004 fac2 	bl	8006d94 <__errno>
 8002810:	4602      	mov	r2, r0
 8002812:	230c      	movs	r3, #12
 8002814:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281a:	e009      	b.n	8002830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <_sbrk+0x64>)
 800282c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20050000 	.word	0x20050000
 800283c:	00000400 	.word	0x00000400
 8002840:	20000270 	.word	0x20000270
 8002844:	20000710 	.word	0x20000710

08002848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <SystemInit+0x28>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <SystemInit+0x28>)
 8002854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <SystemInit+0x28>)
 800285e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002862:	609a      	str	r2, [r3, #8]
#endif
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <visRing>:
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
	}
}

void visRing(uint8_t *frameBuffer, uint32_t frameBufferSize, int numRing, int numLEDs)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
	uint32_t color = newColor(60,0,13);
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <visRing+0x88>)
 8002884:	613b      	str	r3, [r7, #16]
	for (int i = 12 * numRing; i < (12 * numRing) + numLEDs; i++)
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e022      	b.n	80028da <visRing+0x66>
	{
		frameBuffer[i*3 + 0] = (uint8_t)(color & 0xFF);
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = (uint8_t)(color >> 8 & 0xFF);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	0a19      	lsrs	r1, r3, #8
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	3301      	adds	r3, #1
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4413      	add	r3, r2
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = (uint8_t)(color >> 16 & 0xFF);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	0c19      	lsrs	r1, r3, #16
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	3302      	adds	r3, #2
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	b2ca      	uxtb	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
	for (int i = 12 * numRing; i < (12 * numRing) + numLEDs; i++)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	461a      	mov	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbd1      	blt.n	8002894 <visRing+0x20>
	}
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	000d003c 	.word	0x000d003c

08002900 <visFlashOn>:

void visFlashOn(uint8_t *frameBuffer, uint32_t frameBufferSize, int numRing)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	uint32_t color = newColor(0, 60, 10);
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <visFlashOn+0x84>)
 800290e:	613b      	str	r3, [r7, #16]
	for (int i = 12 * numRing; i < (12 * numRing) + 12; i++)
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e022      	b.n	8002964 <visFlashOn+0x64>
	{
		frameBuffer[i*3 + 0] = (uint8_t)(color & 0xFF);
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = (uint8_t)(color >> 8 & 0xFF);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	0a19      	lsrs	r1, r3, #8
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	3301      	adds	r3, #1
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	b2ca      	uxtb	r2, r1
 8002946:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = (uint8_t)(color >> 16 & 0xFF);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	0c19      	lsrs	r1, r3, #16
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3302      	adds	r3, #2
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	b2ca      	uxtb	r2, r1
 800295c:	701a      	strb	r2, [r3, #0]
	for (int i = 12 * numRing; i < (12 * numRing) + 12; i++)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4293      	cmp	r3, r2
 8002976:	dbd2      	blt.n	800291e <visFlashOn+0x1e>
	}
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	000a3c00 	.word	0x000a3c00

08002988 <visInit>:
	}
}


void visInit()
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0

	// 4 paralel output LED strips needs 18% overhead during TX
	// 8 paralel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	e017      	b.n	80029c4 <visInit+0x3c>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = i;
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <visInit+0x50>)
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	330c      	adds	r3, #12
 800299e:	79fa      	ldrb	r2, [r7, #7]
 80029a0:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		//if(i % 2 == 0)
		//{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <visInit+0x50>)
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <visInit+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4a09      	ldr	r2, [pc, #36]	; (80029d8 <visInit+0x50>)
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4413      	add	r3, r2
 80029b6:	3304      	adds	r3, #4
 80029b8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80029bc:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	3301      	adds	r3, #1
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0e4      	beq.n	8002994 <visInit+0xc>
		}*/

	}


	ws2812b_init();
 80029ca:	f000 fe2f 	bl	800362c <ws2812b_init>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000035c 	.word	0x2000035c
 80029dc:	20000378 	.word	0x20000378

080029e0 <updateRingLED>:
		ws2812b_handle();
	}
}

void updateRingLED(int numRing, int numLEDs)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	if (ws2812b.transferComplete)
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <updateRingLED+0x58>)
 80029ec:	7c1b      	ldrb	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01e      	beq.n	8002a30 <updateRingLED+0x50>
	{
		static uint32_t timestamp;

		if (HAL_GetTick() - timestamp > 10)
 80029f2:	f000 fecb 	bl	800378c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <updateRingLED+0x5c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b0a      	cmp	r3, #10
 8002a00:	d911      	bls.n	8002a26 <updateRingLED+0x46>
		{
			timestamp = HAL_GetTick();
 8002a02:	f000 fec3 	bl	800378c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <updateRingLED+0x5c>)
 8002a0a:	601a      	str	r2, [r3, #0]
			memset(frameBuffer, 0, sizeof(frameBuffer));
 8002a0c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8002a10:	2100      	movs	r1, #0
 8002a12:	480b      	ldr	r0, [pc, #44]	; (8002a40 <updateRingLED+0x60>)
 8002a14:	f004 f9e8 	bl	8006de8 <memset>
			visRing(frameBuffer, sizeof(frameBuffer), numRing, numLEDs);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002a20:	4807      	ldr	r0, [pc, #28]	; (8002a40 <updateRingLED+0x60>)
 8002a22:	f7ff ff27 	bl	8002874 <visRing>
		}
		ws2812b.startTransfer = 1;
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <updateRingLED+0x58>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8002a2c:	f000 fe0e 	bl	800364c <ws2812b_handle>
	}
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2000035c 	.word	0x2000035c
 8002a3c:	20000274 	.word	0x20000274
 8002a40:	20000378 	.word	0x20000378

08002a44 <flashLED>:

void flashLED(int numRing)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	if (ws2812b.transferComplete)
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <flashLED+0x60>)
 8002a4e:	7c1b      	ldrb	r3, [r3, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01d      	beq.n	8002a90 <flashLED+0x4c>
	{
		static uint32_t timestamp;

		if (HAL_GetTick() - timestamp > 10)
 8002a54:	f000 fe9a 	bl	800378c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <flashLED+0x64>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b0a      	cmp	r3, #10
 8002a62:	d910      	bls.n	8002a86 <flashLED+0x42>
		{
			timestamp = HAL_GetTick();
 8002a64:	f000 fe92 	bl	800378c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <flashLED+0x64>)
 8002a6c:	601a      	str	r2, [r3, #0]
			memset(frameBuffer, 0, sizeof(frameBuffer));
 8002a6e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8002a72:	2100      	movs	r1, #0
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <flashLED+0x68>)
 8002a76:	f004 f9b7 	bl	8006de8 <memset>
			visFlashOn(frameBuffer, sizeof(frameBuffer), numRing);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002a80:	480a      	ldr	r0, [pc, #40]	; (8002aac <flashLED+0x68>)
 8002a82:	f7ff ff3d 	bl	8002900 <visFlashOn>
		}
		ws2812b.startTransfer = 1;
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <flashLED+0x60>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8002a8c:	f000 fdde 	bl	800364c <ws2812b_handle>
	}
	HAL_Delay(600);
 8002a90:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a94:	f000 fe86 	bl	80037a4 <HAL_Delay>
	clearLEDs();
 8002a98:	f000 f848 	bl	8002b2c <clearLEDs>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2000035c 	.word	0x2000035c
 8002aa8:	20000278 	.word	0x20000278
 8002aac:	20000378 	.word	0x20000378

08002ab0 <clearAll>:

void clearAll(uint8_t *frameBuffer, uint32_t frameBufferSize)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
	uint32_t color = newColor(0, 0, 0);
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < frameBufferSize / 3; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e022      	b.n	8002b0a <clearAll+0x5a>
	{
		frameBuffer[i*3 + 0] = (uint8_t)(color & 0xFF);
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = (uint8_t)(color >> 8 & 0xFF);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	0a19      	lsrs	r1, r3, #8
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	b2ca      	uxtb	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = (uint8_t)(color >> 16 & 0xFF);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	0c19      	lsrs	r1, r3, #16
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	3302      	adds	r3, #2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	b2ca      	uxtb	r2, r1
 8002b02:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < frameBufferSize / 3; i++)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3301      	adds	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <clearAll+0x78>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	085a      	lsrs	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d8d4      	bhi.n	8002ac4 <clearAll+0x14>
	}
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	aaaaaaab 	.word	0xaaaaaaab

08002b2c <clearLEDs>:

void clearLEDs()
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	if (ws2812b.transferComplete)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <clearLEDs+0x4c>)
 8002b32:	7c1b      	ldrb	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01c      	beq.n	8002b72 <clearLEDs+0x46>
	{
		static uint32_t timestamp;

		if (HAL_GetTick() - timestamp > 10)
 8002b38:	f000 fe28 	bl	800378c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <clearLEDs+0x50>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b0a      	cmp	r3, #10
 8002b46:	d90f      	bls.n	8002b68 <clearLEDs+0x3c>
		{
			timestamp = HAL_GetTick();
 8002b48:	f000 fe20 	bl	800378c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <clearLEDs+0x50>)
 8002b50:	601a      	str	r2, [r3, #0]
			memset(frameBuffer, 0, sizeof(frameBuffer));
 8002b52:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8002b56:	2100      	movs	r1, #0
 8002b58:	4809      	ldr	r0, [pc, #36]	; (8002b80 <clearLEDs+0x54>)
 8002b5a:	f004 f945 	bl	8006de8 <memset>
			clearAll(frameBuffer, sizeof(frameBuffer));
 8002b5e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <clearLEDs+0x54>)
 8002b64:	f7ff ffa4 	bl	8002ab0 <clearAll>
		}
		ws2812b.startTransfer = 1;
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <clearLEDs+0x4c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8002b6e:	f000 fd6d 	bl	800364c <ws2812b_handle>
	}

}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000035c 	.word	0x2000035c
 8002b7c:	2000027c 	.word	0x2000027c
 8002b80:	20000378 	.word	0x20000378

08002b84 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <ws2812b_gpio_init+0x94>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <ws2812b_gpio_init+0x94>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <ws2812b_gpio_init+0x94>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4817      	ldr	r0, [pc, #92]	; (8002c1c <ws2812b_gpio_init+0x98>)
 8002bbe:	f001 fc23 	bl	8004408 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <ws2812b_gpio_init+0x94>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <ws2812b_gpio_init+0x94>)
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <ws2812b_gpio_init+0x94>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bde:	2301      	movs	r3, #1
 8002be0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8002bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bee:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480a      	ldr	r0, [pc, #40]	; (8002c20 <ws2812b_gpio_init+0x9c>)
 8002bf8:	f001 fc06 	bl	8004408 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8002bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c00:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	4619      	mov	r1, r3
 8002c08:	4805      	ldr	r0, [pc, #20]	; (8002c20 <ws2812b_gpio_init+0x9c>)
 8002c0a:	f001 fbfd 	bl	8004408 <HAL_GPIO_Init>
	#endif
}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40020c00 	.word	0x40020c00

08002c24 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4b52      	ldr	r3, [pc, #328]	; (8002d78 <TIM1_init+0x154>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a51      	ldr	r2, [pc, #324]	; (8002d78 <TIM1_init+0x154>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <TIM1_init+0x154>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <TIM1_init+0x158>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <TIM1_init+0x15c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <TIM1_init+0x160>)
 8002c56:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8002c58:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <TIM1_init+0x158>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <TIM1_init+0x164>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0adb      	lsrs	r3, r3, #11
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <TIM1_init+0x168>)
 8002c66:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <TIM1_init+0x160>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <TIM1_init+0x16c>)
 8002c78:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <TIM1_init+0x160>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <TIM1_init+0x170>)
 8002c90:	fba3 2302 	umull	r2, r3, r3, r2
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <TIM1_init+0x174>)
 8002c9a:	4a40      	ldr	r2, [pc, #256]	; (8002d9c <TIM1_init+0x178>)
 8002c9c:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <TIM1_init+0x160>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <TIM1_init+0x174>)
 8002ca4:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <TIM1_init+0x174>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8002cac:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <TIM1_init+0x174>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <TIM1_init+0x174>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <TIM1_init+0x174>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 8002cbe:	4836      	ldr	r0, [pc, #216]	; (8002d98 <TIM1_init+0x174>)
 8002cc0:	f002 fa01 	bl	80050c6 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2019      	movs	r0, #25
 8002cca:	f000 fe68 	bl	800399e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cce:	2019      	movs	r0, #25
 8002cd0:	f000 fe81 	bl	80039d6 <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <TIM1_init+0x17c>)
 8002cd6:	2260      	movs	r2, #96	; 0x60
 8002cd8:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002cda:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <TIM1_init+0x17c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <TIM1_init+0x17c>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	; (8002da0 <TIM1_init+0x17c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8002cec:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <TIM1_init+0x17c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	492a      	ldr	r1, [pc, #168]	; (8002da0 <TIM1_init+0x17c>)
 8002cf6:	4828      	ldr	r0, [pc, #160]	; (8002d98 <TIM1_init+0x174>)
 8002cf8:	f002 fb60 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002cfc:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <TIM1_init+0x180>)
 8002cfe:	2260      	movs	r2, #96	; 0x60
 8002d00:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <TIM1_init+0x180>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <TIM1_init+0x180>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <TIM1_init+0x180>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8002d14:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <TIM1_init+0x180>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8002d1a:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <TIM1_init+0x180>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d20:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <TIM1_init+0x180>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 8002d26:	2204      	movs	r2, #4
 8002d28:	491e      	ldr	r1, [pc, #120]	; (8002da4 <TIM1_init+0x180>)
 8002d2a:	481b      	ldr	r0, [pc, #108]	; (8002d98 <TIM1_init+0x174>)
 8002d2c:	f002 fb46 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8002d30:	4819      	ldr	r0, [pc, #100]	; (8002d98 <TIM1_init+0x174>)
 8002d32:	f002 f9a4 	bl	800507e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 8002d36:	2100      	movs	r1, #0
 8002d38:	4817      	ldr	r0, [pc, #92]	; (8002d98 <TIM1_init+0x174>)
 8002d3a:	f002 f9f9 	bl	8005130 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <TIM1_init+0x174>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <TIM1_init+0x14a>
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <TIM1_init+0x174>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	f240 4344 	movw	r3, #1092	; 0x444
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <TIM1_init+0x14a>
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <TIM1_init+0x174>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <TIM1_init+0x174>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	2000004c 	.word	0x2000004c
 8002d80:	014f8b59 	.word	0x014f8b59
 8002d84:	200005e0 	.word	0x200005e0
 8002d88:	1b4e81b5 	.word	0x1b4e81b5
 8002d8c:	20000520 	.word	0x20000520
 8002d90:	38e38e39 	.word	0x38e38e39
 8002d94:	88888889 	.word	0x88888889
 8002d98:	200005a0 	.word	0x200005a0
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	20000584 	.word	0x20000584
 8002da4:	20000504 	.word	0x20000504

08002da8 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <DMA2_init+0x1a0>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a64      	ldr	r2, [pc, #400]	; (8002f48 <DMA2_init+0x1a0>)
 8002db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <DMA2_init+0x1a0>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dca:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <DMA2_init+0x1a4>)
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	; (8002f4c <DMA2_init+0x1a4>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <DMA2_init+0x1a4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <DMA2_init+0x1a4>)
 8002dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de2:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <DMA2_init+0x1a4>)
 8002de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dea:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <DMA2_init+0x1a4>)
 8002dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df2:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <DMA2_init+0x1a4>)
 8002df6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002dfa:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <DMA2_init+0x1a4>)
 8002dfe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002e02:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e04:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <DMA2_init+0x1a4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e0a:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <DMA2_init+0x1a4>)
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e10:	4b4e      	ldr	r3, [pc, #312]	; (8002f4c <DMA2_init+0x1a4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e16:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <DMA2_init+0x1a4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <DMA2_init+0x1a4>)
 8002e1e:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <DMA2_init+0x1a8>)
 8002e20:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 8002e22:	484a      	ldr	r0, [pc, #296]	; (8002f4c <DMA2_init+0x1a4>)
 8002e24:	f000 ff74 	bl	8003d10 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8002e28:	4848      	ldr	r0, [pc, #288]	; (8002f4c <DMA2_init+0x1a4>)
 8002e2a:	f000 fec3 	bl	8003bb4 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 8002e2e:	4949      	ldr	r1, [pc, #292]	; (8002f54 <DMA2_init+0x1ac>)
 8002e30:	2330      	movs	r3, #48	; 0x30
 8002e32:	4a49      	ldr	r2, [pc, #292]	; (8002f58 <DMA2_init+0x1b0>)
 8002e34:	4845      	ldr	r0, [pc, #276]	; (8002f4c <DMA2_init+0x1a4>)
 8002e36:	f000 ffc9 	bl	8003dcc <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e3a:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <DMA2_init+0x1b4>)
 8002e3c:	2240      	movs	r2, #64	; 0x40
 8002e3e:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e40:	4b46      	ldr	r3, [pc, #280]	; (8002f5c <DMA2_init+0x1b4>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 8002e46:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <DMA2_init+0x1b4>)
 8002e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4c:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <DMA2_init+0x1b4>)
 8002e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e54:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <DMA2_init+0x1b4>)
 8002e58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5c:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <DMA2_init+0x1b4>)
 8002e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e64:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <DMA2_init+0x1b4>)
 8002e68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e6c:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <DMA2_init+0x1b4>)
 8002e70:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002e74:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <DMA2_init+0x1b4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <DMA2_init+0x1b4>)
 8002e7e:	2203      	movs	r2, #3
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <DMA2_init+0x1b4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <DMA2_init+0x1b4>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <DMA2_init+0x1b4>)
 8002e90:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <DMA2_init+0x1b8>)
 8002e92:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 8002e94:	4831      	ldr	r0, [pc, #196]	; (8002f5c <DMA2_init+0x1b4>)
 8002e96:	f000 ff3b 	bl	8003d10 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 8002e9a:	4830      	ldr	r0, [pc, #192]	; (8002f5c <DMA2_init+0x1b4>)
 8002e9c:	f000 fe8a 	bl	8003bb4 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 8002ea0:	4930      	ldr	r1, [pc, #192]	; (8002f64 <DMA2_init+0x1bc>)
 8002ea2:	2330      	movs	r3, #48	; 0x30
 8002ea4:	4a30      	ldr	r2, [pc, #192]	; (8002f68 <DMA2_init+0x1c0>)
 8002ea6:	482d      	ldr	r0, [pc, #180]	; (8002f5c <DMA2_init+0x1b4>)
 8002ea8:	f000 ff90 	bl	8003dcc <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <DMA2_init+0x1c4>)
 8002eae:	2240      	movs	r2, #64	; 0x40
 8002eb0:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <DMA2_init+0x1c4>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <DMA2_init+0x1c4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ebe:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <DMA2_init+0x1c4>)
 8002ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ec4:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <DMA2_init+0x1c4>)
 8002ec8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ecc:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 8002ece:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <DMA2_init+0x1c4>)
 8002ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed4:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ed6:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <DMA2_init+0x1c4>)
 8002ed8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002edc:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <DMA2_init+0x1c4>)
 8002ee0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002ee4:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <DMA2_init+0x1c4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <DMA2_init+0x1c4>)
 8002eee:	2203      	movs	r2, #3
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <DMA2_init+0x1c4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <DMA2_init+0x1c4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <DMA2_init+0x1c4>)
 8002f00:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <DMA2_init+0x1c8>)
 8002f02:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8002f04:	4819      	ldr	r0, [pc, #100]	; (8002f6c <DMA2_init+0x1c4>)
 8002f06:	f000 ff03 	bl	8003d10 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <DMA2_init+0x1c4>)
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <DMA2_init+0x1cc>)
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <DMA2_init+0x1c4>)
 8002f12:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <DMA2_init+0x1d0>)
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <DMA2_init+0x1c4>)
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <DMA2_init+0x1d4>)
 8002f1a:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 8002f1c:	4813      	ldr	r0, [pc, #76]	; (8002f6c <DMA2_init+0x1c4>)
 8002f1e:	f000 fe49 	bl	8003bb4 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	203a      	movs	r0, #58	; 0x3a
 8002f28:	f000 fd39 	bl	800399e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002f2c:	203a      	movs	r0, #58	; 0x3a
 8002f2e:	f000 fd52 	bl	80039d6 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8002f32:	4913      	ldr	r1, [pc, #76]	; (8002f80 <DMA2_init+0x1d8>)
 8002f34:	2330      	movs	r3, #48	; 0x30
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <DMA2_init+0x1b0>)
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <DMA2_init+0x1c4>)
 8002f3a:	f000 ff82 	bl	8003e42 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	200006a8 	.word	0x200006a8
 8002f50:	40026488 	.word	0x40026488
 8002f54:	20000050 	.word	0x20000050
 8002f58:	40021018 	.word	0x40021018
 8002f5c:	200005e4 	.word	0x200005e4
 8002f60:	40026428 	.word	0x40026428
 8002f64:	20000648 	.word	0x20000648
 8002f68:	4002101a 	.word	0x4002101a
 8002f6c:	20000524 	.word	0x20000524
 8002f70:	40026440 	.word	0x40026440
 8002f74:	0800327d 	.word	0x0800327d
 8002f78:	08003221 	.word	0x08003221
 8002f7c:	08003201 	.word	0x08003201
 8002f80:	20000054 	.word	0x20000054

08002f84 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	1c58      	adds	r0, r3, #1
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	6088      	str	r0, [r1, #8]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	1c58      	adds	r0, r3, #1
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	6088      	str	r0, [r1, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	1c58      	adds	r0, r3, #1
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6088      	str	r0, [r1, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d102      	bne.n	8002fdc <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7b18      	ldrb	r0, [r3, #12]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b299      	uxth	r1, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	b2dc      	uxtb	r4, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	f000 fa34 	bl	8003460 <ws2812b_set_pixel>
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 8003006:	4b72      	ldr	r3, [pc, #456]	; (80031d0 <WS2812_sendbuf+0x1d0>)
 8003008:	2200      	movs	r2, #0
 800300a:	741a      	strb	r2, [r3, #16]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	e019      	b.n	8003046 <WS2812_sendbuf+0x46>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 8003012:	4a6f      	ldr	r2, [pc, #444]	; (80031d0 <WS2812_sendbuf+0x1d0>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	4413      	add	r3, r2
 800301a:	3308      	adds	r3, #8
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4a6a      	ldr	r2, [pc, #424]	; (80031d0 <WS2812_sendbuf+0x1d0>)
 8003026:	4413      	add	r3, r2
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ffaa 	bl	8002f84 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	4a66      	ldr	r2, [pc, #408]	; (80031d0 <WS2812_sendbuf+0x1d0>)
 8003036:	4413      	add	r3, r2
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ffa2 	bl	8002f84 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3301      	adds	r3, #1
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0e2      	beq.n	8003012 <WS2812_sendbuf+0x12>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 800304c:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <WS2812_sendbuf+0x1d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <WS2812_sendbuf+0x1d8>)
 8003054:	429a      	cmp	r2, r3
 8003056:	d904      	bls.n	8003062 <WS2812_sendbuf+0x62>
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <WS2812_sendbuf+0x1dc>)
 800305a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	e019      	b.n	8003096 <WS2812_sendbuf+0x96>
 8003062:	4b5c      	ldr	r3, [pc, #368]	; (80031d4 <WS2812_sendbuf+0x1d4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <WS2812_sendbuf+0x1e0>)
 800306a:	429a      	cmp	r2, r3
 800306c:	d904      	bls.n	8003078 <WS2812_sendbuf+0x78>
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <WS2812_sendbuf+0x1dc>)
 8003070:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	e00e      	b.n	8003096 <WS2812_sendbuf+0x96>
 8003078:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <WS2812_sendbuf+0x1d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <WS2812_sendbuf+0x1e4>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d904      	bls.n	800308e <WS2812_sendbuf+0x8e>
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <WS2812_sendbuf+0x1e8>)
 8003086:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e003      	b.n	8003096 <WS2812_sendbuf+0x96>
 800308e:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <WS2812_sendbuf+0x1e8>)
 8003090:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8003094:	609a      	str	r2, [r3, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8003096:	4b55      	ldr	r3, [pc, #340]	; (80031ec <WS2812_sendbuf+0x1ec>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b4e      	ldr	r3, [pc, #312]	; (80031d8 <WS2812_sendbuf+0x1d8>)
 800309e:	429a      	cmp	r2, r3
 80030a0:	d904      	bls.n	80030ac <WS2812_sendbuf+0xac>
 80030a2:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <WS2812_sendbuf+0x1dc>)
 80030a4:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	e019      	b.n	80030e0 <WS2812_sendbuf+0xe0>
 80030ac:	4b4f      	ldr	r3, [pc, #316]	; (80031ec <WS2812_sendbuf+0x1ec>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <WS2812_sendbuf+0x1e0>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d904      	bls.n	80030c2 <WS2812_sendbuf+0xc2>
 80030b8:	4b48      	ldr	r3, [pc, #288]	; (80031dc <WS2812_sendbuf+0x1dc>)
 80030ba:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e00e      	b.n	80030e0 <WS2812_sendbuf+0xe0>
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <WS2812_sendbuf+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <WS2812_sendbuf+0x1e4>)
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d904      	bls.n	80030d8 <WS2812_sendbuf+0xd8>
 80030ce:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <WS2812_sendbuf+0x1e8>)
 80030d0:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	e003      	b.n	80030e0 <WS2812_sendbuf+0xe0>
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <WS2812_sendbuf+0x1e8>)
 80030da:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80030de:	609a      	str	r2, [r3, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 80030e0:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <WS2812_sendbuf+0x1f0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <WS2812_sendbuf+0x1d8>)
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d904      	bls.n	80030f6 <WS2812_sendbuf+0xf6>
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <WS2812_sendbuf+0x1dc>)
 80030ee:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e019      	b.n	800312a <WS2812_sendbuf+0x12a>
 80030f6:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <WS2812_sendbuf+0x1f0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <WS2812_sendbuf+0x1e0>)
 80030fe:	429a      	cmp	r2, r3
 8003100:	d904      	bls.n	800310c <WS2812_sendbuf+0x10c>
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <WS2812_sendbuf+0x1dc>)
 8003104:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	e00e      	b.n	800312a <WS2812_sendbuf+0x12a>
 800310c:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <WS2812_sendbuf+0x1f0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <WS2812_sendbuf+0x1e4>)
 8003114:	429a      	cmp	r2, r3
 8003116:	d904      	bls.n	8003122 <WS2812_sendbuf+0x122>
 8003118:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <WS2812_sendbuf+0x1e8>)
 800311a:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	e003      	b.n	800312a <WS2812_sendbuf+0x12a>
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <WS2812_sendbuf+0x1e8>)
 8003124:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8003128:	609a      	str	r2, [r3, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <WS2812_sendbuf+0x1d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2230      	movs	r2, #48	; 0x30
 8003130:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8003132:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <WS2812_sendbuf+0x1ec>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2230      	movs	r2, #48	; 0x30
 8003138:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <WS2812_sendbuf+0x1f0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2230      	movs	r2, #48	; 0x30
 8003140:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f06f 021f 	mvn.w	r2, #31
 800314a:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <WS2812_sendbuf+0x1d4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <WS2812_sendbuf+0x1d4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <WS2812_sendbuf+0x1ec>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <WS2812_sendbuf+0x1ec>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <WS2812_sendbuf+0x1f0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <WS2812_sendbuf+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 800319c:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031aa:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <WS2812_sendbuf+0x1f8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <WS2812_sendbuf+0x1fc>)
 80031b2:	3b01      	subs	r3, #1
 80031b4:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <WS2812_sendbuf+0x1f4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2000035c 	.word	0x2000035c
 80031d4:	200006a8 	.word	0x200006a8
 80031d8:	40026458 	.word	0x40026458
 80031dc:	40026400 	.word	0x40026400
 80031e0:	400260b8 	.word	0x400260b8
 80031e4:	40026058 	.word	0x40026058
 80031e8:	40026000 	.word	0x40026000
 80031ec:	200005e4 	.word	0x200005e4
 80031f0:	20000524 	.word	0x20000524
 80031f4:	200005a0 	.word	0x200005a0
 80031f8:	200005e0 	.word	0x200005e0
 80031fc:	40010000 	.word	0x40010000

08003200 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
	i++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <DMA_TransferHalfHandler+0x58>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b84      	cmp	r3, #132	; 0x84
 800322e:	d108      	bne.n	8003242 <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8003230:	2300      	movs	r3, #0
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2300      	movs	r3, #0
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	2000      	movs	r0, #0
 800323c:	f000 f910 	bl	8003460 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 8003240:	e015      	b.n	800326e <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e00a      	b.n	800325e <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <DMA_TransferHalfHandler+0x58>)
 800324e:	4413      	add	r3, r2
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fe96 	bl	8002f84 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f1      	beq.n	8003248 <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <DMA_TransferHalfHandler+0x58>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	3301      	adds	r3, #1
 800326a:	4a03      	ldr	r2, [pc, #12]	; (8003278 <DMA_TransferHalfHandler+0x58>)
 800326c:	6193      	str	r3, [r2, #24]
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000035c 	.word	0x2000035c

0800327c <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8003284:	4b40      	ldr	r3, [pc, #256]	; (8003388 <DMA_TransferCompleteHandler+0x10c>)
 8003286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800328a:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <DMA_TransferCompleteHandler+0x110>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b84      	cmp	r3, #132	; 0x84
 8003292:	d15a      	bne.n	800334a <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <DMA_TransferCompleteHandler+0x110>)
 8003296:	2200      	movs	r2, #0
 8003298:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 800329a:	4b3d      	ldr	r3, [pc, #244]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <DMA_TransferCompleteHandler+0x118>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <DMA_TransferCompleteHandler+0x118>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <DMA_TransferCompleteHandler+0x11c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <DMA_TransferCompleteHandler+0x11c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 80032c6:	4b35      	ldr	r3, [pc, #212]	; (800339c <DMA_TransferCompleteHandler+0x120>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <DMA_TransferCompleteHandler+0x120>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80032d6:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e4:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032f4:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8003306:	4a22      	ldr	r2, [pc, #136]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <DMA_TransferCompleteHandler+0x128>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 8003310:	2200      	movs	r2, #0
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 8003316:	2201      	movs	r2, #1
 8003318:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0201 	mvn.w	r2, #1
 8003322:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <DMA_TransferCompleteHandler+0x124>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <DMA_TransferCompleteHandler+0x114>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <DMA_TransferCompleteHandler+0x12c>)
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <DMA_TransferCompleteHandler+0x130>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	e015      	b.n	8003376 <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e00a      	b.n	8003366 <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <DMA_TransferCompleteHandler+0x110>)
 8003356:	4413      	add	r3, r2
 8003358:	2101      	movs	r1, #1
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fe12 	bl	8002f84 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f1      	beq.n	8003350 <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <DMA_TransferCompleteHandler+0x110>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	3301      	adds	r3, #1
 8003372:	4a06      	ldr	r2, [pc, #24]	; (800338c <DMA_TransferCompleteHandler+0x110>)
 8003374:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <DMA_TransferCompleteHandler+0x10c>)
 8003378:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800337c:	619a      	str	r2, [r3, #24]
	#endif

}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40020c00 	.word	0x40020c00
 800338c:	2000035c 	.word	0x2000035c
 8003390:	40010000 	.word	0x40010000
 8003394:	200006a8 	.word	0x200006a8
 8003398:	200005e4 	.word	0x200005e4
 800339c:	20000524 	.word	0x20000524
 80033a0:	200005a0 	.word	0x200005a0
 80033a4:	20000520 	.word	0x20000520
 80033a8:	40021000 	.word	0x40021000
 80033ac:	20000054 	.word	0x20000054

080033b0 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <DMA2_Stream2_IRQHandler+0x20>)
 80033b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033ba:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 80033bc:	4805      	ldr	r0, [pc, #20]	; (80033d4 <DMA2_Stream2_IRQHandler+0x24>)
 80033be:	f000 fdbb 	bl	8003f38 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80033c2:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <DMA2_Stream2_IRQHandler+0x20>)
 80033c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033c8:	619a      	str	r2, [r3, #24]
	#endif
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	20000524 	.word	0x20000524

080033d8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80033de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e2:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <TIM1_UP_TIM10_IRQHandler+0x24>)
 80033e6:	f001 fee1 	bl	80051ac <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 80033ea:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80033ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033f0:	619a      	str	r2, [r3, #24]
	#endif
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	200005a0 	.word	0x200005a0

08003400 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800340a:	2200      	movs	r2, #0
 800340c:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8003424:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800342e:	2201      	movs	r2, #1
 8003430:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0201 	mvn.w	r2, #1
 800343a:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800343e:	2201      	movs	r2, #1
 8003440:	741a      	strb	r2, [r3, #16]

}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000035c 	.word	0x2000035c
 8003454:	40010000 	.word	0x40010000
 8003458:	200005a0 	.word	0x200005a0
 800345c:	200005e0 	.word	0x200005e0

08003460 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8003460:	b490      	push	{r4, r7}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	4604      	mov	r4, r0
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	71fb      	strb	r3, [r7, #7]
 8003472:	4603      	mov	r3, r0
 8003474:	80bb      	strh	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	71bb      	strb	r3, [r7, #6]
 800347a:	4613      	mov	r3, r2
 800347c:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <ws2812b_set_pixel+0x1c4>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	4a66      	ldr	r2, [pc, #408]	; (8003624 <ws2812b_set_pixel+0x1c4>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 800348e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003492:	4a64      	ldr	r2, [pc, #400]	; (8003624 <ws2812b_set_pixel+0x1c4>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 800349a:	88ba      	ldrh	r2, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 80034a6:	79bb      	ldrb	r3, [r7, #6]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 80034b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034b6:	43db      	mvns	r3, r3
 80034b8:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4a5a      	ldr	r2, [pc, #360]	; (8003628 <ws2812b_set_pixel+0x1c8>)
 80034c0:	4413      	add	r3, r2
 80034c2:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
 80034c6:	015b      	lsls	r3, r3, #5
 80034c8:	79fa      	ldrb	r2, [r7, #7]
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	09da      	lsrs	r2, r3, #7
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3340      	adds	r3, #64	; 0x40
 80034dc:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	099a      	lsrs	r2, r3, #6
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3340      	adds	r3, #64	; 0x40
 80034ea:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	095a      	lsrs	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3340      	adds	r3, #64	; 0x40
 80034f8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	091a      	lsrs	r2, r3, #4
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3340      	adds	r3, #64	; 0x40
 8003506:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	08da      	lsrs	r2, r3, #3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3340      	adds	r3, #64	; 0x40
 8003514:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	089a      	lsrs	r2, r3, #2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3340      	adds	r3, #64	; 0x40
 8003522:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	085a      	lsrs	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3340      	adds	r3, #64	; 0x40
 8003530:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3340      	adds	r3, #64	; 0x40
 800353c:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	09da      	lsrs	r2, r3, #7
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3340      	adds	r3, #64	; 0x40
 800354a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	099a      	lsrs	r2, r3, #6
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3340      	adds	r3, #64	; 0x40
 8003558:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	095a      	lsrs	r2, r3, #5
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3340      	adds	r3, #64	; 0x40
 8003566:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	091a      	lsrs	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3340      	adds	r3, #64	; 0x40
 8003574:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	08da      	lsrs	r2, r3, #3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3340      	adds	r3, #64	; 0x40
 8003582:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	089a      	lsrs	r2, r3, #2
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3340      	adds	r3, #64	; 0x40
 8003590:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	085a      	lsrs	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3340      	adds	r3, #64	; 0x40
 800359e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3340      	adds	r3, #64	; 0x40
 80035aa:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	09da      	lsrs	r2, r3, #7
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3340      	adds	r3, #64	; 0x40
 80035b8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	099a      	lsrs	r2, r3, #6
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	095a      	lsrs	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3340      	adds	r3, #64	; 0x40
 80035d4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	091a      	lsrs	r2, r3, #4
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3340      	adds	r3, #64	; 0x40
 80035e2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3340      	adds	r3, #64	; 0x40
 80035f0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	089a      	lsrs	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3340      	adds	r3, #64	; 0x40
 80035fe:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	085a      	lsrs	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3340      	adds	r3, #64	; 0x40
 800360c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3340      	adds	r3, #64	; 0x40
 8003618:	60fb      	str	r3, [r7, #12]

#endif
}
 800361a:	bf00      	nop
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bc90      	pop	{r4, r7}
 8003622:	4770      	bx	lr
 8003624:	0800a3ac 	.word	0x0800a3ac
 8003628:	20000648 	.word	0x20000648

0800362c <ws2812b_init>:


void ws2812b_init()
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8003630:	f7ff faa8 	bl	8002b84 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8003634:	f7ff fbb8 	bl	8002da8 <DMA2_init>
	TIM1_init();
 8003638:	f7ff faf4 	bl	8002c24 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <ws2812b_init+0x1c>)
 800363e:	2201      	movs	r2, #1
 8003640:	741a      	strb	r2, [r3, #16]
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	2000035c 	.word	0x2000035c

0800364c <ws2812b_handle>:


void ws2812b_handle()
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <ws2812b_handle+0x1c>)
 8003652:	7c5b      	ldrb	r3, [r3, #17]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <ws2812b_handle+0x16>
		ws2812b.startTransfer = 0;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <ws2812b_handle+0x1c>)
 800365a:	2200      	movs	r2, #0
 800365c:	745a      	strb	r2, [r3, #17]
		WS2812_sendbuf();
 800365e:	f7ff fccf 	bl	8003000 <WS2812_sendbuf>
	}

}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	2000035c 	.word	0x2000035c

0800366c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800366c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003670:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003672:	e003      	b.n	800367c <LoopCopyDataInit>

08003674 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003676:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003678:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800367a:	3104      	adds	r1, #4

0800367c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003680:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003682:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003684:	d3f6      	bcc.n	8003674 <CopyDataInit>
  ldr  r2, =_sbss
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003688:	e002      	b.n	8003690 <LoopFillZerobss>

0800368a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800368a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800368c:	f842 3b04 	str.w	r3, [r2], #4

08003690 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003692:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003694:	d3f9      	bcc.n	800368a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003696:	f7ff f8d7 	bl	8002848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800369a:	f003 fb81 	bl	8006da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369e:	f7fe fb53 	bl	8001d48 <main>
  bx  lr    
 80036a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036a4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80036a8:	0800a768 	.word	0x0800a768
  ldr  r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036b0:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 80036b4:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 80036b8:	20000710 	.word	0x20000710

080036bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036bc:	e7fe      	b.n	80036bc <ADC_IRQHandler>
	...

080036c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_Init+0x40>)
 80036ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_Init+0x40>)
 80036d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_Init+0x40>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f000 f94d 	bl	8003988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f000 f808 	bl	8003704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f4:	f7fe fe7e 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00

08003704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_InitTick+0x54>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_InitTick+0x58>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371a:	fbb3 f3f1 	udiv	r3, r3, r1
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f965 	bl	80039f2 <HAL_SYSTICK_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e00e      	b.n	8003750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d80a      	bhi.n	800374e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003738:	2200      	movs	r2, #0
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003740:	f000 f92d 	bl	800399e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <HAL_InitTick+0x5c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000004c 	.word	0x2000004c
 800375c:	2000005c 	.word	0x2000005c
 8003760:	20000058 	.word	0x20000058

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	2000005c 	.word	0x2000005c
 8003788:	20000708 	.word	0x20000708

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000708 	.word	0x20000708

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037bc:	d005      	beq.n	80037ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_Delay+0x40>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ca:	bf00      	nop
 80037cc:	f7ff ffde 	bl	800378c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <HAL_Delay+0x28>
  {
  }
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000005c 	.word	0x2000005c

080037e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db0b      	blt.n	8003876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <__NVIC_EnableIRQ+0x38>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003898:	2b00      	cmp	r3, #0
 800389a:	db0a      	blt.n	80038b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <__NVIC_SetPriority+0x4c>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	440b      	add	r3, r1
 80038ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b0:	e00a      	b.n	80038c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4908      	ldr	r1, [pc, #32]	; (80038d8 <__NVIC_SetPriority+0x50>)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3b04      	subs	r3, #4
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	440b      	add	r3, r1
 80038c6:	761a      	strb	r2, [r3, #24]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f1c3 0307 	rsb	r3, r3, #7
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf28      	it	cs
 80038fa:	2304      	movcs	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3304      	adds	r3, #4
 8003902:	2b06      	cmp	r3, #6
 8003904:	d902      	bls.n	800390c <NVIC_EncodePriority+0x30>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3b03      	subs	r3, #3
 800390a:	e000      	b.n	800390e <NVIC_EncodePriority+0x32>
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	401a      	ands	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	43d9      	mvns	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	4313      	orrs	r3, r2
         );
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003954:	d301      	bcc.n	800395a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003956:	2301      	movs	r3, #1
 8003958:	e00f      	b.n	800397a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <SysTick_Config+0x40>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003962:	210f      	movs	r1, #15
 8003964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003968:	f7ff ff8e 	bl	8003888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <SysTick_Config+0x40>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <SysTick_Config+0x40>)
 8003974:	2207      	movs	r2, #7
 8003976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000e010 	.word	0xe000e010

08003988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff29 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b0:	f7ff ff3e 	bl	8003830 <__NVIC_GetPriorityGrouping>
 80039b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	6978      	ldr	r0, [r7, #20]
 80039bc:	f7ff ff8e 	bl	80038dc <NVIC_EncodePriority>
 80039c0:	4602      	mov	r2, r0
 80039c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff5d 	bl	8003888 <__NVIC_SetPriority>
}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff31 	bl	800384c <__NVIC_EnableIRQ>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffa2 	bl	8003944 <SysTick_Config>
 8003a00:	4603      	mov	r3, r0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e014      	b.n	8003a46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	791b      	ldrb	r3, [r3, #4]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fe fd09 	bl	8002444 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	795b      	ldrb	r3, [r3, #5]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_DAC_Start+0x1e>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e050      	b.n	8003b0e <HAL_DAC_Start+0xc0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	409a      	lsls	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11a      	bne.n	8003ac8 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa8:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d127      	bne.n	8003b00 <HAL_DAC_Start+0xb2>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b38      	cmp	r3, #56	; 0x38
 8003ab4:	d124      	bne.n	8003b00 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	e01b      	b.n	8003b00 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8003ade:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae6:	d10b      	bne.n	8003b00 <HAL_DAC_Start+0xb2>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003aee:	d107      	bne.n	8003b00 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0202 	orr.w	r2, r2, #2
 8003afe:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	795b      	ldrb	r3, [r3, #5]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_DAC_ConfigChannel+0x20>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e036      	b.n	8003ba8 <HAL_DAC_ConfigChannel+0x8e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2202      	movs	r2, #2
 8003b44:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003b4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	22c0      	movs	r2, #192	; 0xc0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43da      	mvns	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	400a      	ands	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff fde4 	bl	800378c <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e099      	b.n	8003d04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf0:	e00f      	b.n	8003c12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bf2:	f7ff fdcb 	bl	800378c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d908      	bls.n	8003c12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e078      	b.n	8003d04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e8      	bne.n	8003bf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <HAL_DMA_Init+0x158>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	4313      	orrs	r3, r2
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0307 	bic.w	r3, r3, #7
 8003c92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d117      	bne.n	8003cd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fb2b 	bl	8004314 <DMA_CheckFifoParam>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e016      	b.n	8003d04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fae2 	bl	80042a8 <DMA_CalcBaseAndBitshift>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	223f      	movs	r2, #63	; 0x3f
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	e010803f 	.word	0xe010803f

08003d10 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e050      	b.n	8003dc4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d101      	bne.n	8003d32 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e048      	b.n	8003dc4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2221      	movs	r2, #33	; 0x21
 8003d70:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa98 	bl	80042a8 <DMA_CalcBaseAndBitshift>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	223f      	movs	r2, #63	; 0x3f
 8003da6:	409a      	lsls	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_DMA_Start+0x20>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e026      	b.n	8003e3a <HAL_DMA_Start+0x6e>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d115      	bne.n	8003e2c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fa19 	bl	800424c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e005      	b.n	8003e38 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
 8003e36:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Start_IT+0x26>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e040      	b.n	8003eea <HAL_DMA_Start_IT+0xa8>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d12f      	bne.n	8003edc <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9db 	bl	800424c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9a:	223f      	movs	r2, #63	; 0x3f
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0216 	orr.w	r2, r2, #22
 8003eb0:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e005      	b.n	8003ee8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e00c      	b.n	8003f2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2205      	movs	r2, #5
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f44:	4b92      	ldr	r3, [pc, #584]	; (8004190 <HAL_DMA_IRQHandler+0x258>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a92      	ldr	r2, [pc, #584]	; (8004194 <HAL_DMA_IRQHandler+0x25c>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	0a9b      	lsrs	r3, r3, #10
 8003f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2208      	movs	r2, #8
 8003f64:	409a      	lsls	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01a      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0204 	bic.w	r2, r2, #4
 8003f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	2208      	movs	r2, #8
 8003f92:	409a      	lsls	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	2201      	movs	r2, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	2204      	movs	r2, #4
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	409a      	lsls	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	2210      	movs	r2, #16
 8004016:	409a      	lsls	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d043      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03c      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	2210      	movs	r2, #16
 8004034:	409a      	lsls	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d108      	bne.n	8004068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d024      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e01f      	b.n	80040a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e016      	b.n	80040a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0208 	bic.w	r2, r2, #8
 8004096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	2220      	movs	r2, #32
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 808e 	beq.w	80041d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8086 	beq.w	80041d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	2220      	movs	r2, #32
 80040d0:	409a      	lsls	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d136      	bne.n	8004150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0216 	bic.w	r2, r2, #22
 80040f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_DMA_IRQHandler+0x1da>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0208 	bic.w	r2, r2, #8
 8004120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	223f      	movs	r2, #63	; 0x3f
 8004128:	409a      	lsls	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004142:	2b00      	cmp	r3, #0
 8004144:	d07d      	beq.n	8004242 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4798      	blx	r3
        }
        return;
 800414e:	e078      	b.n	8004242 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01c      	beq.n	8004198 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d108      	bne.n	800417e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	2b00      	cmp	r3, #0
 8004172:	d030      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
 800417c:	e02b      	b.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
 800418e:	e022      	b.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
 8004190:	2000004c 	.word	0x2000004c
 8004194:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0210 	bic.w	r2, r2, #16
 80041b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d032      	beq.n	8004244 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2205      	movs	r2, #5
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	429a      	cmp	r2, r3
 800420c:	d307      	bcc.n	800421e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f2      	bne.n	8004202 <HAL_DMA_IRQHandler+0x2ca>
 800421c:	e000      	b.n	8004220 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800421e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
 8004240:	e000      	b.n	8004244 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004242:	bf00      	nop
    }
  }
}
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop

0800424c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004268:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d108      	bne.n	800428c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800428a:	e007      	b.n	800429c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3b10      	subs	r3, #16
 80042b8:	4a14      	ldr	r2, [pc, #80]	; (800430c <DMA_CalcBaseAndBitshift+0x64>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <DMA_CalcBaseAndBitshift+0x68>)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d909      	bls.n	80042ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	1d1a      	adds	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	659a      	str	r2, [r3, #88]	; 0x58
 80042e8:	e007      	b.n	80042fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	aaaaaaab 	.word	0xaaaaaaab
 8004310:	0800a4ac 	.word	0x0800a4ac

08004314 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11f      	bne.n	800436e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d855      	bhi.n	80043e0 <DMA_CheckFifoParam+0xcc>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <DMA_CheckFifoParam+0x28>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435f 	.word	0x0800435f
 8004344:	0800434d 	.word	0x0800434d
 8004348:	080043e1 	.word	0x080043e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d045      	beq.n	80043e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e042      	b.n	80043e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004366:	d13f      	bne.n	80043e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e03c      	b.n	80043e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	d121      	bne.n	80043bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d836      	bhi.n	80043ec <DMA_CheckFifoParam+0xd8>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <DMA_CheckFifoParam+0x70>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	08004395 	.word	0x08004395
 8004388:	0800439b 	.word	0x0800439b
 800438c:	08004395 	.word	0x08004395
 8004390:	080043ad 	.word	0x080043ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	73fb      	strb	r3, [r7, #15]
      break;
 8004398:	e02f      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d024      	beq.n	80043f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043aa:	e021      	b.n	80043f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043b4:	d11e      	bne.n	80043f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043ba:	e01b      	b.n	80043f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d902      	bls.n	80043c8 <DMA_CheckFifoParam+0xb4>
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d003      	beq.n	80043ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043c6:	e018      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e015      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00e      	beq.n	80043f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      break;
 80043de:	e00b      	b.n	80043f8 <DMA_CheckFifoParam+0xe4>
      break;
 80043e0:	bf00      	nop
 80043e2:	e00a      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;
 80043e4:	bf00      	nop
 80043e6:	e008      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;
 80043e8:	bf00      	nop
 80043ea:	e006      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;
 80043ec:	bf00      	nop
 80043ee:	e004      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;   
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <DMA_CheckFifoParam+0xe6>
      break;
 80043f8:	bf00      	nop
    }
  } 
  
  return status; 
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e165      	b.n	80046f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004424:	2201      	movs	r2, #1
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	429a      	cmp	r2, r3
 800443e:	f040 8154 	bne.w	80046ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d00b      	beq.n	8004462 <HAL_GPIO_Init+0x5a>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d007      	beq.n	8004462 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004456:	2b11      	cmp	r3, #17
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b12      	cmp	r3, #18
 8004460:	d130      	bne.n	80044c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	2203      	movs	r2, #3
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004498:	2201      	movs	r2, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 0201 	and.w	r2, r3, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0xfc>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b12      	cmp	r3, #18
 8004502:	d123      	bne.n	800454c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	08da      	lsrs	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3208      	adds	r2, #8
 800450c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	08da      	lsrs	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3208      	adds	r2, #8
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	2203      	movs	r2, #3
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0203 	and.w	r2, r3, #3
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80ae 	beq.w	80046ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	4b5c      	ldr	r3, [pc, #368]	; (8004704 <HAL_GPIO_Init+0x2fc>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	4a5b      	ldr	r2, [pc, #364]	; (8004704 <HAL_GPIO_Init+0x2fc>)
 8004598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800459c:	6453      	str	r3, [r2, #68]	; 0x44
 800459e:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_GPIO_Init+0x2fc>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045aa:	4a57      	ldr	r2, [pc, #348]	; (8004708 <HAL_GPIO_Init+0x300>)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	3302      	adds	r3, #2
 80045b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	220f      	movs	r2, #15
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4e      	ldr	r2, [pc, #312]	; (800470c <HAL_GPIO_Init+0x304>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d025      	beq.n	8004622 <HAL_GPIO_Init+0x21a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4d      	ldr	r2, [pc, #308]	; (8004710 <HAL_GPIO_Init+0x308>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <HAL_GPIO_Init+0x216>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4c      	ldr	r2, [pc, #304]	; (8004714 <HAL_GPIO_Init+0x30c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d019      	beq.n	800461a <HAL_GPIO_Init+0x212>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4b      	ldr	r2, [pc, #300]	; (8004718 <HAL_GPIO_Init+0x310>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_GPIO_Init+0x20e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4a      	ldr	r2, [pc, #296]	; (800471c <HAL_GPIO_Init+0x314>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00d      	beq.n	8004612 <HAL_GPIO_Init+0x20a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a49      	ldr	r2, [pc, #292]	; (8004720 <HAL_GPIO_Init+0x318>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <HAL_GPIO_Init+0x206>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a48      	ldr	r2, [pc, #288]	; (8004724 <HAL_GPIO_Init+0x31c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_GPIO_Init+0x202>
 8004606:	2306      	movs	r3, #6
 8004608:	e00c      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 800460a:	2307      	movs	r3, #7
 800460c:	e00a      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 800460e:	2305      	movs	r3, #5
 8004610:	e008      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 8004612:	2304      	movs	r3, #4
 8004614:	e006      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 800461a:	2302      	movs	r3, #2
 800461c:	e002      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_Init+0x21c>
 8004622:	2300      	movs	r3, #0
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004634:	4934      	ldr	r1, [pc, #208]	; (8004708 <HAL_GPIO_Init+0x300>)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	3302      	adds	r3, #2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <HAL_GPIO_Init+0x320>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004666:	4a30      	ldr	r2, [pc, #192]	; (8004728 <HAL_GPIO_Init+0x320>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800466c:	4b2e      	ldr	r3, [pc, #184]	; (8004728 <HAL_GPIO_Init+0x320>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <HAL_GPIO_Init+0x320>)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_GPIO_Init+0x320>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ba:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_GPIO_Init+0x320>)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_GPIO_Init+0x320>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046e4:	4a10      	ldr	r2, [pc, #64]	; (8004728 <HAL_GPIO_Init+0x320>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	f67f ae96 	bls.w	8004424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	3724      	adds	r7, #36	; 0x24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40023800 	.word	0x40023800
 8004708:	40013800 	.word	0x40013800
 800470c:	40020000 	.word	0x40020000
 8004710:	40020400 	.word	0x40020400
 8004714:	40020800 	.word	0x40020800
 8004718:	40020c00 	.word	0x40020c00
 800471c:	40021000 	.word	0x40021000
 8004720:	40021400 	.word	0x40021400
 8004724:	40021800 	.word	0x40021800
 8004728:	40013c00 	.word	0x40013c00

0800472c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e001      	b.n	800474e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
 8004768:	4613      	mov	r3, r2
 800476a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004778:	e003      	b.n	8004782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	401a      	ands	r2, r3
 80047a2:	887b      	ldrh	r3, [r7, #2]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d104      	bne.n	80047b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	041a      	lsls	r2, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80047b0:	e002      	b.n	80047b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f806 	bl	80047f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40013c00 	.word	0x40013c00

080047f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0cc      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b68      	ldr	r3, [pc, #416]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90c      	bls.n	8004848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800486a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a52      	ldr	r2, [pc, #328]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d044      	beq.n	800492c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d119      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b3f      	ldr	r3, [pc, #252]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e06f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e067      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4934      	ldr	r1, [pc, #208]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fe ff46 	bl	800378c <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fe ff42 	bl	800378c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e04f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d20c      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f821 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004996:	4601      	mov	r1, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	fa21 f303 	lsr.w	r3, r1, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fea6 	bl	8003704 <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023c00 	.word	0x40023c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	0800a394 	.word	0x0800a394
 80049d0:	2000004c 	.word	0x2000004c
 80049d4:	20000058 	.word	0x20000058

080049d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	2300      	movs	r3, #0
 80049e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ee:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x158>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d007      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x32>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d008      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x38>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f040 808d 	bne.w	8004b1e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a06:	60bb      	str	r3, [r7, #8]
       break;
 8004a08:	e08c      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b4b      	ldr	r3, [pc, #300]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a0c:	60bb      	str	r3, [r7, #8]
      break;
 8004a0e:	e089      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d023      	beq.n	8004a6e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	ea03 0501 	and.w	r5, r3, r1
 8004a3c:	ea04 0602 	and.w	r6, r4, r2
 8004a40:	4a3d      	ldr	r2, [pc, #244]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a42:	fb02 f106 	mul.w	r1, r2, r6
 8004a46:	2200      	movs	r2, #0
 8004a48:	fb02 f205 	mul.w	r2, r2, r5
 8004a4c:	440a      	add	r2, r1
 8004a4e:	493a      	ldr	r1, [pc, #232]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a50:	fba5 0101 	umull	r0, r1, r5, r1
 8004a54:	1853      	adds	r3, r2, r1
 8004a56:	4619      	mov	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f04f 0400 	mov.w	r4, #0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4623      	mov	r3, r4
 8004a62:	f7fc f8e9 	bl	8000c38 <__aeabi_uldivmod>
 8004a66:	4603      	mov	r3, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e049      	b.n	8004b02 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6e:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	f04f 0400 	mov.w	r4, #0
 8004a78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	ea03 0501 	and.w	r5, r3, r1
 8004a84:	ea04 0602 	and.w	r6, r4, r2
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	f04f 0400 	mov.w	r4, #0
 8004a94:	0154      	lsls	r4, r2, #5
 8004a96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a9a:	014b      	lsls	r3, r1, #5
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	1b49      	subs	r1, r1, r5
 8004aa2:	eb62 0206 	sbc.w	r2, r2, r6
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	0194      	lsls	r4, r2, #6
 8004ab0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ab4:	018b      	lsls	r3, r1, #6
 8004ab6:	1a5b      	subs	r3, r3, r1
 8004ab8:	eb64 0402 	sbc.w	r4, r4, r2
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	00e2      	lsls	r2, r4, #3
 8004ac6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aca:	00d9      	lsls	r1, r3, #3
 8004acc:	460b      	mov	r3, r1
 8004ace:	4614      	mov	r4, r2
 8004ad0:	195b      	adds	r3, r3, r5
 8004ad2:	eb44 0406 	adc.w	r4, r4, r6
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	02a2      	lsls	r2, r4, #10
 8004ae0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ae4:	0299      	lsls	r1, r3, #10
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4614      	mov	r4, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	4621      	mov	r1, r4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	461a      	mov	r2, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	f7fc f89e 	bl	8000c38 <__aeabi_uldivmod>
 8004afc:	4603      	mov	r3, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	60bb      	str	r3, [r7, #8]
      break;
 8004b1c:	e002      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b20:	60bb      	str	r3, [r7, #8]
      break;
 8004b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b24:	68bb      	ldr	r3, [r7, #8]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
 8004b34:	00f42400 	.word	0x00f42400
 8004b38:	017d7840 	.word	0x017d7840

08004b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	2000004c 	.word	0x2000004c

08004b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b58:	f7ff fff0 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b5c:	4601      	mov	r1, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0a9b      	lsrs	r3, r3, #10
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4a03      	ldr	r2, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6a:	5cd3      	ldrb	r3, [r2, r3]
 8004b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	0800a3a4 	.word	0x0800a3a4

08004b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b80:	f7ff ffdc 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8004b84:	4601      	mov	r1, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0b5b      	lsrs	r3, r3, #13
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4a03      	ldr	r2, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800a3a4 	.word	0x0800a3a4

08004ba4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d075      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bbc:	4ba2      	ldr	r3, [pc, #648]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d00c      	beq.n	8004be2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc8:	4b9f      	ldr	r3, [pc, #636]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d112      	bne.n	8004bfa <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd4:	4b9c      	ldr	r3, [pc, #624]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be0:	d10b      	bne.n	8004bfa <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be2:	4b99      	ldr	r3, [pc, #612]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d05b      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x102>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d157      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e20b      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x6e>
 8004c04:	4b90      	ldr	r3, [pc, #576]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a8f      	ldr	r2, [pc, #572]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e01d      	b.n	8004c4e <HAL_RCC_OscConfig+0xaa>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1a:	d10c      	bne.n	8004c36 <HAL_RCC_OscConfig+0x92>
 8004c1c:	4b8a      	ldr	r3, [pc, #552]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a89      	ldr	r2, [pc, #548]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b87      	ldr	r3, [pc, #540]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a86      	ldr	r2, [pc, #536]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	e00b      	b.n	8004c4e <HAL_RCC_OscConfig+0xaa>
 8004c36:	4b84      	ldr	r3, [pc, #528]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a83      	ldr	r2, [pc, #524]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b81      	ldr	r3, [pc, #516]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a80      	ldr	r2, [pc, #512]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d013      	beq.n	8004c7e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fe fd99 	bl	800378c <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5e:	f7fe fd95 	bl	800378c <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b64      	cmp	r3, #100	; 0x64
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e1d0      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c70:	4b75      	ldr	r3, [pc, #468]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0xba>
 8004c7c:	e014      	b.n	8004ca8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fe fd85 	bl	800378c <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c86:	f7fe fd81 	bl	800378c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b64      	cmp	r3, #100	; 0x64
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e1bc      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c98:	4b6b      	ldr	r3, [pc, #428]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0xe2>
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d063      	beq.n	8004d7c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc0:	4b61      	ldr	r3, [pc, #388]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d11c      	bne.n	8004d06 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ccc:	4b5e      	ldr	r3, [pc, #376]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd8:	4b5b      	ldr	r3, [pc, #364]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x14c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e190      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4952      	ldr	r1, [pc, #328]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d04:	e03a      	b.n	8004d7c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	; (8004e4c <HAL_RCC_OscConfig+0x2a8>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fe fd3a 	bl	800378c <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1c:	f7fe fd36 	bl	800378c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e171      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b43      	ldr	r3, [pc, #268]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	493f      	ldr	r1, [pc, #252]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
 8004d4e:	e015      	b.n	8004d7c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d50:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCC_OscConfig+0x2a8>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fd19 	bl	800378c <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fd15 	bl	800378c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e150      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d030      	beq.n	8004dea <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d90:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <HAL_RCC_OscConfig+0x2ac>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fe fcf9 	bl	800378c <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fe fcf5 	bl	800378c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e130      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1fa>
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fe fce2 	bl	800378c <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7fe fcde 	bl	800378c <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e119      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dde:	4b1a      	ldr	r3, [pc, #104]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 809f 	beq.w	8004f36 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6413      	str	r3, [r2, #64]	; 0x40
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_OscConfig+0x2a4>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_RCC_OscConfig+0x2b0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d120      	bne.n	8004e76 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <HAL_RCC_OscConfig+0x2b0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <HAL_RCC_OscConfig+0x2b0>)
 8004e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e40:	f7fe fca4 	bl	800378c <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	e010      	b.n	8004e6a <HAL_RCC_OscConfig+0x2c6>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	42470000 	.word	0x42470000
 8004e50:	42470e80 	.word	0x42470e80
 8004e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fe fc98 	bl	800378c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0d3      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6a:	4b6c      	ldr	r3, [pc, #432]	; (800501c <HAL_RCC_OscConfig+0x478>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCC_OscConfig+0x2e8>
 8004e7e:	4b68      	ldr	r3, [pc, #416]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a67      	ldr	r2, [pc, #412]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	e01c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x322>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x30a>
 8004e94:	4b62      	ldr	r3, [pc, #392]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a61      	ldr	r2, [pc, #388]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a5e      	ldr	r2, [pc, #376]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004eac:	e00b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x322>
 8004eae:	4b5c      	ldr	r3, [pc, #368]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a5b      	ldr	r2, [pc, #364]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d015      	beq.n	8004efa <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fe fc5d 	bl	800378c <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fe fc59 	bl	800378c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e092      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eec:	4b4c      	ldr	r3, [pc, #304]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ee      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x332>
 8004ef8:	e014      	b.n	8004f24 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efa:	f7fe fc47 	bl	800378c <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fe fc43 	bl	800378c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e07c      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f18:	4b41      	ldr	r3, [pc, #260]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ee      	bne.n	8004f02 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	4a3c      	ldr	r2, [pc, #240]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d068      	beq.n	8005010 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3e:	4b38      	ldr	r3, [pc, #224]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d060      	beq.n	800500c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d145      	bne.n	8004fde <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b34      	ldr	r3, [pc, #208]	; (8005024 <HAL_RCC_OscConfig+0x480>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fe fc18 	bl	800378c <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fc14 	bl	800378c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e04f      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	071b      	lsls	r3, r3, #28
 8004faa:	491d      	ldr	r1, [pc, #116]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <HAL_RCC_OscConfig+0x480>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fe fbe9 	bl	800378c <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fe fbe5 	bl	800378c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e020      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd0:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x41a>
 8004fdc:	e018      	b.n	8005010 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HAL_RCC_OscConfig+0x480>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fbd2 	bl	800378c <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fe fbce 	bl	800378c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e009      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_RCC_OscConfig+0x47c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x448>
 800500a:	e001      	b.n	8005010 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40007000 	.word	0x40007000
 8005020:	40023800 	.word	0x40023800
 8005024:	42470060 	.word	0x42470060

08005028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e01d      	b.n	8005076 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fd fa3c 	bl	80024cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fb4e 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e01d      	b.n	8005114 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f815 	bl	800511c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f000 faff 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fdca 	bl	8005cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <HAL_TIM_PWM_Start+0x74>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_TIM_PWM_Start+0x2c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <HAL_TIM_PWM_Start+0x78>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d101      	bne.n	8005160 <HAL_TIM_PWM_Start+0x30>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_TIM_PWM_Start+0x32>
 8005160:	2300      	movs	r3, #0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d007      	beq.n	8005198 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d122      	bne.n	8005208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d11b      	bne.n	8005208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0202 	mvn.w	r2, #2
 80051d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa6b 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 80051f4:	e005      	b.n	8005202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa5d 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fa6e 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b04      	cmp	r3, #4
 8005214:	d122      	bne.n	800525c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d11b      	bne.n	800525c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0204 	mvn.w	r2, #4
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa41 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa33 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fa44 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0308 	and.w	r3, r3, #8
 8005266:	2b08      	cmp	r3, #8
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b08      	cmp	r3, #8
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0208 	mvn.w	r2, #8
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2204      	movs	r2, #4
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa17 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa09 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa1a 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0210 	mvn.w	r2, #16
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2208      	movs	r2, #8
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9ed 	bl	80056ca <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9df 	bl	80056b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f9f0 	bl	80056de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10e      	bne.n	8005330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d107      	bne.n	8005330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0201 	mvn.w	r2, #1
 8005328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fe f868 	bl	8003400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b80      	cmp	r3, #128	; 0x80
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fdbe 	bl	8005ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9b5 	bl	80056f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0220 	mvn.w	r2, #32
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fd88 	bl	8005ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0b4      	b.n	8005540 <HAL_TIM_PWM_ConfigChannel+0x184>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	f200 809f 	bhi.w	800552c <HAL_TIM_PWM_ConfigChannel+0x170>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005429 	.word	0x08005429
 80053f8:	0800552d 	.word	0x0800552d
 80053fc:	0800552d 	.word	0x0800552d
 8005400:	0800552d 	.word	0x0800552d
 8005404:	08005469 	.word	0x08005469
 8005408:	0800552d 	.word	0x0800552d
 800540c:	0800552d 	.word	0x0800552d
 8005410:	0800552d 	.word	0x0800552d
 8005414:	080054ab 	.word	0x080054ab
 8005418:	0800552d 	.word	0x0800552d
 800541c:	0800552d 	.word	0x0800552d
 8005420:	0800552d 	.word	0x0800552d
 8005424:	080054eb 	.word	0x080054eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fa0a 	bl	8005848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0208 	orr.w	r2, r2, #8
 8005442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0204 	bic.w	r2, r2, #4
 8005452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6999      	ldr	r1, [r3, #24]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	619a      	str	r2, [r3, #24]
      break;
 8005466:	e062      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fa5a 	bl	8005928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6999      	ldr	r1, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	619a      	str	r2, [r3, #24]
      break;
 80054a8:	e041      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 faaf 	bl	8005a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0208 	orr.w	r2, r2, #8
 80054c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0204 	bic.w	r2, r2, #4
 80054d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69d9      	ldr	r1, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	61da      	str	r2, [r3, #28]
      break;
 80054e8:	e021      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fb03 	bl	8005afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	021a      	lsls	r2, r3, #8
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	61da      	str	r2, [r3, #28]
      break;
 800552a:	e000      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800552c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIM_ConfigClockSource+0x18>
 800555c:	2302      	movs	r3, #2
 800555e:	e0a6      	b.n	80056ae <HAL_TIM_ConfigClockSource+0x166>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800557e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d067      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0x120>
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d80b      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x6c>
 800559c:	2b10      	cmp	r3, #16
 800559e:	d073      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0x140>
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d802      	bhi.n	80055aa <HAL_TIM_ConfigClockSource+0x62>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d06f      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055a8:	e078      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d06c      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0x140>
 80055ae:	2b30      	cmp	r3, #48	; 0x30
 80055b0:	d06a      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80055b2:	e073      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055b4:	2b70      	cmp	r3, #112	; 0x70
 80055b6:	d00d      	beq.n	80055d4 <HAL_TIM_ConfigClockSource+0x8c>
 80055b8:	2b70      	cmp	r3, #112	; 0x70
 80055ba:	d804      	bhi.n	80055c6 <HAL_TIM_ConfigClockSource+0x7e>
 80055bc:	2b50      	cmp	r3, #80	; 0x50
 80055be:	d033      	beq.n	8005628 <HAL_TIM_ConfigClockSource+0xe0>
 80055c0:	2b60      	cmp	r3, #96	; 0x60
 80055c2:	d041      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055c4:	e06a      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d066      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x152>
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d0:	d017      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055d2:	e063      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	6899      	ldr	r1, [r3, #8]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f000 fb5a 	bl	8005c9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
      break;
 8005600:	e04c      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f000 fb43 	bl	8005c9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005624:	609a      	str	r2, [r3, #8]
      break;
 8005626:	e039      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6818      	ldr	r0, [r3, #0]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	461a      	mov	r2, r3
 8005636:	f000 fab7 	bl	8005ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2150      	movs	r1, #80	; 0x50
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fb10 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 8005646:	e029      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	461a      	mov	r2, r3
 8005656:	f000 fad6 	bl	8005c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2160      	movs	r1, #96	; 0x60
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fb00 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 8005666:	e019      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	461a      	mov	r2, r3
 8005676:	f000 fa97 	bl	8005ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2140      	movs	r1, #64	; 0x40
 8005680:	4618      	mov	r0, r3
 8005682:	f000 faf0 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 8005686:	e009      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fae7 	bl	8005c66 <TIM_ITRx_SetConfig>
      break;
 8005698:	e000      	b.n	800569c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800569a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a40      	ldr	r2, [pc, #256]	; (800581c <TIM_Base_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d013      	beq.n	8005748 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d00f      	beq.n	8005748 <TIM_Base_SetConfig+0x40>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a3d      	ldr	r2, [pc, #244]	; (8005820 <TIM_Base_SetConfig+0x118>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00b      	beq.n	8005748 <TIM_Base_SetConfig+0x40>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a3c      	ldr	r2, [pc, #240]	; (8005824 <TIM_Base_SetConfig+0x11c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <TIM_Base_SetConfig+0x40>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a3b      	ldr	r2, [pc, #236]	; (8005828 <TIM_Base_SetConfig+0x120>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_Base_SetConfig+0x40>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a3a      	ldr	r2, [pc, #232]	; (800582c <TIM_Base_SetConfig+0x124>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d108      	bne.n	800575a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2f      	ldr	r2, [pc, #188]	; (800581c <TIM_Base_SetConfig+0x114>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d02b      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d027      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <TIM_Base_SetConfig+0x118>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d023      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a2b      	ldr	r2, [pc, #172]	; (8005824 <TIM_Base_SetConfig+0x11c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01f      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <TIM_Base_SetConfig+0x120>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01b      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a29      	ldr	r2, [pc, #164]	; (800582c <TIM_Base_SetConfig+0x124>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d017      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a28      	ldr	r2, [pc, #160]	; (8005830 <TIM_Base_SetConfig+0x128>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a27      	ldr	r2, [pc, #156]	; (8005834 <TIM_Base_SetConfig+0x12c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00f      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a26      	ldr	r2, [pc, #152]	; (8005838 <TIM_Base_SetConfig+0x130>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00b      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a25      	ldr	r2, [pc, #148]	; (800583c <TIM_Base_SetConfig+0x134>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a24      	ldr	r2, [pc, #144]	; (8005840 <TIM_Base_SetConfig+0x138>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a23      	ldr	r2, [pc, #140]	; (8005844 <TIM_Base_SetConfig+0x13c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d108      	bne.n	80057cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <TIM_Base_SetConfig+0x114>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_Base_SetConfig+0xf8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a0c      	ldr	r2, [pc, #48]	; (800582c <TIM_Base_SetConfig+0x124>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d103      	bne.n	8005808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	615a      	str	r2, [r3, #20]
}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40010400 	.word	0x40010400
 8005830:	40014000 	.word	0x40014000
 8005834:	40014400 	.word	0x40014400
 8005838:	40014800 	.word	0x40014800
 800583c:	40001800 	.word	0x40001800
 8005840:	40001c00 	.word	0x40001c00
 8005844:	40002000 	.word	0x40002000

08005848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0201 	bic.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 0302 	bic.w	r3, r3, #2
 8005890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a20      	ldr	r2, [pc, #128]	; (8005920 <TIM_OC1_SetConfig+0xd8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC1_SetConfig+0x64>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <TIM_OC1_SetConfig+0xdc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10c      	bne.n	80058c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0308 	bic.w	r3, r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a15      	ldr	r2, [pc, #84]	; (8005920 <TIM_OC1_SetConfig+0xd8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC1_SetConfig+0x8e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a14      	ldr	r2, [pc, #80]	; (8005924 <TIM_OC1_SetConfig+0xdc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d111      	bne.n	80058fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40010000 	.word	0x40010000
 8005924:	40010400 	.word	0x40010400

08005928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0210 	bic.w	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0320 	bic.w	r3, r3, #32
 8005972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <TIM_OC2_SetConfig+0xe4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_OC2_SetConfig+0x68>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <TIM_OC2_SetConfig+0xe8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10d      	bne.n	80059ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <TIM_OC2_SetConfig+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x94>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d113      	bne.n	80059e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400

08005a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <TIM_OC3_SetConfig+0xe0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_OC3_SetConfig+0x66>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <TIM_OC3_SetConfig+0xe4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10d      	bne.n	8005a96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <TIM_OC3_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x92>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d113      	bne.n	8005ace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40010400 	.word	0x40010400

08005afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	031b      	lsls	r3, r3, #12
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <TIM_OC4_SetConfig+0xa4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_OC4_SetConfig+0x68>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <TIM_OC4_SetConfig+0xa8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d109      	bne.n	8005b78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	019b      	lsls	r3, r3, #6
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40010400 	.word	0x40010400

08005ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f023 030a 	bic.w	r3, r3, #10
 8005be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b087      	sub	sp, #28
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	031b      	lsls	r3, r3, #12
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	621a      	str	r2, [r3, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f043 0307 	orr.w	r3, r3, #7
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	021a      	lsls	r2, r3, #8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2201      	movs	r2, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e05a      	b.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d01d      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10c      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40010400 	.word	0x40010400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40001800 	.word	0x40001800

08005e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e03d      	b.n	8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e03f      	b.n	8005f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc fb36 	bl	8002584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2224      	movs	r2, #36	; 0x24
 8005f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fb97 	bl	8006664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b088      	sub	sp, #32
 8005f8a:	af02      	add	r7, sp, #8
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	f040 8083 	bne.w	80060ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_UART_Transmit+0x2e>
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e07b      	b.n	80060b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Transmit+0x40>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e074      	b.n	80060b0 <HAL_UART_Transmit+0x12a>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2221      	movs	r2, #33	; 0x21
 8005fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005fdc:	f7fd fbd6 	bl	800378c <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ff6:	e042      	b.n	800607e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d122      	bne.n	8006056 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f9b6 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e042      	b.n	80060b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800603c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	3302      	adds	r3, #2
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	e017      	b.n	800607e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3301      	adds	r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	e013      	b.n	800607e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	2180      	movs	r1, #128	; 0x80
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f993 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e01f      	b.n	80060b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	60ba      	str	r2, [r7, #8]
 8006076:	781a      	ldrb	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1b7      	bne.n	8005ff8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f97a 	bl	800638c <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e006      	b.n	80060b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d140      	bne.n	8006154 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_UART_Receive_IT+0x26>
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e039      	b.n	8006156 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_UART_Receive_IT+0x38>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e032      	b.n	8006156 <HAL_UART_Receive_IT+0x9e>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2222      	movs	r2, #34	; 0x22
 8006114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0220 	orr.w	r2, r2, #32
 800614e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	e000      	b.n	8006156 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006154:	2302      	movs	r3, #2
  }
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_UART_IRQHandler+0x52>
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f9d6 	bl	8006560 <UART_Receive_IT>
      return;
 80061b4:	e0d1      	b.n	800635a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80b0 	beq.w	800631e <HAL_UART_IRQHandler+0x1ba>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_UART_IRQHandler+0x70>
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80a5 	beq.w	800631e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_UART_IRQHandler+0x90>
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	f043 0201 	orr.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_UART_IRQHandler+0xb0>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	f043 0202 	orr.w	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_UART_IRQHandler+0xd0>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	f043 0204 	orr.w	r2, r3, #4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00f      	beq.n	800625e <HAL_UART_IRQHandler+0xfa>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_UART_IRQHandler+0xee>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d078      	beq.n	8006358 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_UART_IRQHandler+0x11c>
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f970 	bl	8006560 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <HAL_UART_IRQHandler+0x144>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d031      	beq.n	800630c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f8b9 	bl	8006420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d123      	bne.n	8006304 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	4a21      	ldr	r2, [pc, #132]	; (8006360 <HAL_UART_IRQHandler+0x1fc>)
 80062da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fd fe06 	bl	8003ef2 <HAL_DMA_Abort_IT>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062f6:	4610      	mov	r0, r2
 80062f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fa:	e00e      	b.n	800631a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f83b 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006302:	e00a      	b.n	800631a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f837 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630a:	e006      	b.n	800631a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f833 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006318:	e01e      	b.n	8006358 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631a:	bf00      	nop
    return;
 800631c:	e01c      	b.n	8006358 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8a6 	bl	8006484 <UART_Transmit_IT>
    return;
 8006338:	e00f      	b.n	800635a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_UART_IRQHandler+0x1f6>
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8ee 	bl	8006530 <UART_EndTransmit_IT>
    return;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006358:	bf00      	nop
  }
}
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	0800645d 	.word	0x0800645d

08006364 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639c:	e02c      	b.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a4:	d028      	beq.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <UART_WaitOnFlagUntilTimeout+0x30>
 80063ac:	f7fd f9ee 	bl	800378c <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d21d      	bcs.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695a      	ldr	r2, [r3, #20]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 0201 	bic.w	r2, r2, #1
 80063da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e00f      	b.n	8006418 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	429a      	cmp	r2, r3
 8006414:	d0c3      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006436:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff ff7e 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b21      	cmp	r3, #33	; 0x21
 8006496:	d144      	bne.n	8006522 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a0:	d11a      	bne.n	80064d8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]
 80064ca:	e00e      	b.n	80064ea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	621a      	str	r2, [r3, #32]
 80064d6:	e008      	b.n	80064ea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6211      	str	r1, [r2, #32]
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	4619      	mov	r1, r3
 80064f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10f      	bne.n	800651e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800650c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800651c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e000      	b.n	8006524 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
  }
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006546:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff07 	bl	8006364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b22      	cmp	r3, #34	; 0x22
 8006572:	d171      	bne.n	8006658 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d123      	bne.n	80065c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10e      	bne.n	80065aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	1c9a      	adds	r2, r3, #2
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
 80065a8:	e029      	b.n	80065fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28
 80065c4:	e01b      	b.n	80065fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6858      	ldr	r0, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	1c59      	adds	r1, r3, #1
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6291      	str	r1, [r2, #40]	; 0x28
 80065de:	b2c2      	uxtb	r2, r0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e00c      	b.n	80065fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	1c58      	adds	r0, r3, #1
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	6288      	str	r0, [r1, #40]	; 0x28
 80065f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29b      	uxth	r3, r3
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4619      	mov	r1, r3
 800660c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800660e:	2b00      	cmp	r3, #0
 8006610:	d120      	bne.n	8006654 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0220 	bic.w	r2, r2, #32
 8006620:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006630:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695a      	ldr	r2, [r3, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fb fb28 	bl	8001ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e002      	b.n	800665a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e000      	b.n	800665a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066a6:	f023 030c 	bic.w	r3, r3, #12
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6812      	ldr	r2, [r2, #0]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	430b      	orrs	r3, r1
 80066b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d2:	f040 8199 	bne.w	8006a08 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4ac6      	ldr	r2, [pc, #792]	; (80069f4 <UART_SetConfig+0x390>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00f      	beq.n	8006700 <UART_SetConfig+0x9c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4ac4      	ldr	r2, [pc, #784]	; (80069f8 <UART_SetConfig+0x394>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00a      	beq.n	8006700 <UART_SetConfig+0x9c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4ac3      	ldr	r2, [pc, #780]	; (80069fc <UART_SetConfig+0x398>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d005      	beq.n	8006700 <UART_SetConfig+0x9c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4ac1      	ldr	r2, [pc, #772]	; (8006a00 <UART_SetConfig+0x39c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	f040 80bd 	bne.w	800687a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006700:	f7fe fa3c 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 8006704:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	461d      	mov	r5, r3
 800670a:	f04f 0600 	mov.w	r6, #0
 800670e:	46a8      	mov	r8, r5
 8006710:	46b1      	mov	r9, r6
 8006712:	eb18 0308 	adds.w	r3, r8, r8
 8006716:	eb49 0409 	adc.w	r4, r9, r9
 800671a:	4698      	mov	r8, r3
 800671c:	46a1      	mov	r9, r4
 800671e:	eb18 0805 	adds.w	r8, r8, r5
 8006722:	eb49 0906 	adc.w	r9, r9, r6
 8006726:	f04f 0100 	mov.w	r1, #0
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006732:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006736:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800673a:	4688      	mov	r8, r1
 800673c:	4691      	mov	r9, r2
 800673e:	eb18 0005 	adds.w	r0, r8, r5
 8006742:	eb49 0106 	adc.w	r1, r9, r6
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	461d      	mov	r5, r3
 800674c:	f04f 0600 	mov.w	r6, #0
 8006750:	196b      	adds	r3, r5, r5
 8006752:	eb46 0406 	adc.w	r4, r6, r6
 8006756:	461a      	mov	r2, r3
 8006758:	4623      	mov	r3, r4
 800675a:	f7fa fa6d 	bl	8000c38 <__aeabi_uldivmod>
 800675e:	4603      	mov	r3, r0
 8006760:	460c      	mov	r4, r1
 8006762:	461a      	mov	r2, r3
 8006764:	4ba7      	ldr	r3, [pc, #668]	; (8006a04 <UART_SetConfig+0x3a0>)
 8006766:	fba3 2302 	umull	r2, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	461d      	mov	r5, r3
 8006774:	f04f 0600 	mov.w	r6, #0
 8006778:	46a9      	mov	r9, r5
 800677a:	46b2      	mov	sl, r6
 800677c:	eb19 0309 	adds.w	r3, r9, r9
 8006780:	eb4a 040a 	adc.w	r4, sl, sl
 8006784:	4699      	mov	r9, r3
 8006786:	46a2      	mov	sl, r4
 8006788:	eb19 0905 	adds.w	r9, r9, r5
 800678c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006790:	f04f 0100 	mov.w	r1, #0
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a4:	4689      	mov	r9, r1
 80067a6:	4692      	mov	sl, r2
 80067a8:	eb19 0005 	adds.w	r0, r9, r5
 80067ac:	eb4a 0106 	adc.w	r1, sl, r6
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	461d      	mov	r5, r3
 80067b6:	f04f 0600 	mov.w	r6, #0
 80067ba:	196b      	adds	r3, r5, r5
 80067bc:	eb46 0406 	adc.w	r4, r6, r6
 80067c0:	461a      	mov	r2, r3
 80067c2:	4623      	mov	r3, r4
 80067c4:	f7fa fa38 	bl	8000c38 <__aeabi_uldivmod>
 80067c8:	4603      	mov	r3, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	461a      	mov	r2, r3
 80067ce:	4b8d      	ldr	r3, [pc, #564]	; (8006a04 <UART_SetConfig+0x3a0>)
 80067d0:	fba3 1302 	umull	r1, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	2164      	movs	r1, #100	; 0x64
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	3332      	adds	r3, #50	; 0x32
 80067e2:	4a88      	ldr	r2, [pc, #544]	; (8006a04 <UART_SetConfig+0x3a0>)
 80067e4:	fba2 2303 	umull	r2, r3, r2, r3
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067f0:	4498      	add	r8, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	461d      	mov	r5, r3
 80067f6:	f04f 0600 	mov.w	r6, #0
 80067fa:	46a9      	mov	r9, r5
 80067fc:	46b2      	mov	sl, r6
 80067fe:	eb19 0309 	adds.w	r3, r9, r9
 8006802:	eb4a 040a 	adc.w	r4, sl, sl
 8006806:	4699      	mov	r9, r3
 8006808:	46a2      	mov	sl, r4
 800680a:	eb19 0905 	adds.w	r9, r9, r5
 800680e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800681e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006822:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006826:	4689      	mov	r9, r1
 8006828:	4692      	mov	sl, r2
 800682a:	eb19 0005 	adds.w	r0, r9, r5
 800682e:	eb4a 0106 	adc.w	r1, sl, r6
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	461d      	mov	r5, r3
 8006838:	f04f 0600 	mov.w	r6, #0
 800683c:	196b      	adds	r3, r5, r5
 800683e:	eb46 0406 	adc.w	r4, r6, r6
 8006842:	461a      	mov	r2, r3
 8006844:	4623      	mov	r3, r4
 8006846:	f7fa f9f7 	bl	8000c38 <__aeabi_uldivmod>
 800684a:	4603      	mov	r3, r0
 800684c:	460c      	mov	r4, r1
 800684e:	461a      	mov	r2, r3
 8006850:	4b6c      	ldr	r3, [pc, #432]	; (8006a04 <UART_SetConfig+0x3a0>)
 8006852:	fba3 1302 	umull	r1, r3, r3, r2
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2164      	movs	r1, #100	; 0x64
 800685a:	fb01 f303 	mul.w	r3, r1, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	3332      	adds	r3, #50	; 0x32
 8006864:	4a67      	ldr	r2, [pc, #412]	; (8006a04 <UART_SetConfig+0x3a0>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	f003 0207 	and.w	r2, r3, #7
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4442      	add	r2, r8
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	e27d      	b.n	8006d76 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800687a:	f7fe f96b 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 800687e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	461d      	mov	r5, r3
 8006884:	f04f 0600 	mov.w	r6, #0
 8006888:	46a8      	mov	r8, r5
 800688a:	46b1      	mov	r9, r6
 800688c:	eb18 0308 	adds.w	r3, r8, r8
 8006890:	eb49 0409 	adc.w	r4, r9, r9
 8006894:	4698      	mov	r8, r3
 8006896:	46a1      	mov	r9, r4
 8006898:	eb18 0805 	adds.w	r8, r8, r5
 800689c:	eb49 0906 	adc.w	r9, r9, r6
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068b4:	4688      	mov	r8, r1
 80068b6:	4691      	mov	r9, r2
 80068b8:	eb18 0005 	adds.w	r0, r8, r5
 80068bc:	eb49 0106 	adc.w	r1, r9, r6
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	461d      	mov	r5, r3
 80068c6:	f04f 0600 	mov.w	r6, #0
 80068ca:	196b      	adds	r3, r5, r5
 80068cc:	eb46 0406 	adc.w	r4, r6, r6
 80068d0:	461a      	mov	r2, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	f7fa f9b0 	bl	8000c38 <__aeabi_uldivmod>
 80068d8:	4603      	mov	r3, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	461a      	mov	r2, r3
 80068de:	4b49      	ldr	r3, [pc, #292]	; (8006a04 <UART_SetConfig+0x3a0>)
 80068e0:	fba3 2302 	umull	r2, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	461d      	mov	r5, r3
 80068ee:	f04f 0600 	mov.w	r6, #0
 80068f2:	46a9      	mov	r9, r5
 80068f4:	46b2      	mov	sl, r6
 80068f6:	eb19 0309 	adds.w	r3, r9, r9
 80068fa:	eb4a 040a 	adc.w	r4, sl, sl
 80068fe:	4699      	mov	r9, r3
 8006900:	46a2      	mov	sl, r4
 8006902:	eb19 0905 	adds.w	r9, r9, r5
 8006906:	eb4a 0a06 	adc.w	sl, sl, r6
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800691a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800691e:	4689      	mov	r9, r1
 8006920:	4692      	mov	sl, r2
 8006922:	eb19 0005 	adds.w	r0, r9, r5
 8006926:	eb4a 0106 	adc.w	r1, sl, r6
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	461d      	mov	r5, r3
 8006930:	f04f 0600 	mov.w	r6, #0
 8006934:	196b      	adds	r3, r5, r5
 8006936:	eb46 0406 	adc.w	r4, r6, r6
 800693a:	461a      	mov	r2, r3
 800693c:	4623      	mov	r3, r4
 800693e:	f7fa f97b 	bl	8000c38 <__aeabi_uldivmod>
 8006942:	4603      	mov	r3, r0
 8006944:	460c      	mov	r4, r1
 8006946:	461a      	mov	r2, r3
 8006948:	4b2e      	ldr	r3, [pc, #184]	; (8006a04 <UART_SetConfig+0x3a0>)
 800694a:	fba3 1302 	umull	r1, r3, r3, r2
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2164      	movs	r1, #100	; 0x64
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	3332      	adds	r3, #50	; 0x32
 800695c:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <UART_SetConfig+0x3a0>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800696a:	4498      	add	r8, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	461d      	mov	r5, r3
 8006970:	f04f 0600 	mov.w	r6, #0
 8006974:	46a9      	mov	r9, r5
 8006976:	46b2      	mov	sl, r6
 8006978:	eb19 0309 	adds.w	r3, r9, r9
 800697c:	eb4a 040a 	adc.w	r4, sl, sl
 8006980:	4699      	mov	r9, r3
 8006982:	46a2      	mov	sl, r4
 8006984:	eb19 0905 	adds.w	r9, r9, r5
 8006988:	eb4a 0a06 	adc.w	sl, sl, r6
 800698c:	f04f 0100 	mov.w	r1, #0
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006998:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800699c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069a0:	4689      	mov	r9, r1
 80069a2:	4692      	mov	sl, r2
 80069a4:	eb19 0005 	adds.w	r0, r9, r5
 80069a8:	eb4a 0106 	adc.w	r1, sl, r6
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	461d      	mov	r5, r3
 80069b2:	f04f 0600 	mov.w	r6, #0
 80069b6:	196b      	adds	r3, r5, r5
 80069b8:	eb46 0406 	adc.w	r4, r6, r6
 80069bc:	461a      	mov	r2, r3
 80069be:	4623      	mov	r3, r4
 80069c0:	f7fa f93a 	bl	8000c38 <__aeabi_uldivmod>
 80069c4:	4603      	mov	r3, r0
 80069c6:	460c      	mov	r4, r1
 80069c8:	461a      	mov	r2, r3
 80069ca:	4b0e      	ldr	r3, [pc, #56]	; (8006a04 <UART_SetConfig+0x3a0>)
 80069cc:	fba3 1302 	umull	r1, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	2164      	movs	r1, #100	; 0x64
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	3332      	adds	r3, #50	; 0x32
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <UART_SetConfig+0x3a0>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	f003 0207 	and.w	r2, r3, #7
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4442      	add	r2, r8
 80069f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069f2:	e1c0      	b.n	8006d76 <UART_SetConfig+0x712>
 80069f4:	40011000 	.word	0x40011000
 80069f8:	40011400 	.word	0x40011400
 80069fc:	40011800 	.word	0x40011800
 8006a00:	40011c00 	.word	0x40011c00
 8006a04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4adc      	ldr	r2, [pc, #880]	; (8006d80 <UART_SetConfig+0x71c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <UART_SetConfig+0x3ce>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4adb      	ldr	r2, [pc, #876]	; (8006d84 <UART_SetConfig+0x720>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00a      	beq.n	8006a32 <UART_SetConfig+0x3ce>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4ad9      	ldr	r2, [pc, #868]	; (8006d88 <UART_SetConfig+0x724>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d005      	beq.n	8006a32 <UART_SetConfig+0x3ce>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4ad8      	ldr	r2, [pc, #864]	; (8006d8c <UART_SetConfig+0x728>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	f040 80d1 	bne.w	8006bd4 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a32:	f7fe f8a3 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 8006a36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	469a      	mov	sl, r3
 8006a3c:	f04f 0b00 	mov.w	fp, #0
 8006a40:	46d0      	mov	r8, sl
 8006a42:	46d9      	mov	r9, fp
 8006a44:	eb18 0308 	adds.w	r3, r8, r8
 8006a48:	eb49 0409 	adc.w	r4, r9, r9
 8006a4c:	4698      	mov	r8, r3
 8006a4e:	46a1      	mov	r9, r4
 8006a50:	eb18 080a 	adds.w	r8, r8, sl
 8006a54:	eb49 090b 	adc.w	r9, r9, fp
 8006a58:	f04f 0100 	mov.w	r1, #0
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a6c:	4688      	mov	r8, r1
 8006a6e:	4691      	mov	r9, r2
 8006a70:	eb1a 0508 	adds.w	r5, sl, r8
 8006a74:	eb4b 0609 	adc.w	r6, fp, r9
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	f04f 0400 	mov.w	r4, #0
 8006a8a:	0094      	lsls	r4, r2, #2
 8006a8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a90:	008b      	lsls	r3, r1, #2
 8006a92:	461a      	mov	r2, r3
 8006a94:	4623      	mov	r3, r4
 8006a96:	4628      	mov	r0, r5
 8006a98:	4631      	mov	r1, r6
 8006a9a:	f7fa f8cd 	bl	8000c38 <__aeabi_uldivmod>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	4bba      	ldr	r3, [pc, #744]	; (8006d90 <UART_SetConfig+0x72c>)
 8006aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	469b      	mov	fp, r3
 8006ab4:	f04f 0c00 	mov.w	ip, #0
 8006ab8:	46d9      	mov	r9, fp
 8006aba:	46e2      	mov	sl, ip
 8006abc:	eb19 0309 	adds.w	r3, r9, r9
 8006ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	46a2      	mov	sl, r4
 8006ac8:	eb19 090b 	adds.w	r9, r9, fp
 8006acc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ad0:	f04f 0100 	mov.w	r1, #0
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	4692      	mov	sl, r2
 8006ae8:	eb1b 0509 	adds.w	r5, fp, r9
 8006aec:	eb4c 060a 	adc.w	r6, ip, sl
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4619      	mov	r1, r3
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	f04f 0400 	mov.w	r4, #0
 8006b02:	0094      	lsls	r4, r2, #2
 8006b04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b08:	008b      	lsls	r3, r1, #2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	4631      	mov	r1, r6
 8006b12:	f7fa f891 	bl	8000c38 <__aeabi_uldivmod>
 8006b16:	4603      	mov	r3, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4b9c      	ldr	r3, [pc, #624]	; (8006d90 <UART_SetConfig+0x72c>)
 8006b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	2164      	movs	r1, #100	; 0x64
 8006b26:	fb01 f303 	mul.w	r3, r1, r3
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	3332      	adds	r3, #50	; 0x32
 8006b30:	4a97      	ldr	r2, [pc, #604]	; (8006d90 <UART_SetConfig+0x72c>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b3c:	4498      	add	r8, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	469b      	mov	fp, r3
 8006b42:	f04f 0c00 	mov.w	ip, #0
 8006b46:	46d9      	mov	r9, fp
 8006b48:	46e2      	mov	sl, ip
 8006b4a:	eb19 0309 	adds.w	r3, r9, r9
 8006b4e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b52:	4699      	mov	r9, r3
 8006b54:	46a2      	mov	sl, r4
 8006b56:	eb19 090b 	adds.w	r9, r9, fp
 8006b5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b5e:	f04f 0100 	mov.w	r1, #0
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b72:	4689      	mov	r9, r1
 8006b74:	4692      	mov	sl, r2
 8006b76:	eb1b 0509 	adds.w	r5, fp, r9
 8006b7a:	eb4c 060a 	adc.w	r6, ip, sl
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	4619      	mov	r1, r3
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	f04f 0400 	mov.w	r4, #0
 8006b90:	0094      	lsls	r4, r2, #2
 8006b92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b96:	008b      	lsls	r3, r1, #2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	f7fa f84a 	bl	8000c38 <__aeabi_uldivmod>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4b79      	ldr	r3, [pc, #484]	; (8006d90 <UART_SetConfig+0x72c>)
 8006bac:	fba3 1302 	umull	r1, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	2164      	movs	r1, #100	; 0x64
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	3332      	adds	r3, #50	; 0x32
 8006bbe:	4a74      	ldr	r2, [pc, #464]	; (8006d90 <UART_SetConfig+0x72c>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	f003 020f 	and.w	r2, r3, #15
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4442      	add	r2, r8
 8006bd0:	609a      	str	r2, [r3, #8]
 8006bd2:	e0d0      	b.n	8006d76 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7fd ffbe 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8006bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	469a      	mov	sl, r3
 8006bde:	f04f 0b00 	mov.w	fp, #0
 8006be2:	46d0      	mov	r8, sl
 8006be4:	46d9      	mov	r9, fp
 8006be6:	eb18 0308 	adds.w	r3, r8, r8
 8006bea:	eb49 0409 	adc.w	r4, r9, r9
 8006bee:	4698      	mov	r8, r3
 8006bf0:	46a1      	mov	r9, r4
 8006bf2:	eb18 080a 	adds.w	r8, r8, sl
 8006bf6:	eb49 090b 	adc.w	r9, r9, fp
 8006bfa:	f04f 0100 	mov.w	r1, #0
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c0e:	4688      	mov	r8, r1
 8006c10:	4691      	mov	r9, r2
 8006c12:	eb1a 0508 	adds.w	r5, sl, r8
 8006c16:	eb4b 0609 	adc.w	r6, fp, r9
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	f04f 0400 	mov.w	r4, #0
 8006c2c:	0094      	lsls	r4, r2, #2
 8006c2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c32:	008b      	lsls	r3, r1, #2
 8006c34:	461a      	mov	r2, r3
 8006c36:	4623      	mov	r3, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	f7f9 fffc 	bl	8000c38 <__aeabi_uldivmod>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	461a      	mov	r2, r3
 8006c46:	4b52      	ldr	r3, [pc, #328]	; (8006d90 <UART_SetConfig+0x72c>)
 8006c48:	fba3 2302 	umull	r2, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	469b      	mov	fp, r3
 8006c56:	f04f 0c00 	mov.w	ip, #0
 8006c5a:	46d9      	mov	r9, fp
 8006c5c:	46e2      	mov	sl, ip
 8006c5e:	eb19 0309 	adds.w	r3, r9, r9
 8006c62:	eb4a 040a 	adc.w	r4, sl, sl
 8006c66:	4699      	mov	r9, r3
 8006c68:	46a2      	mov	sl, r4
 8006c6a:	eb19 090b 	adds.w	r9, r9, fp
 8006c6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c72:	f04f 0100 	mov.w	r1, #0
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c86:	4689      	mov	r9, r1
 8006c88:	4692      	mov	sl, r2
 8006c8a:	eb1b 0509 	adds.w	r5, fp, r9
 8006c8e:	eb4c 060a 	adc.w	r6, ip, sl
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4619      	mov	r1, r3
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	f04f 0400 	mov.w	r4, #0
 8006ca4:	0094      	lsls	r4, r2, #2
 8006ca6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006caa:	008b      	lsls	r3, r1, #2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4623      	mov	r3, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	f7f9 ffc0 	bl	8000c38 <__aeabi_uldivmod>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <UART_SetConfig+0x72c>)
 8006cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	2164      	movs	r1, #100	; 0x64
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	3332      	adds	r3, #50	; 0x32
 8006cd2:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <UART_SetConfig+0x72c>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cde:	4498      	add	r8, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	469b      	mov	fp, r3
 8006ce4:	f04f 0c00 	mov.w	ip, #0
 8006ce8:	46d9      	mov	r9, fp
 8006cea:	46e2      	mov	sl, ip
 8006cec:	eb19 0309 	adds.w	r3, r9, r9
 8006cf0:	eb4a 040a 	adc.w	r4, sl, sl
 8006cf4:	4699      	mov	r9, r3
 8006cf6:	46a2      	mov	sl, r4
 8006cf8:	eb19 090b 	adds.w	r9, r9, fp
 8006cfc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d00:	f04f 0100 	mov.w	r1, #0
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d14:	4689      	mov	r9, r1
 8006d16:	4692      	mov	sl, r2
 8006d18:	eb1b 0509 	adds.w	r5, fp, r9
 8006d1c:	eb4c 060a 	adc.w	r6, ip, sl
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4619      	mov	r1, r3
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	f04f 0400 	mov.w	r4, #0
 8006d32:	0094      	lsls	r4, r2, #2
 8006d34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d38:	008b      	lsls	r3, r1, #2
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4631      	mov	r1, r6
 8006d42:	f7f9 ff79 	bl	8000c38 <__aeabi_uldivmod>
 8006d46:	4603      	mov	r3, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <UART_SetConfig+0x72c>)
 8006d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	2164      	movs	r1, #100	; 0x64
 8006d56:	fb01 f303 	mul.w	r3, r1, r3
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	3332      	adds	r3, #50	; 0x32
 8006d60:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <UART_SetConfig+0x72c>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	f003 020f 	and.w	r2, r3, #15
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4442      	add	r2, r8
 8006d72:	609a      	str	r2, [r3, #8]
}
 8006d74:	e7ff      	b.n	8006d76 <UART_SetConfig+0x712>
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	40011000 	.word	0x40011000
 8006d84:	40011400 	.word	0x40011400
 8006d88:	40011800 	.word	0x40011800
 8006d8c:	40011c00 	.word	0x40011c00
 8006d90:	51eb851f 	.word	0x51eb851f

08006d94 <__errno>:
 8006d94:	4b01      	ldr	r3, [pc, #4]	; (8006d9c <__errno+0x8>)
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000060 	.word	0x20000060

08006da0 <__libc_init_array>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	4e0d      	ldr	r6, [pc, #52]	; (8006dd8 <__libc_init_array+0x38>)
 8006da4:	4c0d      	ldr	r4, [pc, #52]	; (8006ddc <__libc_init_array+0x3c>)
 8006da6:	1ba4      	subs	r4, r4, r6
 8006da8:	10a4      	asrs	r4, r4, #2
 8006daa:	2500      	movs	r5, #0
 8006dac:	42a5      	cmp	r5, r4
 8006dae:	d109      	bne.n	8006dc4 <__libc_init_array+0x24>
 8006db0:	4e0b      	ldr	r6, [pc, #44]	; (8006de0 <__libc_init_array+0x40>)
 8006db2:	4c0c      	ldr	r4, [pc, #48]	; (8006de4 <__libc_init_array+0x44>)
 8006db4:	f003 f8b2 	bl	8009f1c <_init>
 8006db8:	1ba4      	subs	r4, r4, r6
 8006dba:	10a4      	asrs	r4, r4, #2
 8006dbc:	2500      	movs	r5, #0
 8006dbe:	42a5      	cmp	r5, r4
 8006dc0:	d105      	bne.n	8006dce <__libc_init_array+0x2e>
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}
 8006dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc8:	4798      	blx	r3
 8006dca:	3501      	adds	r5, #1
 8006dcc:	e7ee      	b.n	8006dac <__libc_init_array+0xc>
 8006dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dd2:	4798      	blx	r3
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	e7f2      	b.n	8006dbe <__libc_init_array+0x1e>
 8006dd8:	0800a760 	.word	0x0800a760
 8006ddc:	0800a760 	.word	0x0800a760
 8006de0:	0800a760 	.word	0x0800a760
 8006de4:	0800a764 	.word	0x0800a764

08006de8 <memset>:
 8006de8:	4402      	add	r2, r0
 8006dea:	4603      	mov	r3, r0
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d100      	bne.n	8006df2 <memset+0xa>
 8006df0:	4770      	bx	lr
 8006df2:	f803 1b01 	strb.w	r1, [r3], #1
 8006df6:	e7f9      	b.n	8006dec <memset+0x4>

08006df8 <__cvt>:
 8006df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	ec55 4b10 	vmov	r4, r5, d0
 8006e00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006e02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	460e      	mov	r6, r1
 8006e0a:	4691      	mov	r9, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	bfb8      	it	lt
 8006e10:	4622      	movlt	r2, r4
 8006e12:	462b      	mov	r3, r5
 8006e14:	f027 0720 	bic.w	r7, r7, #32
 8006e18:	bfbb      	ittet	lt
 8006e1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e1e:	461d      	movlt	r5, r3
 8006e20:	2300      	movge	r3, #0
 8006e22:	232d      	movlt	r3, #45	; 0x2d
 8006e24:	bfb8      	it	lt
 8006e26:	4614      	movlt	r4, r2
 8006e28:	2f46      	cmp	r7, #70	; 0x46
 8006e2a:	700b      	strb	r3, [r1, #0]
 8006e2c:	d004      	beq.n	8006e38 <__cvt+0x40>
 8006e2e:	2f45      	cmp	r7, #69	; 0x45
 8006e30:	d100      	bne.n	8006e34 <__cvt+0x3c>
 8006e32:	3601      	adds	r6, #1
 8006e34:	2102      	movs	r1, #2
 8006e36:	e000      	b.n	8006e3a <__cvt+0x42>
 8006e38:	2103      	movs	r1, #3
 8006e3a:	ab03      	add	r3, sp, #12
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	ab02      	add	r3, sp, #8
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4632      	mov	r2, r6
 8006e44:	4653      	mov	r3, sl
 8006e46:	ec45 4b10 	vmov	d0, r4, r5
 8006e4a:	f000 fcdd 	bl	8007808 <_dtoa_r>
 8006e4e:	2f47      	cmp	r7, #71	; 0x47
 8006e50:	4680      	mov	r8, r0
 8006e52:	d102      	bne.n	8006e5a <__cvt+0x62>
 8006e54:	f019 0f01 	tst.w	r9, #1
 8006e58:	d026      	beq.n	8006ea8 <__cvt+0xb0>
 8006e5a:	2f46      	cmp	r7, #70	; 0x46
 8006e5c:	eb08 0906 	add.w	r9, r8, r6
 8006e60:	d111      	bne.n	8006e86 <__cvt+0x8e>
 8006e62:	f898 3000 	ldrb.w	r3, [r8]
 8006e66:	2b30      	cmp	r3, #48	; 0x30
 8006e68:	d10a      	bne.n	8006e80 <__cvt+0x88>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	f7f9 fe51 	bl	8000b18 <__aeabi_dcmpeq>
 8006e76:	b918      	cbnz	r0, 8006e80 <__cvt+0x88>
 8006e78:	f1c6 0601 	rsb	r6, r6, #1
 8006e7c:	f8ca 6000 	str.w	r6, [sl]
 8006e80:	f8da 3000 	ldr.w	r3, [sl]
 8006e84:	4499      	add	r9, r3
 8006e86:	2200      	movs	r2, #0
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f7f9 fe43 	bl	8000b18 <__aeabi_dcmpeq>
 8006e92:	b938      	cbnz	r0, 8006ea4 <__cvt+0xac>
 8006e94:	2230      	movs	r2, #48	; 0x30
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	454b      	cmp	r3, r9
 8006e9a:	d205      	bcs.n	8006ea8 <__cvt+0xb0>
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	9103      	str	r1, [sp, #12]
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e7f8      	b.n	8006e96 <__cvt+0x9e>
 8006ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eac:	eba3 0308 	sub.w	r3, r3, r8
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	b004      	add	sp, #16
 8006eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006eba <__exponent>:
 8006eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	bfba      	itte	lt
 8006ec2:	4249      	neglt	r1, r1
 8006ec4:	232d      	movlt	r3, #45	; 0x2d
 8006ec6:	232b      	movge	r3, #43	; 0x2b
 8006ec8:	2909      	cmp	r1, #9
 8006eca:	f804 2b02 	strb.w	r2, [r4], #2
 8006ece:	7043      	strb	r3, [r0, #1]
 8006ed0:	dd20      	ble.n	8006f14 <__exponent+0x5a>
 8006ed2:	f10d 0307 	add.w	r3, sp, #7
 8006ed6:	461f      	mov	r7, r3
 8006ed8:	260a      	movs	r6, #10
 8006eda:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ede:	fb06 1115 	mls	r1, r6, r5, r1
 8006ee2:	3130      	adds	r1, #48	; 0x30
 8006ee4:	2d09      	cmp	r5, #9
 8006ee6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eea:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006eee:	4629      	mov	r1, r5
 8006ef0:	dc09      	bgt.n	8006f06 <__exponent+0x4c>
 8006ef2:	3130      	adds	r1, #48	; 0x30
 8006ef4:	3b02      	subs	r3, #2
 8006ef6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006efa:	42bb      	cmp	r3, r7
 8006efc:	4622      	mov	r2, r4
 8006efe:	d304      	bcc.n	8006f0a <__exponent+0x50>
 8006f00:	1a10      	subs	r0, r2, r0
 8006f02:	b003      	add	sp, #12
 8006f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f06:	4613      	mov	r3, r2
 8006f08:	e7e7      	b.n	8006eda <__exponent+0x20>
 8006f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f0e:	f804 2b01 	strb.w	r2, [r4], #1
 8006f12:	e7f2      	b.n	8006efa <__exponent+0x40>
 8006f14:	2330      	movs	r3, #48	; 0x30
 8006f16:	4419      	add	r1, r3
 8006f18:	7083      	strb	r3, [r0, #2]
 8006f1a:	1d02      	adds	r2, r0, #4
 8006f1c:	70c1      	strb	r1, [r0, #3]
 8006f1e:	e7ef      	b.n	8006f00 <__exponent+0x46>

08006f20 <_printf_float>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	b08d      	sub	sp, #52	; 0x34
 8006f26:	460c      	mov	r4, r1
 8006f28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	461f      	mov	r7, r3
 8006f30:	4605      	mov	r5, r0
 8006f32:	f001 fa21 	bl	8008378 <_localeconv_r>
 8006f36:	6803      	ldr	r3, [r0, #0]
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7f9 f970 	bl	8000220 <strlen>
 8006f40:	2300      	movs	r3, #0
 8006f42:	930a      	str	r3, [sp, #40]	; 0x28
 8006f44:	f8d8 3000 	ldr.w	r3, [r8]
 8006f48:	9005      	str	r0, [sp, #20]
 8006f4a:	3307      	adds	r3, #7
 8006f4c:	f023 0307 	bic.w	r3, r3, #7
 8006f50:	f103 0208 	add.w	r2, r3, #8
 8006f54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f58:	f8d4 b000 	ldr.w	fp, [r4]
 8006f5c:	f8c8 2000 	str.w	r2, [r8]
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f70:	9307      	str	r3, [sp, #28]
 8006f72:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7a:	4ba7      	ldr	r3, [pc, #668]	; (8007218 <_printf_float+0x2f8>)
 8006f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f80:	f7f9 fdfc 	bl	8000b7c <__aeabi_dcmpun>
 8006f84:	bb70      	cbnz	r0, 8006fe4 <_printf_float+0xc4>
 8006f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f8a:	4ba3      	ldr	r3, [pc, #652]	; (8007218 <_printf_float+0x2f8>)
 8006f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f90:	f7f9 fdd6 	bl	8000b40 <__aeabi_dcmple>
 8006f94:	bb30      	cbnz	r0, 8006fe4 <_printf_float+0xc4>
 8006f96:	2200      	movs	r2, #0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	f7f9 fdc5 	bl	8000b2c <__aeabi_dcmplt>
 8006fa2:	b110      	cbz	r0, 8006faa <_printf_float+0x8a>
 8006fa4:	232d      	movs	r3, #45	; 0x2d
 8006fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006faa:	4a9c      	ldr	r2, [pc, #624]	; (800721c <_printf_float+0x2fc>)
 8006fac:	4b9c      	ldr	r3, [pc, #624]	; (8007220 <_printf_float+0x300>)
 8006fae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006fb2:	bf8c      	ite	hi
 8006fb4:	4690      	movhi	r8, r2
 8006fb6:	4698      	movls	r8, r3
 8006fb8:	2303      	movs	r3, #3
 8006fba:	f02b 0204 	bic.w	r2, fp, #4
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	6022      	str	r2, [r4, #0]
 8006fc2:	f04f 0900 	mov.w	r9, #0
 8006fc6:	9700      	str	r7, [sp, #0]
 8006fc8:	4633      	mov	r3, r6
 8006fca:	aa0b      	add	r2, sp, #44	; 0x2c
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 f9e6 	bl	80073a0 <_printf_common>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f040 808d 	bne.w	80070f4 <_printf_float+0x1d4>
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fde:	b00d      	add	sp, #52	; 0x34
 8006fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 fdc6 	bl	8000b7c <__aeabi_dcmpun>
 8006ff0:	b110      	cbz	r0, 8006ff8 <_printf_float+0xd8>
 8006ff2:	4a8c      	ldr	r2, [pc, #560]	; (8007224 <_printf_float+0x304>)
 8006ff4:	4b8c      	ldr	r3, [pc, #560]	; (8007228 <_printf_float+0x308>)
 8006ff6:	e7da      	b.n	8006fae <_printf_float+0x8e>
 8006ff8:	6861      	ldr	r1, [r4, #4]
 8006ffa:	1c4b      	adds	r3, r1, #1
 8006ffc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007000:	a80a      	add	r0, sp, #40	; 0x28
 8007002:	d13e      	bne.n	8007082 <_printf_float+0x162>
 8007004:	2306      	movs	r3, #6
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	2300      	movs	r3, #0
 800700a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800700e:	ab09      	add	r3, sp, #36	; 0x24
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	ec49 8b10 	vmov	d0, r8, r9
 8007016:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800701a:	6022      	str	r2, [r4, #0]
 800701c:	f8cd a004 	str.w	sl, [sp, #4]
 8007020:	6861      	ldr	r1, [r4, #4]
 8007022:	4628      	mov	r0, r5
 8007024:	f7ff fee8 	bl	8006df8 <__cvt>
 8007028:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800702c:	2b47      	cmp	r3, #71	; 0x47
 800702e:	4680      	mov	r8, r0
 8007030:	d109      	bne.n	8007046 <_printf_float+0x126>
 8007032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007034:	1cd8      	adds	r0, r3, #3
 8007036:	db02      	blt.n	800703e <_printf_float+0x11e>
 8007038:	6862      	ldr	r2, [r4, #4]
 800703a:	4293      	cmp	r3, r2
 800703c:	dd47      	ble.n	80070ce <_printf_float+0x1ae>
 800703e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007042:	fa5f fa8a 	uxtb.w	sl, sl
 8007046:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800704a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800704c:	d824      	bhi.n	8007098 <_printf_float+0x178>
 800704e:	3901      	subs	r1, #1
 8007050:	4652      	mov	r2, sl
 8007052:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007056:	9109      	str	r1, [sp, #36]	; 0x24
 8007058:	f7ff ff2f 	bl	8006eba <__exponent>
 800705c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800705e:	1813      	adds	r3, r2, r0
 8007060:	2a01      	cmp	r2, #1
 8007062:	4681      	mov	r9, r0
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	dc02      	bgt.n	800706e <_printf_float+0x14e>
 8007068:	6822      	ldr	r2, [r4, #0]
 800706a:	07d1      	lsls	r1, r2, #31
 800706c:	d501      	bpl.n	8007072 <_printf_float+0x152>
 800706e:	3301      	adds	r3, #1
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0a5      	beq.n	8006fc6 <_printf_float+0xa6>
 800707a:	232d      	movs	r3, #45	; 0x2d
 800707c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007080:	e7a1      	b.n	8006fc6 <_printf_float+0xa6>
 8007082:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007086:	f000 8177 	beq.w	8007378 <_printf_float+0x458>
 800708a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800708e:	d1bb      	bne.n	8007008 <_printf_float+0xe8>
 8007090:	2900      	cmp	r1, #0
 8007092:	d1b9      	bne.n	8007008 <_printf_float+0xe8>
 8007094:	2301      	movs	r3, #1
 8007096:	e7b6      	b.n	8007006 <_printf_float+0xe6>
 8007098:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800709c:	d119      	bne.n	80070d2 <_printf_float+0x1b2>
 800709e:	2900      	cmp	r1, #0
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	dd0c      	ble.n	80070be <_printf_float+0x19e>
 80070a4:	6121      	str	r1, [r4, #16]
 80070a6:	b913      	cbnz	r3, 80070ae <_printf_float+0x18e>
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	07d2      	lsls	r2, r2, #31
 80070ac:	d502      	bpl.n	80070b4 <_printf_float+0x194>
 80070ae:	3301      	adds	r3, #1
 80070b0:	440b      	add	r3, r1
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80070b8:	f04f 0900 	mov.w	r9, #0
 80070bc:	e7d9      	b.n	8007072 <_printf_float+0x152>
 80070be:	b913      	cbnz	r3, 80070c6 <_printf_float+0x1a6>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	07d0      	lsls	r0, r2, #31
 80070c4:	d501      	bpl.n	80070ca <_printf_float+0x1aa>
 80070c6:	3302      	adds	r3, #2
 80070c8:	e7f3      	b.n	80070b2 <_printf_float+0x192>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e7f1      	b.n	80070b2 <_printf_float+0x192>
 80070ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80070d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070d6:	4293      	cmp	r3, r2
 80070d8:	db05      	blt.n	80070e6 <_printf_float+0x1c6>
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	07d1      	lsls	r1, r2, #31
 80070e0:	d5e8      	bpl.n	80070b4 <_printf_float+0x194>
 80070e2:	3301      	adds	r3, #1
 80070e4:	e7e5      	b.n	80070b2 <_printf_float+0x192>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfd4      	ite	le
 80070ea:	f1c3 0302 	rsble	r3, r3, #2
 80070ee:	2301      	movgt	r3, #1
 80070f0:	4413      	add	r3, r2
 80070f2:	e7de      	b.n	80070b2 <_printf_float+0x192>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	055a      	lsls	r2, r3, #21
 80070f8:	d407      	bmi.n	800710a <_printf_float+0x1ea>
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	4642      	mov	r2, r8
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	d12b      	bne.n	8007160 <_printf_float+0x240>
 8007108:	e767      	b.n	8006fda <_printf_float+0xba>
 800710a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800710e:	f240 80dc 	bls.w	80072ca <_printf_float+0x3aa>
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800711a:	f7f9 fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 800711e:	2800      	cmp	r0, #0
 8007120:	d033      	beq.n	800718a <_printf_float+0x26a>
 8007122:	2301      	movs	r3, #1
 8007124:	4a41      	ldr	r2, [pc, #260]	; (800722c <_printf_float+0x30c>)
 8007126:	4631      	mov	r1, r6
 8007128:	4628      	mov	r0, r5
 800712a:	47b8      	blx	r7
 800712c:	3001      	adds	r0, #1
 800712e:	f43f af54 	beq.w	8006fda <_printf_float+0xba>
 8007132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007136:	429a      	cmp	r2, r3
 8007138:	db02      	blt.n	8007140 <_printf_float+0x220>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	07d8      	lsls	r0, r3, #31
 800713e:	d50f      	bpl.n	8007160 <_printf_float+0x240>
 8007140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f af45 	beq.w	8006fda <_printf_float+0xba>
 8007150:	f04f 0800 	mov.w	r8, #0
 8007154:	f104 091a 	add.w	r9, r4, #26
 8007158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715a:	3b01      	subs	r3, #1
 800715c:	4543      	cmp	r3, r8
 800715e:	dc09      	bgt.n	8007174 <_printf_float+0x254>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	079b      	lsls	r3, r3, #30
 8007164:	f100 8103 	bmi.w	800736e <_printf_float+0x44e>
 8007168:	68e0      	ldr	r0, [r4, #12]
 800716a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800716c:	4298      	cmp	r0, r3
 800716e:	bfb8      	it	lt
 8007170:	4618      	movlt	r0, r3
 8007172:	e734      	b.n	8006fde <_printf_float+0xbe>
 8007174:	2301      	movs	r3, #1
 8007176:	464a      	mov	r2, r9
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f af2b 	beq.w	8006fda <_printf_float+0xba>
 8007184:	f108 0801 	add.w	r8, r8, #1
 8007188:	e7e6      	b.n	8007158 <_printf_float+0x238>
 800718a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	dc2b      	bgt.n	80071e8 <_printf_float+0x2c8>
 8007190:	2301      	movs	r3, #1
 8007192:	4a26      	ldr	r2, [pc, #152]	; (800722c <_printf_float+0x30c>)
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	47b8      	blx	r7
 800719a:	3001      	adds	r0, #1
 800719c:	f43f af1d 	beq.w	8006fda <_printf_float+0xba>
 80071a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a2:	b923      	cbnz	r3, 80071ae <_printf_float+0x28e>
 80071a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a6:	b913      	cbnz	r3, 80071ae <_printf_float+0x28e>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	07d9      	lsls	r1, r3, #31
 80071ac:	d5d8      	bpl.n	8007160 <_printf_float+0x240>
 80071ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f af0e 	beq.w	8006fda <_printf_float+0xba>
 80071be:	f04f 0900 	mov.w	r9, #0
 80071c2:	f104 0a1a 	add.w	sl, r4, #26
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	425b      	negs	r3, r3
 80071ca:	454b      	cmp	r3, r9
 80071cc:	dc01      	bgt.n	80071d2 <_printf_float+0x2b2>
 80071ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d0:	e794      	b.n	80070fc <_printf_float+0x1dc>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f aefc 	beq.w	8006fda <_printf_float+0xba>
 80071e2:	f109 0901 	add.w	r9, r9, #1
 80071e6:	e7ee      	b.n	80071c6 <_printf_float+0x2a6>
 80071e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bfa8      	it	ge
 80071f0:	461a      	movge	r2, r3
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	4691      	mov	r9, r2
 80071f6:	dd07      	ble.n	8007208 <_printf_float+0x2e8>
 80071f8:	4613      	mov	r3, r2
 80071fa:	4631      	mov	r1, r6
 80071fc:	4642      	mov	r2, r8
 80071fe:	4628      	mov	r0, r5
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	f43f aee9 	beq.w	8006fda <_printf_float+0xba>
 8007208:	f104 031a 	add.w	r3, r4, #26
 800720c:	f04f 0b00 	mov.w	fp, #0
 8007210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007214:	9306      	str	r3, [sp, #24]
 8007216:	e015      	b.n	8007244 <_printf_float+0x324>
 8007218:	7fefffff 	.word	0x7fefffff
 800721c:	0800a4b8 	.word	0x0800a4b8
 8007220:	0800a4b4 	.word	0x0800a4b4
 8007224:	0800a4c0 	.word	0x0800a4c0
 8007228:	0800a4bc 	.word	0x0800a4bc
 800722c:	0800a4c4 	.word	0x0800a4c4
 8007230:	2301      	movs	r3, #1
 8007232:	9a06      	ldr	r2, [sp, #24]
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	47b8      	blx	r7
 800723a:	3001      	adds	r0, #1
 800723c:	f43f aecd 	beq.w	8006fda <_printf_float+0xba>
 8007240:	f10b 0b01 	add.w	fp, fp, #1
 8007244:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007248:	ebaa 0309 	sub.w	r3, sl, r9
 800724c:	455b      	cmp	r3, fp
 800724e:	dcef      	bgt.n	8007230 <_printf_float+0x310>
 8007250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007254:	429a      	cmp	r2, r3
 8007256:	44d0      	add	r8, sl
 8007258:	db15      	blt.n	8007286 <_printf_float+0x366>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	07da      	lsls	r2, r3, #31
 800725e:	d412      	bmi.n	8007286 <_printf_float+0x366>
 8007260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007264:	eba3 020a 	sub.w	r2, r3, sl
 8007268:	eba3 0a01 	sub.w	sl, r3, r1
 800726c:	4592      	cmp	sl, r2
 800726e:	bfa8      	it	ge
 8007270:	4692      	movge	sl, r2
 8007272:	f1ba 0f00 	cmp.w	sl, #0
 8007276:	dc0e      	bgt.n	8007296 <_printf_float+0x376>
 8007278:	f04f 0800 	mov.w	r8, #0
 800727c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007280:	f104 091a 	add.w	r9, r4, #26
 8007284:	e019      	b.n	80072ba <_printf_float+0x39a>
 8007286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	d1e5      	bne.n	8007260 <_printf_float+0x340>
 8007294:	e6a1      	b.n	8006fda <_printf_float+0xba>
 8007296:	4653      	mov	r3, sl
 8007298:	4642      	mov	r2, r8
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1e9      	bne.n	8007278 <_printf_float+0x358>
 80072a4:	e699      	b.n	8006fda <_printf_float+0xba>
 80072a6:	2301      	movs	r3, #1
 80072a8:	464a      	mov	r2, r9
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f ae92 	beq.w	8006fda <_printf_float+0xba>
 80072b6:	f108 0801 	add.w	r8, r8, #1
 80072ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	eba3 030a 	sub.w	r3, r3, sl
 80072c4:	4543      	cmp	r3, r8
 80072c6:	dcee      	bgt.n	80072a6 <_printf_float+0x386>
 80072c8:	e74a      	b.n	8007160 <_printf_float+0x240>
 80072ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072cc:	2a01      	cmp	r2, #1
 80072ce:	dc01      	bgt.n	80072d4 <_printf_float+0x3b4>
 80072d0:	07db      	lsls	r3, r3, #31
 80072d2:	d53a      	bpl.n	800734a <_printf_float+0x42a>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4642      	mov	r2, r8
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	47b8      	blx	r7
 80072de:	3001      	adds	r0, #1
 80072e0:	f43f ae7b 	beq.w	8006fda <_printf_float+0xba>
 80072e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f108 0801 	add.w	r8, r8, #1
 80072f4:	f43f ae71 	beq.w	8006fda <_printf_float+0xba>
 80072f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fa:	2200      	movs	r2, #0
 80072fc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007304:	2300      	movs	r3, #0
 8007306:	f7f9 fc07 	bl	8000b18 <__aeabi_dcmpeq>
 800730a:	b9c8      	cbnz	r0, 8007340 <_printf_float+0x420>
 800730c:	4653      	mov	r3, sl
 800730e:	4642      	mov	r2, r8
 8007310:	4631      	mov	r1, r6
 8007312:	4628      	mov	r0, r5
 8007314:	47b8      	blx	r7
 8007316:	3001      	adds	r0, #1
 8007318:	d10e      	bne.n	8007338 <_printf_float+0x418>
 800731a:	e65e      	b.n	8006fda <_printf_float+0xba>
 800731c:	2301      	movs	r3, #1
 800731e:	4652      	mov	r2, sl
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f ae57 	beq.w	8006fda <_printf_float+0xba>
 800732c:	f108 0801 	add.w	r8, r8, #1
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	3b01      	subs	r3, #1
 8007334:	4543      	cmp	r3, r8
 8007336:	dcf1      	bgt.n	800731c <_printf_float+0x3fc>
 8007338:	464b      	mov	r3, r9
 800733a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800733e:	e6de      	b.n	80070fe <_printf_float+0x1de>
 8007340:	f04f 0800 	mov.w	r8, #0
 8007344:	f104 0a1a 	add.w	sl, r4, #26
 8007348:	e7f2      	b.n	8007330 <_printf_float+0x410>
 800734a:	2301      	movs	r3, #1
 800734c:	e7df      	b.n	800730e <_printf_float+0x3ee>
 800734e:	2301      	movs	r3, #1
 8007350:	464a      	mov	r2, r9
 8007352:	4631      	mov	r1, r6
 8007354:	4628      	mov	r0, r5
 8007356:	47b8      	blx	r7
 8007358:	3001      	adds	r0, #1
 800735a:	f43f ae3e 	beq.w	8006fda <_printf_float+0xba>
 800735e:	f108 0801 	add.w	r8, r8, #1
 8007362:	68e3      	ldr	r3, [r4, #12]
 8007364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007366:	1a9b      	subs	r3, r3, r2
 8007368:	4543      	cmp	r3, r8
 800736a:	dcf0      	bgt.n	800734e <_printf_float+0x42e>
 800736c:	e6fc      	b.n	8007168 <_printf_float+0x248>
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	f104 0919 	add.w	r9, r4, #25
 8007376:	e7f4      	b.n	8007362 <_printf_float+0x442>
 8007378:	2900      	cmp	r1, #0
 800737a:	f43f ae8b 	beq.w	8007094 <_printf_float+0x174>
 800737e:	2300      	movs	r3, #0
 8007380:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007384:	ab09      	add	r3, sp, #36	; 0x24
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	ec49 8b10 	vmov	d0, r8, r9
 800738c:	6022      	str	r2, [r4, #0]
 800738e:	f8cd a004 	str.w	sl, [sp, #4]
 8007392:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007396:	4628      	mov	r0, r5
 8007398:	f7ff fd2e 	bl	8006df8 <__cvt>
 800739c:	4680      	mov	r8, r0
 800739e:	e648      	b.n	8007032 <_printf_float+0x112>

080073a0 <_printf_common>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	4691      	mov	r9, r2
 80073a6:	461f      	mov	r7, r3
 80073a8:	688a      	ldr	r2, [r1, #8]
 80073aa:	690b      	ldr	r3, [r1, #16]
 80073ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bfb8      	it	lt
 80073b4:	4613      	movlt	r3, r2
 80073b6:	f8c9 3000 	str.w	r3, [r9]
 80073ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073be:	4606      	mov	r6, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	b112      	cbz	r2, 80073ca <_printf_common+0x2a>
 80073c4:	3301      	adds	r3, #1
 80073c6:	f8c9 3000 	str.w	r3, [r9]
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	0699      	lsls	r1, r3, #26
 80073ce:	bf42      	ittt	mi
 80073d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80073d4:	3302      	addmi	r3, #2
 80073d6:	f8c9 3000 	strmi.w	r3, [r9]
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	f015 0506 	ands.w	r5, r5, #6
 80073e0:	d107      	bne.n	80073f2 <_printf_common+0x52>
 80073e2:	f104 0a19 	add.w	sl, r4, #25
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	f8d9 2000 	ldr.w	r2, [r9]
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dc28      	bgt.n	8007444 <_printf_common+0xa4>
 80073f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	3300      	adds	r3, #0
 80073fa:	bf18      	it	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	0692      	lsls	r2, r2, #26
 8007400:	d42d      	bmi.n	800745e <_printf_common+0xbe>
 8007402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007406:	4639      	mov	r1, r7
 8007408:	4630      	mov	r0, r6
 800740a:	47c0      	blx	r8
 800740c:	3001      	adds	r0, #1
 800740e:	d020      	beq.n	8007452 <_printf_common+0xb2>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	68e5      	ldr	r5, [r4, #12]
 8007414:	f8d9 2000 	ldr.w	r2, [r9]
 8007418:	f003 0306 	and.w	r3, r3, #6
 800741c:	2b04      	cmp	r3, #4
 800741e:	bf08      	it	eq
 8007420:	1aad      	subeq	r5, r5, r2
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	6922      	ldr	r2, [r4, #16]
 8007426:	bf0c      	ite	eq
 8007428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800742c:	2500      	movne	r5, #0
 800742e:	4293      	cmp	r3, r2
 8007430:	bfc4      	itt	gt
 8007432:	1a9b      	subgt	r3, r3, r2
 8007434:	18ed      	addgt	r5, r5, r3
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	341a      	adds	r4, #26
 800743c:	454d      	cmp	r5, r9
 800743e:	d11a      	bne.n	8007476 <_printf_common+0xd6>
 8007440:	2000      	movs	r0, #0
 8007442:	e008      	b.n	8007456 <_printf_common+0xb6>
 8007444:	2301      	movs	r3, #1
 8007446:	4652      	mov	r2, sl
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d103      	bne.n	800745a <_printf_common+0xba>
 8007452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745a:	3501      	adds	r5, #1
 800745c:	e7c3      	b.n	80073e6 <_printf_common+0x46>
 800745e:	18e1      	adds	r1, r4, r3
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	2030      	movs	r0, #48	; 0x30
 8007464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007468:	4422      	add	r2, r4
 800746a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800746e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007472:	3302      	adds	r3, #2
 8007474:	e7c5      	b.n	8007402 <_printf_common+0x62>
 8007476:	2301      	movs	r3, #1
 8007478:	4622      	mov	r2, r4
 800747a:	4639      	mov	r1, r7
 800747c:	4630      	mov	r0, r6
 800747e:	47c0      	blx	r8
 8007480:	3001      	adds	r0, #1
 8007482:	d0e6      	beq.n	8007452 <_printf_common+0xb2>
 8007484:	f109 0901 	add.w	r9, r9, #1
 8007488:	e7d8      	b.n	800743c <_printf_common+0x9c>
	...

0800748c <_printf_i>:
 800748c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007490:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007494:	460c      	mov	r4, r1
 8007496:	7e09      	ldrb	r1, [r1, #24]
 8007498:	b085      	sub	sp, #20
 800749a:	296e      	cmp	r1, #110	; 0x6e
 800749c:	4617      	mov	r7, r2
 800749e:	4606      	mov	r6, r0
 80074a0:	4698      	mov	r8, r3
 80074a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a4:	f000 80b3 	beq.w	800760e <_printf_i+0x182>
 80074a8:	d822      	bhi.n	80074f0 <_printf_i+0x64>
 80074aa:	2963      	cmp	r1, #99	; 0x63
 80074ac:	d036      	beq.n	800751c <_printf_i+0x90>
 80074ae:	d80a      	bhi.n	80074c6 <_printf_i+0x3a>
 80074b0:	2900      	cmp	r1, #0
 80074b2:	f000 80b9 	beq.w	8007628 <_printf_i+0x19c>
 80074b6:	2958      	cmp	r1, #88	; 0x58
 80074b8:	f000 8083 	beq.w	80075c2 <_printf_i+0x136>
 80074bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80074c4:	e032      	b.n	800752c <_printf_i+0xa0>
 80074c6:	2964      	cmp	r1, #100	; 0x64
 80074c8:	d001      	beq.n	80074ce <_printf_i+0x42>
 80074ca:	2969      	cmp	r1, #105	; 0x69
 80074cc:	d1f6      	bne.n	80074bc <_printf_i+0x30>
 80074ce:	6820      	ldr	r0, [r4, #0]
 80074d0:	6813      	ldr	r3, [r2, #0]
 80074d2:	0605      	lsls	r5, r0, #24
 80074d4:	f103 0104 	add.w	r1, r3, #4
 80074d8:	d52a      	bpl.n	8007530 <_printf_i+0xa4>
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da03      	bge.n	80074ea <_printf_i+0x5e>
 80074e2:	222d      	movs	r2, #45	; 0x2d
 80074e4:	425b      	negs	r3, r3
 80074e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80074ea:	486f      	ldr	r0, [pc, #444]	; (80076a8 <_printf_i+0x21c>)
 80074ec:	220a      	movs	r2, #10
 80074ee:	e039      	b.n	8007564 <_printf_i+0xd8>
 80074f0:	2973      	cmp	r1, #115	; 0x73
 80074f2:	f000 809d 	beq.w	8007630 <_printf_i+0x1a4>
 80074f6:	d808      	bhi.n	800750a <_printf_i+0x7e>
 80074f8:	296f      	cmp	r1, #111	; 0x6f
 80074fa:	d020      	beq.n	800753e <_printf_i+0xb2>
 80074fc:	2970      	cmp	r1, #112	; 0x70
 80074fe:	d1dd      	bne.n	80074bc <_printf_i+0x30>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	f043 0320 	orr.w	r3, r3, #32
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	e003      	b.n	8007512 <_printf_i+0x86>
 800750a:	2975      	cmp	r1, #117	; 0x75
 800750c:	d017      	beq.n	800753e <_printf_i+0xb2>
 800750e:	2978      	cmp	r1, #120	; 0x78
 8007510:	d1d4      	bne.n	80074bc <_printf_i+0x30>
 8007512:	2378      	movs	r3, #120	; 0x78
 8007514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007518:	4864      	ldr	r0, [pc, #400]	; (80076ac <_printf_i+0x220>)
 800751a:	e055      	b.n	80075c8 <_printf_i+0x13c>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	1d19      	adds	r1, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6011      	str	r1, [r2, #0]
 8007524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800752c:	2301      	movs	r3, #1
 800752e:	e08c      	b.n	800764a <_printf_i+0x1be>
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6011      	str	r1, [r2, #0]
 8007534:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007538:	bf18      	it	ne
 800753a:	b21b      	sxthne	r3, r3
 800753c:	e7cf      	b.n	80074de <_printf_i+0x52>
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	6825      	ldr	r5, [r4, #0]
 8007542:	1d18      	adds	r0, r3, #4
 8007544:	6010      	str	r0, [r2, #0]
 8007546:	0628      	lsls	r0, r5, #24
 8007548:	d501      	bpl.n	800754e <_printf_i+0xc2>
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	e002      	b.n	8007554 <_printf_i+0xc8>
 800754e:	0668      	lsls	r0, r5, #25
 8007550:	d5fb      	bpl.n	800754a <_printf_i+0xbe>
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	4854      	ldr	r0, [pc, #336]	; (80076a8 <_printf_i+0x21c>)
 8007556:	296f      	cmp	r1, #111	; 0x6f
 8007558:	bf14      	ite	ne
 800755a:	220a      	movne	r2, #10
 800755c:	2208      	moveq	r2, #8
 800755e:	2100      	movs	r1, #0
 8007560:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007564:	6865      	ldr	r5, [r4, #4]
 8007566:	60a5      	str	r5, [r4, #8]
 8007568:	2d00      	cmp	r5, #0
 800756a:	f2c0 8095 	blt.w	8007698 <_printf_i+0x20c>
 800756e:	6821      	ldr	r1, [r4, #0]
 8007570:	f021 0104 	bic.w	r1, r1, #4
 8007574:	6021      	str	r1, [r4, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d13d      	bne.n	80075f6 <_printf_i+0x16a>
 800757a:	2d00      	cmp	r5, #0
 800757c:	f040 808e 	bne.w	800769c <_printf_i+0x210>
 8007580:	4665      	mov	r5, ip
 8007582:	2a08      	cmp	r2, #8
 8007584:	d10b      	bne.n	800759e <_printf_i+0x112>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d508      	bpl.n	800759e <_printf_i+0x112>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	bfde      	ittt	le
 8007594:	2330      	movle	r3, #48	; 0x30
 8007596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800759a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800759e:	ebac 0305 	sub.w	r3, ip, r5
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	f8cd 8000 	str.w	r8, [sp]
 80075a8:	463b      	mov	r3, r7
 80075aa:	aa03      	add	r2, sp, #12
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff fef6 	bl	80073a0 <_printf_common>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d14d      	bne.n	8007654 <_printf_i+0x1c8>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075bc:	b005      	add	sp, #20
 80075be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c2:	4839      	ldr	r0, [pc, #228]	; (80076a8 <_printf_i+0x21c>)
 80075c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80075c8:	6813      	ldr	r3, [r2, #0]
 80075ca:	6821      	ldr	r1, [r4, #0]
 80075cc:	1d1d      	adds	r5, r3, #4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6015      	str	r5, [r2, #0]
 80075d2:	060a      	lsls	r2, r1, #24
 80075d4:	d50b      	bpl.n	80075ee <_printf_i+0x162>
 80075d6:	07ca      	lsls	r2, r1, #31
 80075d8:	bf44      	itt	mi
 80075da:	f041 0120 	orrmi.w	r1, r1, #32
 80075de:	6021      	strmi	r1, [r4, #0]
 80075e0:	b91b      	cbnz	r3, 80075ea <_printf_i+0x15e>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	f022 0220 	bic.w	r2, r2, #32
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	e7b7      	b.n	800755e <_printf_i+0xd2>
 80075ee:	064d      	lsls	r5, r1, #25
 80075f0:	bf48      	it	mi
 80075f2:	b29b      	uxthmi	r3, r3
 80075f4:	e7ef      	b.n	80075d6 <_printf_i+0x14a>
 80075f6:	4665      	mov	r5, ip
 80075f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80075fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007600:	5cc3      	ldrb	r3, [r0, r3]
 8007602:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007606:	460b      	mov	r3, r1
 8007608:	2900      	cmp	r1, #0
 800760a:	d1f5      	bne.n	80075f8 <_printf_i+0x16c>
 800760c:	e7b9      	b.n	8007582 <_printf_i+0xf6>
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	6961      	ldr	r1, [r4, #20]
 8007614:	1d18      	adds	r0, r3, #4
 8007616:	6010      	str	r0, [r2, #0]
 8007618:	0628      	lsls	r0, r5, #24
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	d501      	bpl.n	8007622 <_printf_i+0x196>
 800761e:	6019      	str	r1, [r3, #0]
 8007620:	e002      	b.n	8007628 <_printf_i+0x19c>
 8007622:	066a      	lsls	r2, r5, #25
 8007624:	d5fb      	bpl.n	800761e <_printf_i+0x192>
 8007626:	8019      	strh	r1, [r3, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	4665      	mov	r5, ip
 800762e:	e7b9      	b.n	80075a4 <_printf_i+0x118>
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	1d19      	adds	r1, r3, #4
 8007634:	6011      	str	r1, [r2, #0]
 8007636:	681d      	ldr	r5, [r3, #0]
 8007638:	6862      	ldr	r2, [r4, #4]
 800763a:	2100      	movs	r1, #0
 800763c:	4628      	mov	r0, r5
 800763e:	f7f8 fdf7 	bl	8000230 <memchr>
 8007642:	b108      	cbz	r0, 8007648 <_printf_i+0x1bc>
 8007644:	1b40      	subs	r0, r0, r5
 8007646:	6060      	str	r0, [r4, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	2300      	movs	r3, #0
 800764e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007652:	e7a7      	b.n	80075a4 <_printf_i+0x118>
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	462a      	mov	r2, r5
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	47c0      	blx	r8
 800765e:	3001      	adds	r0, #1
 8007660:	d0aa      	beq.n	80075b8 <_printf_i+0x12c>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	079b      	lsls	r3, r3, #30
 8007666:	d413      	bmi.n	8007690 <_printf_i+0x204>
 8007668:	68e0      	ldr	r0, [r4, #12]
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	4298      	cmp	r0, r3
 800766e:	bfb8      	it	lt
 8007670:	4618      	movlt	r0, r3
 8007672:	e7a3      	b.n	80075bc <_printf_i+0x130>
 8007674:	2301      	movs	r3, #1
 8007676:	464a      	mov	r2, r9
 8007678:	4639      	mov	r1, r7
 800767a:	4630      	mov	r0, r6
 800767c:	47c0      	blx	r8
 800767e:	3001      	adds	r0, #1
 8007680:	d09a      	beq.n	80075b8 <_printf_i+0x12c>
 8007682:	3501      	adds	r5, #1
 8007684:	68e3      	ldr	r3, [r4, #12]
 8007686:	9a03      	ldr	r2, [sp, #12]
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	42ab      	cmp	r3, r5
 800768c:	dcf2      	bgt.n	8007674 <_printf_i+0x1e8>
 800768e:	e7eb      	b.n	8007668 <_printf_i+0x1dc>
 8007690:	2500      	movs	r5, #0
 8007692:	f104 0919 	add.w	r9, r4, #25
 8007696:	e7f5      	b.n	8007684 <_printf_i+0x1f8>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1ac      	bne.n	80075f6 <_printf_i+0x16a>
 800769c:	7803      	ldrb	r3, [r0, #0]
 800769e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a6:	e76c      	b.n	8007582 <_printf_i+0xf6>
 80076a8:	0800a4c6 	.word	0x0800a4c6
 80076ac:	0800a4d7 	.word	0x0800a4d7

080076b0 <siprintf>:
 80076b0:	b40e      	push	{r1, r2, r3}
 80076b2:	b500      	push	{lr}
 80076b4:	b09c      	sub	sp, #112	; 0x70
 80076b6:	ab1d      	add	r3, sp, #116	; 0x74
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	9006      	str	r0, [sp, #24]
 80076bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076c0:	4809      	ldr	r0, [pc, #36]	; (80076e8 <siprintf+0x38>)
 80076c2:	9107      	str	r1, [sp, #28]
 80076c4:	9104      	str	r1, [sp, #16]
 80076c6:	4909      	ldr	r1, [pc, #36]	; (80076ec <siprintf+0x3c>)
 80076c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076cc:	9105      	str	r1, [sp, #20]
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	a902      	add	r1, sp, #8
 80076d4:	f001 fa5c 	bl	8008b90 <_svfiprintf_r>
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	b01c      	add	sp, #112	; 0x70
 80076e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e4:	b003      	add	sp, #12
 80076e6:	4770      	bx	lr
 80076e8:	20000060 	.word	0x20000060
 80076ec:	ffff0208 	.word	0xffff0208

080076f0 <quorem>:
 80076f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	6903      	ldr	r3, [r0, #16]
 80076f6:	690c      	ldr	r4, [r1, #16]
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	4680      	mov	r8, r0
 80076fc:	f2c0 8082 	blt.w	8007804 <quorem+0x114>
 8007700:	3c01      	subs	r4, #1
 8007702:	f101 0714 	add.w	r7, r1, #20
 8007706:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800770a:	f100 0614 	add.w	r6, r0, #20
 800770e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007712:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007716:	eb06 030c 	add.w	r3, r6, ip
 800771a:	3501      	adds	r5, #1
 800771c:	eb07 090c 	add.w	r9, r7, ip
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	fbb0 f5f5 	udiv	r5, r0, r5
 8007726:	b395      	cbz	r5, 800778e <quorem+0x9e>
 8007728:	f04f 0a00 	mov.w	sl, #0
 800772c:	4638      	mov	r0, r7
 800772e:	46b6      	mov	lr, r6
 8007730:	46d3      	mov	fp, sl
 8007732:	f850 2b04 	ldr.w	r2, [r0], #4
 8007736:	b293      	uxth	r3, r2
 8007738:	fb05 a303 	mla	r3, r5, r3, sl
 800773c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007740:	b29b      	uxth	r3, r3
 8007742:	ebab 0303 	sub.w	r3, fp, r3
 8007746:	0c12      	lsrs	r2, r2, #16
 8007748:	f8de b000 	ldr.w	fp, [lr]
 800774c:	fb05 a202 	mla	r2, r5, r2, sl
 8007750:	fa13 f38b 	uxtah	r3, r3, fp
 8007754:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007758:	fa1f fb82 	uxth.w	fp, r2
 800775c:	f8de 2000 	ldr.w	r2, [lr]
 8007760:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007768:	b29b      	uxth	r3, r3
 800776a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800776e:	4581      	cmp	r9, r0
 8007770:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007774:	f84e 3b04 	str.w	r3, [lr], #4
 8007778:	d2db      	bcs.n	8007732 <quorem+0x42>
 800777a:	f856 300c 	ldr.w	r3, [r6, ip]
 800777e:	b933      	cbnz	r3, 800778e <quorem+0x9e>
 8007780:	9b01      	ldr	r3, [sp, #4]
 8007782:	3b04      	subs	r3, #4
 8007784:	429e      	cmp	r6, r3
 8007786:	461a      	mov	r2, r3
 8007788:	d330      	bcc.n	80077ec <quorem+0xfc>
 800778a:	f8c8 4010 	str.w	r4, [r8, #16]
 800778e:	4640      	mov	r0, r8
 8007790:	f001 f828 	bl	80087e4 <__mcmp>
 8007794:	2800      	cmp	r0, #0
 8007796:	db25      	blt.n	80077e4 <quorem+0xf4>
 8007798:	3501      	adds	r5, #1
 800779a:	4630      	mov	r0, r6
 800779c:	f04f 0c00 	mov.w	ip, #0
 80077a0:	f857 2b04 	ldr.w	r2, [r7], #4
 80077a4:	f8d0 e000 	ldr.w	lr, [r0]
 80077a8:	b293      	uxth	r3, r2
 80077aa:	ebac 0303 	sub.w	r3, ip, r3
 80077ae:	0c12      	lsrs	r2, r2, #16
 80077b0:	fa13 f38e 	uxtah	r3, r3, lr
 80077b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c2:	45b9      	cmp	r9, r7
 80077c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077c8:	f840 3b04 	str.w	r3, [r0], #4
 80077cc:	d2e8      	bcs.n	80077a0 <quorem+0xb0>
 80077ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80077d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80077d6:	b92a      	cbnz	r2, 80077e4 <quorem+0xf4>
 80077d8:	3b04      	subs	r3, #4
 80077da:	429e      	cmp	r6, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	d30b      	bcc.n	80077f8 <quorem+0x108>
 80077e0:	f8c8 4010 	str.w	r4, [r8, #16]
 80077e4:	4628      	mov	r0, r5
 80077e6:	b003      	add	sp, #12
 80077e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	3b04      	subs	r3, #4
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	d1ca      	bne.n	800778a <quorem+0x9a>
 80077f4:	3c01      	subs	r4, #1
 80077f6:	e7c5      	b.n	8007784 <quorem+0x94>
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	3b04      	subs	r3, #4
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	d1ef      	bne.n	80077e0 <quorem+0xf0>
 8007800:	3c01      	subs	r4, #1
 8007802:	e7ea      	b.n	80077da <quorem+0xea>
 8007804:	2000      	movs	r0, #0
 8007806:	e7ee      	b.n	80077e6 <quorem+0xf6>

08007808 <_dtoa_r>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	ec57 6b10 	vmov	r6, r7, d0
 8007810:	b097      	sub	sp, #92	; 0x5c
 8007812:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007814:	9106      	str	r1, [sp, #24]
 8007816:	4604      	mov	r4, r0
 8007818:	920b      	str	r2, [sp, #44]	; 0x2c
 800781a:	9312      	str	r3, [sp, #72]	; 0x48
 800781c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007820:	e9cd 6700 	strd	r6, r7, [sp]
 8007824:	b93d      	cbnz	r5, 8007836 <_dtoa_r+0x2e>
 8007826:	2010      	movs	r0, #16
 8007828:	f000 fdb4 	bl	8008394 <malloc>
 800782c:	6260      	str	r0, [r4, #36]	; 0x24
 800782e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007832:	6005      	str	r5, [r0, #0]
 8007834:	60c5      	str	r5, [r0, #12]
 8007836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007838:	6819      	ldr	r1, [r3, #0]
 800783a:	b151      	cbz	r1, 8007852 <_dtoa_r+0x4a>
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	604a      	str	r2, [r1, #4]
 8007840:	2301      	movs	r3, #1
 8007842:	4093      	lsls	r3, r2
 8007844:	608b      	str	r3, [r1, #8]
 8007846:	4620      	mov	r0, r4
 8007848:	f000 fdeb 	bl	8008422 <_Bfree>
 800784c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	1e3b      	subs	r3, r7, #0
 8007854:	bfbb      	ittet	lt
 8007856:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800785a:	9301      	strlt	r3, [sp, #4]
 800785c:	2300      	movge	r3, #0
 800785e:	2201      	movlt	r2, #1
 8007860:	bfac      	ite	ge
 8007862:	f8c8 3000 	strge.w	r3, [r8]
 8007866:	f8c8 2000 	strlt.w	r2, [r8]
 800786a:	4baf      	ldr	r3, [pc, #700]	; (8007b28 <_dtoa_r+0x320>)
 800786c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007870:	ea33 0308 	bics.w	r3, r3, r8
 8007874:	d114      	bne.n	80078a0 <_dtoa_r+0x98>
 8007876:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007878:	f242 730f 	movw	r3, #9999	; 0x270f
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	9b00      	ldr	r3, [sp, #0]
 8007880:	b923      	cbnz	r3, 800788c <_dtoa_r+0x84>
 8007882:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007886:	2800      	cmp	r0, #0
 8007888:	f000 8542 	beq.w	8008310 <_dtoa_r+0xb08>
 800788c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800788e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007b3c <_dtoa_r+0x334>
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8544 	beq.w	8008320 <_dtoa_r+0xb18>
 8007898:	f10b 0303 	add.w	r3, fp, #3
 800789c:	f000 bd3e 	b.w	800831c <_dtoa_r+0xb14>
 80078a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f934 	bl	8000b18 <__aeabi_dcmpeq>
 80078b0:	4681      	mov	r9, r0
 80078b2:	b168      	cbz	r0, 80078d0 <_dtoa_r+0xc8>
 80078b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078b6:	2301      	movs	r3, #1
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8524 	beq.w	800830a <_dtoa_r+0xb02>
 80078c2:	4b9a      	ldr	r3, [pc, #616]	; (8007b2c <_dtoa_r+0x324>)
 80078c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078c6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	f000 bd28 	b.w	8008320 <_dtoa_r+0xb18>
 80078d0:	aa14      	add	r2, sp, #80	; 0x50
 80078d2:	a915      	add	r1, sp, #84	; 0x54
 80078d4:	ec47 6b10 	vmov	d0, r6, r7
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fffa 	bl	80088d2 <__d2b>
 80078de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078e2:	9004      	str	r0, [sp, #16]
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	d07c      	beq.n	80079e2 <_dtoa_r+0x1da>
 80078e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80078f0:	46b2      	mov	sl, r6
 80078f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80078f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80078fe:	2200      	movs	r2, #0
 8007900:	4b8b      	ldr	r3, [pc, #556]	; (8007b30 <_dtoa_r+0x328>)
 8007902:	4650      	mov	r0, sl
 8007904:	4659      	mov	r1, fp
 8007906:	f7f8 fce7 	bl	80002d8 <__aeabi_dsub>
 800790a:	a381      	add	r3, pc, #516	; (adr r3, 8007b10 <_dtoa_r+0x308>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fe9a 	bl	8000648 <__aeabi_dmul>
 8007914:	a380      	add	r3, pc, #512	; (adr r3, 8007b18 <_dtoa_r+0x310>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fcdf 	bl	80002dc <__adddf3>
 800791e:	4606      	mov	r6, r0
 8007920:	4628      	mov	r0, r5
 8007922:	460f      	mov	r7, r1
 8007924:	f7f8 fe26 	bl	8000574 <__aeabi_i2d>
 8007928:	a37d      	add	r3, pc, #500	; (adr r3, 8007b20 <_dtoa_r+0x318>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fe8b 	bl	8000648 <__aeabi_dmul>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f8 fccf 	bl	80002dc <__adddf3>
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	f7f9 f931 	bl	8000ba8 <__aeabi_d2iz>
 8007946:	2200      	movs	r2, #0
 8007948:	4682      	mov	sl, r0
 800794a:	2300      	movs	r3, #0
 800794c:	4630      	mov	r0, r6
 800794e:	4639      	mov	r1, r7
 8007950:	f7f9 f8ec 	bl	8000b2c <__aeabi_dcmplt>
 8007954:	b148      	cbz	r0, 800796a <_dtoa_r+0x162>
 8007956:	4650      	mov	r0, sl
 8007958:	f7f8 fe0c 	bl	8000574 <__aeabi_i2d>
 800795c:	4632      	mov	r2, r6
 800795e:	463b      	mov	r3, r7
 8007960:	f7f9 f8da 	bl	8000b18 <__aeabi_dcmpeq>
 8007964:	b908      	cbnz	r0, 800796a <_dtoa_r+0x162>
 8007966:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800796a:	f1ba 0f16 	cmp.w	sl, #22
 800796e:	d859      	bhi.n	8007a24 <_dtoa_r+0x21c>
 8007970:	4970      	ldr	r1, [pc, #448]	; (8007b34 <_dtoa_r+0x32c>)
 8007972:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800797a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800797e:	f7f9 f8f3 	bl	8000b68 <__aeabi_dcmpgt>
 8007982:	2800      	cmp	r0, #0
 8007984:	d050      	beq.n	8007a28 <_dtoa_r+0x220>
 8007986:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800798a:	2300      	movs	r3, #0
 800798c:	930f      	str	r3, [sp, #60]	; 0x3c
 800798e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007990:	1b5d      	subs	r5, r3, r5
 8007992:	f1b5 0801 	subs.w	r8, r5, #1
 8007996:	bf49      	itett	mi
 8007998:	f1c5 0301 	rsbmi	r3, r5, #1
 800799c:	2300      	movpl	r3, #0
 800799e:	9305      	strmi	r3, [sp, #20]
 80079a0:	f04f 0800 	movmi.w	r8, #0
 80079a4:	bf58      	it	pl
 80079a6:	9305      	strpl	r3, [sp, #20]
 80079a8:	f1ba 0f00 	cmp.w	sl, #0
 80079ac:	db3e      	blt.n	8007a2c <_dtoa_r+0x224>
 80079ae:	2300      	movs	r3, #0
 80079b0:	44d0      	add	r8, sl
 80079b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80079b6:	9307      	str	r3, [sp, #28]
 80079b8:	9b06      	ldr	r3, [sp, #24]
 80079ba:	2b09      	cmp	r3, #9
 80079bc:	f200 8090 	bhi.w	8007ae0 <_dtoa_r+0x2d8>
 80079c0:	2b05      	cmp	r3, #5
 80079c2:	bfc4      	itt	gt
 80079c4:	3b04      	subgt	r3, #4
 80079c6:	9306      	strgt	r3, [sp, #24]
 80079c8:	9b06      	ldr	r3, [sp, #24]
 80079ca:	f1a3 0302 	sub.w	r3, r3, #2
 80079ce:	bfcc      	ite	gt
 80079d0:	2500      	movgt	r5, #0
 80079d2:	2501      	movle	r5, #1
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	f200 808f 	bhi.w	8007af8 <_dtoa_r+0x2f0>
 80079da:	e8df f003 	tbb	[pc, r3]
 80079de:	7f7d      	.short	0x7f7d
 80079e0:	7131      	.short	0x7131
 80079e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80079e6:	441d      	add	r5, r3
 80079e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80079ec:	2820      	cmp	r0, #32
 80079ee:	dd13      	ble.n	8007a18 <_dtoa_r+0x210>
 80079f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80079f4:	9b00      	ldr	r3, [sp, #0]
 80079f6:	fa08 f800 	lsl.w	r8, r8, r0
 80079fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80079fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007a02:	ea48 0000 	orr.w	r0, r8, r0
 8007a06:	f7f8 fda5 	bl	8000554 <__aeabi_ui2d>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007a12:	3d01      	subs	r5, #1
 8007a14:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a16:	e772      	b.n	80078fe <_dtoa_r+0xf6>
 8007a18:	9b00      	ldr	r3, [sp, #0]
 8007a1a:	f1c0 0020 	rsb	r0, r0, #32
 8007a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007a22:	e7f0      	b.n	8007a06 <_dtoa_r+0x1fe>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e7b1      	b.n	800798c <_dtoa_r+0x184>
 8007a28:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a2a:	e7b0      	b.n	800798e <_dtoa_r+0x186>
 8007a2c:	9b05      	ldr	r3, [sp, #20]
 8007a2e:	eba3 030a 	sub.w	r3, r3, sl
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	f1ca 0300 	rsb	r3, sl, #0
 8007a38:	9307      	str	r3, [sp, #28]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a3e:	e7bb      	b.n	80079b8 <_dtoa_r+0x1b0>
 8007a40:	2301      	movs	r3, #1
 8007a42:	930a      	str	r3, [sp, #40]	; 0x28
 8007a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd59      	ble.n	8007afe <_dtoa_r+0x2f6>
 8007a4a:	9302      	str	r3, [sp, #8]
 8007a4c:	4699      	mov	r9, r3
 8007a4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a50:	2200      	movs	r2, #0
 8007a52:	6072      	str	r2, [r6, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	f102 0014 	add.w	r0, r2, #20
 8007a5a:	4298      	cmp	r0, r3
 8007a5c:	6871      	ldr	r1, [r6, #4]
 8007a5e:	d953      	bls.n	8007b08 <_dtoa_r+0x300>
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fcaa 	bl	80083ba <_Balloc>
 8007a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a68:	6030      	str	r0, [r6, #0]
 8007a6a:	f1b9 0f0e 	cmp.w	r9, #14
 8007a6e:	f8d3 b000 	ldr.w	fp, [r3]
 8007a72:	f200 80e6 	bhi.w	8007c42 <_dtoa_r+0x43a>
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	f000 80e3 	beq.w	8007c42 <_dtoa_r+0x43a>
 8007a7c:	ed9d 7b00 	vldr	d7, [sp]
 8007a80:	f1ba 0f00 	cmp.w	sl, #0
 8007a84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007a88:	dd74      	ble.n	8007b74 <_dtoa_r+0x36c>
 8007a8a:	4a2a      	ldr	r2, [pc, #168]	; (8007b34 <_dtoa_r+0x32c>)
 8007a8c:	f00a 030f 	and.w	r3, sl, #15
 8007a90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a94:	ed93 7b00 	vldr	d7, [r3]
 8007a98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a9c:	06f0      	lsls	r0, r6, #27
 8007a9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007aa2:	d565      	bpl.n	8007b70 <_dtoa_r+0x368>
 8007aa4:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <_dtoa_r+0x330>)
 8007aa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aae:	f7f8 fef5 	bl	800089c <__aeabi_ddiv>
 8007ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ab6:	f006 060f 	and.w	r6, r6, #15
 8007aba:	2503      	movs	r5, #3
 8007abc:	4f1e      	ldr	r7, [pc, #120]	; (8007b38 <_dtoa_r+0x330>)
 8007abe:	e04c      	b.n	8007b5a <_dtoa_r+0x352>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac6:	4453      	add	r3, sl
 8007ac8:	f103 0901 	add.w	r9, r3, #1
 8007acc:	9302      	str	r3, [sp, #8]
 8007ace:	464b      	mov	r3, r9
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bfb8      	it	lt
 8007ad4:	2301      	movlt	r3, #1
 8007ad6:	e7ba      	b.n	8007a4e <_dtoa_r+0x246>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e7b2      	b.n	8007a42 <_dtoa_r+0x23a>
 8007adc:	2300      	movs	r3, #0
 8007ade:	e7f0      	b.n	8007ac2 <_dtoa_r+0x2ba>
 8007ae0:	2501      	movs	r5, #1
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9306      	str	r3, [sp, #24]
 8007ae6:	950a      	str	r5, [sp, #40]	; 0x28
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aec:	9302      	str	r3, [sp, #8]
 8007aee:	4699      	mov	r9, r3
 8007af0:	2200      	movs	r2, #0
 8007af2:	2312      	movs	r3, #18
 8007af4:	920b      	str	r2, [sp, #44]	; 0x2c
 8007af6:	e7aa      	b.n	8007a4e <_dtoa_r+0x246>
 8007af8:	2301      	movs	r3, #1
 8007afa:	930a      	str	r3, [sp, #40]	; 0x28
 8007afc:	e7f4      	b.n	8007ae8 <_dtoa_r+0x2e0>
 8007afe:	2301      	movs	r3, #1
 8007b00:	9302      	str	r3, [sp, #8]
 8007b02:	4699      	mov	r9, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	e7f5      	b.n	8007af4 <_dtoa_r+0x2ec>
 8007b08:	3101      	adds	r1, #1
 8007b0a:	6071      	str	r1, [r6, #4]
 8007b0c:	0052      	lsls	r2, r2, #1
 8007b0e:	e7a2      	b.n	8007a56 <_dtoa_r+0x24e>
 8007b10:	636f4361 	.word	0x636f4361
 8007b14:	3fd287a7 	.word	0x3fd287a7
 8007b18:	8b60c8b3 	.word	0x8b60c8b3
 8007b1c:	3fc68a28 	.word	0x3fc68a28
 8007b20:	509f79fb 	.word	0x509f79fb
 8007b24:	3fd34413 	.word	0x3fd34413
 8007b28:	7ff00000 	.word	0x7ff00000
 8007b2c:	0800a4c5 	.word	0x0800a4c5
 8007b30:	3ff80000 	.word	0x3ff80000
 8007b34:	0800a520 	.word	0x0800a520
 8007b38:	0800a4f8 	.word	0x0800a4f8
 8007b3c:	0800a4f1 	.word	0x0800a4f1
 8007b40:	07f1      	lsls	r1, r6, #31
 8007b42:	d508      	bpl.n	8007b56 <_dtoa_r+0x34e>
 8007b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4c:	f7f8 fd7c 	bl	8000648 <__aeabi_dmul>
 8007b50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b54:	3501      	adds	r5, #1
 8007b56:	1076      	asrs	r6, r6, #1
 8007b58:	3708      	adds	r7, #8
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	d1f0      	bne.n	8007b40 <_dtoa_r+0x338>
 8007b5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b66:	f7f8 fe99 	bl	800089c <__aeabi_ddiv>
 8007b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b6e:	e01a      	b.n	8007ba6 <_dtoa_r+0x39e>
 8007b70:	2502      	movs	r5, #2
 8007b72:	e7a3      	b.n	8007abc <_dtoa_r+0x2b4>
 8007b74:	f000 80a0 	beq.w	8007cb8 <_dtoa_r+0x4b0>
 8007b78:	f1ca 0600 	rsb	r6, sl, #0
 8007b7c:	4b9f      	ldr	r3, [pc, #636]	; (8007dfc <_dtoa_r+0x5f4>)
 8007b7e:	4fa0      	ldr	r7, [pc, #640]	; (8007e00 <_dtoa_r+0x5f8>)
 8007b80:	f006 020f 	and.w	r2, r6, #15
 8007b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b90:	f7f8 fd5a 	bl	8000648 <__aeabi_dmul>
 8007b94:	e9cd 0100 	strd	r0, r1, [sp]
 8007b98:	1136      	asrs	r6, r6, #4
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2502      	movs	r5, #2
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	d17f      	bne.n	8007ca2 <_dtoa_r+0x49a>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e1      	bne.n	8007b6a <_dtoa_r+0x362>
 8007ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8087 	beq.w	8007cbc <_dtoa_r+0x4b4>
 8007bae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4b93      	ldr	r3, [pc, #588]	; (8007e04 <_dtoa_r+0x5fc>)
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	f7f8 ffb7 	bl	8000b2c <__aeabi_dcmplt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d07c      	beq.n	8007cbc <_dtoa_r+0x4b4>
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	d079      	beq.n	8007cbc <_dtoa_r+0x4b4>
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd35      	ble.n	8007c3a <_dtoa_r+0x432>
 8007bce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007bd2:	9308      	str	r3, [sp, #32]
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4b8b      	ldr	r3, [pc, #556]	; (8007e08 <_dtoa_r+0x600>)
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7f8 fd34 	bl	8000648 <__aeabi_dmul>
 8007be0:	e9cd 0100 	strd	r0, r1, [sp]
 8007be4:	9f02      	ldr	r7, [sp, #8]
 8007be6:	3501      	adds	r5, #1
 8007be8:	4628      	mov	r0, r5
 8007bea:	f7f8 fcc3 	bl	8000574 <__aeabi_i2d>
 8007bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf2:	f7f8 fd29 	bl	8000648 <__aeabi_dmul>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4b84      	ldr	r3, [pc, #528]	; (8007e0c <_dtoa_r+0x604>)
 8007bfa:	f7f8 fb6f 	bl	80002dc <__adddf3>
 8007bfe:	4605      	mov	r5, r0
 8007c00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	d15d      	bne.n	8007cc4 <_dtoa_r+0x4bc>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4b81      	ldr	r3, [pc, #516]	; (8007e10 <_dtoa_r+0x608>)
 8007c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c10:	f7f8 fb62 	bl	80002d8 <__aeabi_dsub>
 8007c14:	462a      	mov	r2, r5
 8007c16:	4633      	mov	r3, r6
 8007c18:	e9cd 0100 	strd	r0, r1, [sp]
 8007c1c:	f7f8 ffa4 	bl	8000b68 <__aeabi_dcmpgt>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f040 8288 	bne.w	8008136 <_dtoa_r+0x92e>
 8007c26:	462a      	mov	r2, r5
 8007c28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c30:	f7f8 ff7c 	bl	8000b2c <__aeabi_dcmplt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 827c 	bne.w	8008132 <_dtoa_r+0x92a>
 8007c3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c3e:	e9cd 2300 	strd	r2, r3, [sp]
 8007c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f2c0 8150 	blt.w	8007eea <_dtoa_r+0x6e2>
 8007c4a:	f1ba 0f0e 	cmp.w	sl, #14
 8007c4e:	f300 814c 	bgt.w	8007eea <_dtoa_r+0x6e2>
 8007c52:	4b6a      	ldr	r3, [pc, #424]	; (8007dfc <_dtoa_r+0x5f4>)
 8007c54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c58:	ed93 7b00 	vldr	d7, [r3]
 8007c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c64:	f280 80d8 	bge.w	8007e18 <_dtoa_r+0x610>
 8007c68:	f1b9 0f00 	cmp.w	r9, #0
 8007c6c:	f300 80d4 	bgt.w	8007e18 <_dtoa_r+0x610>
 8007c70:	f040 825e 	bne.w	8008130 <_dtoa_r+0x928>
 8007c74:	2200      	movs	r2, #0
 8007c76:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <_dtoa_r+0x608>)
 8007c78:	ec51 0b17 	vmov	r0, r1, d7
 8007c7c:	f7f8 fce4 	bl	8000648 <__aeabi_dmul>
 8007c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c84:	f7f8 ff66 	bl	8000b54 <__aeabi_dcmpge>
 8007c88:	464f      	mov	r7, r9
 8007c8a:	464e      	mov	r6, r9
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	f040 8234 	bne.w	80080fa <_dtoa_r+0x8f2>
 8007c92:	2331      	movs	r3, #49	; 0x31
 8007c94:	f10b 0501 	add.w	r5, fp, #1
 8007c98:	f88b 3000 	strb.w	r3, [fp]
 8007c9c:	f10a 0a01 	add.w	sl, sl, #1
 8007ca0:	e22f      	b.n	8008102 <_dtoa_r+0x8fa>
 8007ca2:	07f2      	lsls	r2, r6, #31
 8007ca4:	d505      	bpl.n	8007cb2 <_dtoa_r+0x4aa>
 8007ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007caa:	f7f8 fccd 	bl	8000648 <__aeabi_dmul>
 8007cae:	3501      	adds	r5, #1
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	1076      	asrs	r6, r6, #1
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	e772      	b.n	8007b9e <_dtoa_r+0x396>
 8007cb8:	2502      	movs	r5, #2
 8007cba:	e774      	b.n	8007ba6 <_dtoa_r+0x39e>
 8007cbc:	f8cd a020 	str.w	sl, [sp, #32]
 8007cc0:	464f      	mov	r7, r9
 8007cc2:	e791      	b.n	8007be8 <_dtoa_r+0x3e0>
 8007cc4:	4b4d      	ldr	r3, [pc, #308]	; (8007dfc <_dtoa_r+0x5f4>)
 8007cc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d047      	beq.n	8007d64 <_dtoa_r+0x55c>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	2000      	movs	r0, #0
 8007cda:	494e      	ldr	r1, [pc, #312]	; (8007e14 <_dtoa_r+0x60c>)
 8007cdc:	f7f8 fdde 	bl	800089c <__aeabi_ddiv>
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4633      	mov	r3, r6
 8007ce4:	f7f8 faf8 	bl	80002d8 <__aeabi_dsub>
 8007ce8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cec:	465d      	mov	r5, fp
 8007cee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cf2:	f7f8 ff59 	bl	8000ba8 <__aeabi_d2iz>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	f7f8 fc3c 	bl	8000574 <__aeabi_i2d>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d04:	f7f8 fae8 	bl	80002d8 <__aeabi_dsub>
 8007d08:	3630      	adds	r6, #48	; 0x30
 8007d0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d12:	e9cd 0100 	strd	r0, r1, [sp]
 8007d16:	f7f8 ff09 	bl	8000b2c <__aeabi_dcmplt>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d163      	bne.n	8007de6 <_dtoa_r+0x5de>
 8007d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d22:	2000      	movs	r0, #0
 8007d24:	4937      	ldr	r1, [pc, #220]	; (8007e04 <_dtoa_r+0x5fc>)
 8007d26:	f7f8 fad7 	bl	80002d8 <__aeabi_dsub>
 8007d2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d2e:	f7f8 fefd 	bl	8000b2c <__aeabi_dcmplt>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f040 80b7 	bne.w	8007ea6 <_dtoa_r+0x69e>
 8007d38:	eba5 030b 	sub.w	r3, r5, fp
 8007d3c:	429f      	cmp	r7, r3
 8007d3e:	f77f af7c 	ble.w	8007c3a <_dtoa_r+0x432>
 8007d42:	2200      	movs	r2, #0
 8007d44:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <_dtoa_r+0x600>)
 8007d46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d4a:	f7f8 fc7d 	bl	8000648 <__aeabi_dmul>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d54:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <_dtoa_r+0x600>)
 8007d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d5a:	f7f8 fc75 	bl	8000648 <__aeabi_dmul>
 8007d5e:	e9cd 0100 	strd	r0, r1, [sp]
 8007d62:	e7c4      	b.n	8007cee <_dtoa_r+0x4e6>
 8007d64:	462a      	mov	r2, r5
 8007d66:	4633      	mov	r3, r6
 8007d68:	f7f8 fc6e 	bl	8000648 <__aeabi_dmul>
 8007d6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d70:	eb0b 0507 	add.w	r5, fp, r7
 8007d74:	465e      	mov	r6, fp
 8007d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d7a:	f7f8 ff15 	bl	8000ba8 <__aeabi_d2iz>
 8007d7e:	4607      	mov	r7, r0
 8007d80:	f7f8 fbf8 	bl	8000574 <__aeabi_i2d>
 8007d84:	3730      	adds	r7, #48	; 0x30
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d8e:	f7f8 faa3 	bl	80002d8 <__aeabi_dsub>
 8007d92:	f806 7b01 	strb.w	r7, [r6], #1
 8007d96:	42ae      	cmp	r6, r5
 8007d98:	e9cd 0100 	strd	r0, r1, [sp]
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	d126      	bne.n	8007df0 <_dtoa_r+0x5e8>
 8007da2:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <_dtoa_r+0x60c>)
 8007da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da8:	f7f8 fa98 	bl	80002dc <__adddf3>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db4:	f7f8 fed8 	bl	8000b68 <__aeabi_dcmpgt>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d174      	bne.n	8007ea6 <_dtoa_r+0x69e>
 8007dbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4914      	ldr	r1, [pc, #80]	; (8007e14 <_dtoa_r+0x60c>)
 8007dc4:	f7f8 fa88 	bl	80002d8 <__aeabi_dsub>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dd0:	f7f8 feac 	bl	8000b2c <__aeabi_dcmplt>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f43f af30 	beq.w	8007c3a <_dtoa_r+0x432>
 8007dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dde:	2b30      	cmp	r3, #48	; 0x30
 8007de0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007de4:	d002      	beq.n	8007dec <_dtoa_r+0x5e4>
 8007de6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007dea:	e04a      	b.n	8007e82 <_dtoa_r+0x67a>
 8007dec:	4615      	mov	r5, r2
 8007dee:	e7f4      	b.n	8007dda <_dtoa_r+0x5d2>
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <_dtoa_r+0x600>)
 8007df2:	f7f8 fc29 	bl	8000648 <__aeabi_dmul>
 8007df6:	e9cd 0100 	strd	r0, r1, [sp]
 8007dfa:	e7bc      	b.n	8007d76 <_dtoa_r+0x56e>
 8007dfc:	0800a520 	.word	0x0800a520
 8007e00:	0800a4f8 	.word	0x0800a4f8
 8007e04:	3ff00000 	.word	0x3ff00000
 8007e08:	40240000 	.word	0x40240000
 8007e0c:	401c0000 	.word	0x401c0000
 8007e10:	40140000 	.word	0x40140000
 8007e14:	3fe00000 	.word	0x3fe00000
 8007e18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e1c:	465d      	mov	r5, fp
 8007e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e22:	4630      	mov	r0, r6
 8007e24:	4639      	mov	r1, r7
 8007e26:	f7f8 fd39 	bl	800089c <__aeabi_ddiv>
 8007e2a:	f7f8 febd 	bl	8000ba8 <__aeabi_d2iz>
 8007e2e:	4680      	mov	r8, r0
 8007e30:	f7f8 fba0 	bl	8000574 <__aeabi_i2d>
 8007e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e38:	f7f8 fc06 	bl	8000648 <__aeabi_dmul>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007e48:	f7f8 fa46 	bl	80002d8 <__aeabi_dsub>
 8007e4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e50:	eba5 060b 	sub.w	r6, r5, fp
 8007e54:	45b1      	cmp	r9, r6
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	d139      	bne.n	8007ed0 <_dtoa_r+0x6c8>
 8007e5c:	f7f8 fa3e 	bl	80002dc <__adddf3>
 8007e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	f7f8 fe7e 	bl	8000b68 <__aeabi_dcmpgt>
 8007e6c:	b9c8      	cbnz	r0, 8007ea2 <_dtoa_r+0x69a>
 8007e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fe4f 	bl	8000b18 <__aeabi_dcmpeq>
 8007e7a:	b110      	cbz	r0, 8007e82 <_dtoa_r+0x67a>
 8007e7c:	f018 0f01 	tst.w	r8, #1
 8007e80:	d10f      	bne.n	8007ea2 <_dtoa_r+0x69a>
 8007e82:	9904      	ldr	r1, [sp, #16]
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 facc 	bl	8008422 <_Bfree>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e8e:	702b      	strb	r3, [r5, #0]
 8007e90:	f10a 0301 	add.w	r3, sl, #1
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8241 	beq.w	8008320 <_dtoa_r+0xb18>
 8007e9e:	601d      	str	r5, [r3, #0]
 8007ea0:	e23e      	b.n	8008320 <_dtoa_r+0xb18>
 8007ea2:	f8cd a020 	str.w	sl, [sp, #32]
 8007ea6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eaa:	2a39      	cmp	r2, #57	; 0x39
 8007eac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007eb0:	d108      	bne.n	8007ec4 <_dtoa_r+0x6bc>
 8007eb2:	459b      	cmp	fp, r3
 8007eb4:	d10a      	bne.n	8007ecc <_dtoa_r+0x6c4>
 8007eb6:	9b08      	ldr	r3, [sp, #32]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	9308      	str	r3, [sp, #32]
 8007ebc:	2330      	movs	r3, #48	; 0x30
 8007ebe:	f88b 3000 	strb.w	r3, [fp]
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	3201      	adds	r2, #1
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	e78c      	b.n	8007de6 <_dtoa_r+0x5de>
 8007ecc:	461d      	mov	r5, r3
 8007ece:	e7ea      	b.n	8007ea6 <_dtoa_r+0x69e>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4b9b      	ldr	r3, [pc, #620]	; (8008140 <_dtoa_r+0x938>)
 8007ed4:	f7f8 fbb8 	bl	8000648 <__aeabi_dmul>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2300      	movs	r3, #0
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	f7f8 fe1a 	bl	8000b18 <__aeabi_dcmpeq>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d09a      	beq.n	8007e1e <_dtoa_r+0x616>
 8007ee8:	e7cb      	b.n	8007e82 <_dtoa_r+0x67a>
 8007eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	f000 808b 	beq.w	8008008 <_dtoa_r+0x800>
 8007ef2:	9a06      	ldr	r2, [sp, #24]
 8007ef4:	2a01      	cmp	r2, #1
 8007ef6:	dc6e      	bgt.n	8007fd6 <_dtoa_r+0x7ce>
 8007ef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d067      	beq.n	8007fce <_dtoa_r+0x7c6>
 8007efe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f02:	9f07      	ldr	r7, [sp, #28]
 8007f04:	9d05      	ldr	r5, [sp, #20]
 8007f06:	9a05      	ldr	r2, [sp, #20]
 8007f08:	2101      	movs	r1, #1
 8007f0a:	441a      	add	r2, r3
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	9205      	str	r2, [sp, #20]
 8007f10:	4498      	add	r8, r3
 8007f12:	f000 fb26 	bl	8008562 <__i2b>
 8007f16:	4606      	mov	r6, r0
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	dd0c      	ble.n	8007f36 <_dtoa_r+0x72e>
 8007f1c:	f1b8 0f00 	cmp.w	r8, #0
 8007f20:	dd09      	ble.n	8007f36 <_dtoa_r+0x72e>
 8007f22:	4545      	cmp	r5, r8
 8007f24:	9a05      	ldr	r2, [sp, #20]
 8007f26:	462b      	mov	r3, r5
 8007f28:	bfa8      	it	ge
 8007f2a:	4643      	movge	r3, r8
 8007f2c:	1ad2      	subs	r2, r2, r3
 8007f2e:	9205      	str	r2, [sp, #20]
 8007f30:	1aed      	subs	r5, r5, r3
 8007f32:	eba8 0803 	sub.w	r8, r8, r3
 8007f36:	9b07      	ldr	r3, [sp, #28]
 8007f38:	b1eb      	cbz	r3, 8007f76 <_dtoa_r+0x76e>
 8007f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d067      	beq.n	8008010 <_dtoa_r+0x808>
 8007f40:	b18f      	cbz	r7, 8007f66 <_dtoa_r+0x75e>
 8007f42:	4631      	mov	r1, r6
 8007f44:	463a      	mov	r2, r7
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 fbaa 	bl	80086a0 <__pow5mult>
 8007f4c:	9a04      	ldr	r2, [sp, #16]
 8007f4e:	4601      	mov	r1, r0
 8007f50:	4606      	mov	r6, r0
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 fb0e 	bl	8008574 <__multiply>
 8007f58:	9904      	ldr	r1, [sp, #16]
 8007f5a:	9008      	str	r0, [sp, #32]
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fa60 	bl	8008422 <_Bfree>
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	9304      	str	r3, [sp, #16]
 8007f66:	9b07      	ldr	r3, [sp, #28]
 8007f68:	1bda      	subs	r2, r3, r7
 8007f6a:	d004      	beq.n	8007f76 <_dtoa_r+0x76e>
 8007f6c:	9904      	ldr	r1, [sp, #16]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fb96 	bl	80086a0 <__pow5mult>
 8007f74:	9004      	str	r0, [sp, #16]
 8007f76:	2101      	movs	r1, #1
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f000 faf2 	bl	8008562 <__i2b>
 8007f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f80:	4607      	mov	r7, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 81d0 	beq.w	8008328 <_dtoa_r+0xb20>
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f000 fb87 	bl	80086a0 <__pow5mult>
 8007f92:	9b06      	ldr	r3, [sp, #24]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	4607      	mov	r7, r0
 8007f98:	dc40      	bgt.n	800801c <_dtoa_r+0x814>
 8007f9a:	9b00      	ldr	r3, [sp, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d139      	bne.n	8008014 <_dtoa_r+0x80c>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d136      	bne.n	8008018 <_dtoa_r+0x810>
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fb0:	0d1b      	lsrs	r3, r3, #20
 8007fb2:	051b      	lsls	r3, r3, #20
 8007fb4:	b12b      	cbz	r3, 8007fc2 <_dtoa_r+0x7ba>
 8007fb6:	9b05      	ldr	r3, [sp, #20]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	f108 0801 	add.w	r8, r8, #1
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	9307      	str	r3, [sp, #28]
 8007fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d12a      	bne.n	8008020 <_dtoa_r+0x818>
 8007fca:	2001      	movs	r0, #1
 8007fcc:	e030      	b.n	8008030 <_dtoa_r+0x828>
 8007fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fd4:	e795      	b.n	8007f02 <_dtoa_r+0x6fa>
 8007fd6:	9b07      	ldr	r3, [sp, #28]
 8007fd8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007fdc:	42bb      	cmp	r3, r7
 8007fde:	bfbf      	itttt	lt
 8007fe0:	9b07      	ldrlt	r3, [sp, #28]
 8007fe2:	9707      	strlt	r7, [sp, #28]
 8007fe4:	1afa      	sublt	r2, r7, r3
 8007fe6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007fe8:	bfbb      	ittet	lt
 8007fea:	189b      	addlt	r3, r3, r2
 8007fec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007fee:	1bdf      	subge	r7, r3, r7
 8007ff0:	2700      	movlt	r7, #0
 8007ff2:	f1b9 0f00 	cmp.w	r9, #0
 8007ff6:	bfb5      	itete	lt
 8007ff8:	9b05      	ldrlt	r3, [sp, #20]
 8007ffa:	9d05      	ldrge	r5, [sp, #20]
 8007ffc:	eba3 0509 	sublt.w	r5, r3, r9
 8008000:	464b      	movge	r3, r9
 8008002:	bfb8      	it	lt
 8008004:	2300      	movlt	r3, #0
 8008006:	e77e      	b.n	8007f06 <_dtoa_r+0x6fe>
 8008008:	9f07      	ldr	r7, [sp, #28]
 800800a:	9d05      	ldr	r5, [sp, #20]
 800800c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800800e:	e783      	b.n	8007f18 <_dtoa_r+0x710>
 8008010:	9a07      	ldr	r2, [sp, #28]
 8008012:	e7ab      	b.n	8007f6c <_dtoa_r+0x764>
 8008014:	2300      	movs	r3, #0
 8008016:	e7d4      	b.n	8007fc2 <_dtoa_r+0x7ba>
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	e7d2      	b.n	8007fc2 <_dtoa_r+0x7ba>
 800801c:	2300      	movs	r3, #0
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008026:	6918      	ldr	r0, [r3, #16]
 8008028:	f000 fa4d 	bl	80084c6 <__hi0bits>
 800802c:	f1c0 0020 	rsb	r0, r0, #32
 8008030:	4440      	add	r0, r8
 8008032:	f010 001f 	ands.w	r0, r0, #31
 8008036:	d047      	beq.n	80080c8 <_dtoa_r+0x8c0>
 8008038:	f1c0 0320 	rsb	r3, r0, #32
 800803c:	2b04      	cmp	r3, #4
 800803e:	dd3b      	ble.n	80080b8 <_dtoa_r+0x8b0>
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	f1c0 001c 	rsb	r0, r0, #28
 8008046:	4403      	add	r3, r0
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4405      	add	r5, r0
 800804c:	4480      	add	r8, r0
 800804e:	9b05      	ldr	r3, [sp, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	dd05      	ble.n	8008060 <_dtoa_r+0x858>
 8008054:	461a      	mov	r2, r3
 8008056:	9904      	ldr	r1, [sp, #16]
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fb6f 	bl	800873c <__lshift>
 800805e:	9004      	str	r0, [sp, #16]
 8008060:	f1b8 0f00 	cmp.w	r8, #0
 8008064:	dd05      	ble.n	8008072 <_dtoa_r+0x86a>
 8008066:	4639      	mov	r1, r7
 8008068:	4642      	mov	r2, r8
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fb66 	bl	800873c <__lshift>
 8008070:	4607      	mov	r7, r0
 8008072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008074:	b353      	cbz	r3, 80080cc <_dtoa_r+0x8c4>
 8008076:	4639      	mov	r1, r7
 8008078:	9804      	ldr	r0, [sp, #16]
 800807a:	f000 fbb3 	bl	80087e4 <__mcmp>
 800807e:	2800      	cmp	r0, #0
 8008080:	da24      	bge.n	80080cc <_dtoa_r+0x8c4>
 8008082:	2300      	movs	r3, #0
 8008084:	220a      	movs	r2, #10
 8008086:	9904      	ldr	r1, [sp, #16]
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f9e1 	bl	8008450 <__multadd>
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	9004      	str	r0, [sp, #16]
 8008092:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 814d 	beq.w	8008336 <_dtoa_r+0xb2e>
 800809c:	2300      	movs	r3, #0
 800809e:	4631      	mov	r1, r6
 80080a0:	220a      	movs	r2, #10
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f9d4 	bl	8008450 <__multadd>
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	4606      	mov	r6, r0
 80080ae:	dc4f      	bgt.n	8008150 <_dtoa_r+0x948>
 80080b0:	9b06      	ldr	r3, [sp, #24]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	dd4c      	ble.n	8008150 <_dtoa_r+0x948>
 80080b6:	e011      	b.n	80080dc <_dtoa_r+0x8d4>
 80080b8:	d0c9      	beq.n	800804e <_dtoa_r+0x846>
 80080ba:	9a05      	ldr	r2, [sp, #20]
 80080bc:	331c      	adds	r3, #28
 80080be:	441a      	add	r2, r3
 80080c0:	9205      	str	r2, [sp, #20]
 80080c2:	441d      	add	r5, r3
 80080c4:	4498      	add	r8, r3
 80080c6:	e7c2      	b.n	800804e <_dtoa_r+0x846>
 80080c8:	4603      	mov	r3, r0
 80080ca:	e7f6      	b.n	80080ba <_dtoa_r+0x8b2>
 80080cc:	f1b9 0f00 	cmp.w	r9, #0
 80080d0:	dc38      	bgt.n	8008144 <_dtoa_r+0x93c>
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	dd35      	ble.n	8008144 <_dtoa_r+0x93c>
 80080d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80080dc:	9b02      	ldr	r3, [sp, #8]
 80080de:	b963      	cbnz	r3, 80080fa <_dtoa_r+0x8f2>
 80080e0:	4639      	mov	r1, r7
 80080e2:	2205      	movs	r2, #5
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f9b3 	bl	8008450 <__multadd>
 80080ea:	4601      	mov	r1, r0
 80080ec:	4607      	mov	r7, r0
 80080ee:	9804      	ldr	r0, [sp, #16]
 80080f0:	f000 fb78 	bl	80087e4 <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f73f adcc 	bgt.w	8007c92 <_dtoa_r+0x48a>
 80080fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080fc:	465d      	mov	r5, fp
 80080fe:	ea6f 0a03 	mvn.w	sl, r3
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	4639      	mov	r1, r7
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f98a 	bl	8008422 <_Bfree>
 800810e:	2e00      	cmp	r6, #0
 8008110:	f43f aeb7 	beq.w	8007e82 <_dtoa_r+0x67a>
 8008114:	f1b9 0f00 	cmp.w	r9, #0
 8008118:	d005      	beq.n	8008126 <_dtoa_r+0x91e>
 800811a:	45b1      	cmp	r9, r6
 800811c:	d003      	beq.n	8008126 <_dtoa_r+0x91e>
 800811e:	4649      	mov	r1, r9
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f97e 	bl	8008422 <_Bfree>
 8008126:	4631      	mov	r1, r6
 8008128:	4620      	mov	r0, r4
 800812a:	f000 f97a 	bl	8008422 <_Bfree>
 800812e:	e6a8      	b.n	8007e82 <_dtoa_r+0x67a>
 8008130:	2700      	movs	r7, #0
 8008132:	463e      	mov	r6, r7
 8008134:	e7e1      	b.n	80080fa <_dtoa_r+0x8f2>
 8008136:	f8dd a020 	ldr.w	sl, [sp, #32]
 800813a:	463e      	mov	r6, r7
 800813c:	e5a9      	b.n	8007c92 <_dtoa_r+0x48a>
 800813e:	bf00      	nop
 8008140:	40240000 	.word	0x40240000
 8008144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008146:	f8cd 9008 	str.w	r9, [sp, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80fa 	beq.w	8008344 <_dtoa_r+0xb3c>
 8008150:	2d00      	cmp	r5, #0
 8008152:	dd05      	ble.n	8008160 <_dtoa_r+0x958>
 8008154:	4631      	mov	r1, r6
 8008156:	462a      	mov	r2, r5
 8008158:	4620      	mov	r0, r4
 800815a:	f000 faef 	bl	800873c <__lshift>
 800815e:	4606      	mov	r6, r0
 8008160:	9b07      	ldr	r3, [sp, #28]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d04c      	beq.n	8008200 <_dtoa_r+0x9f8>
 8008166:	6871      	ldr	r1, [r6, #4]
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f926 	bl	80083ba <_Balloc>
 800816e:	6932      	ldr	r2, [r6, #16]
 8008170:	3202      	adds	r2, #2
 8008172:	4605      	mov	r5, r0
 8008174:	0092      	lsls	r2, r2, #2
 8008176:	f106 010c 	add.w	r1, r6, #12
 800817a:	300c      	adds	r0, #12
 800817c:	f000 f912 	bl	80083a4 <memcpy>
 8008180:	2201      	movs	r2, #1
 8008182:	4629      	mov	r1, r5
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fad9 	bl	800873c <__lshift>
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	f8cd b014 	str.w	fp, [sp, #20]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	46b1      	mov	r9, r6
 8008196:	9307      	str	r3, [sp, #28]
 8008198:	4606      	mov	r6, r0
 800819a:	4639      	mov	r1, r7
 800819c:	9804      	ldr	r0, [sp, #16]
 800819e:	f7ff faa7 	bl	80076f0 <quorem>
 80081a2:	4649      	mov	r1, r9
 80081a4:	4605      	mov	r5, r0
 80081a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80081aa:	9804      	ldr	r0, [sp, #16]
 80081ac:	f000 fb1a 	bl	80087e4 <__mcmp>
 80081b0:	4632      	mov	r2, r6
 80081b2:	9000      	str	r0, [sp, #0]
 80081b4:	4639      	mov	r1, r7
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 fb2e 	bl	8008818 <__mdiff>
 80081bc:	68c3      	ldr	r3, [r0, #12]
 80081be:	4602      	mov	r2, r0
 80081c0:	bb03      	cbnz	r3, 8008204 <_dtoa_r+0x9fc>
 80081c2:	4601      	mov	r1, r0
 80081c4:	9008      	str	r0, [sp, #32]
 80081c6:	9804      	ldr	r0, [sp, #16]
 80081c8:	f000 fb0c 	bl	80087e4 <__mcmp>
 80081cc:	9a08      	ldr	r2, [sp, #32]
 80081ce:	4603      	mov	r3, r0
 80081d0:	4611      	mov	r1, r2
 80081d2:	4620      	mov	r0, r4
 80081d4:	9308      	str	r3, [sp, #32]
 80081d6:	f000 f924 	bl	8008422 <_Bfree>
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	b9a3      	cbnz	r3, 8008208 <_dtoa_r+0xa00>
 80081de:	9a06      	ldr	r2, [sp, #24]
 80081e0:	b992      	cbnz	r2, 8008208 <_dtoa_r+0xa00>
 80081e2:	9a07      	ldr	r2, [sp, #28]
 80081e4:	b982      	cbnz	r2, 8008208 <_dtoa_r+0xa00>
 80081e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081ea:	d029      	beq.n	8008240 <_dtoa_r+0xa38>
 80081ec:	9b00      	ldr	r3, [sp, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dd01      	ble.n	80081f6 <_dtoa_r+0x9ee>
 80081f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80081f6:	9b05      	ldr	r3, [sp, #20]
 80081f8:	1c5d      	adds	r5, r3, #1
 80081fa:	f883 8000 	strb.w	r8, [r3]
 80081fe:	e782      	b.n	8008106 <_dtoa_r+0x8fe>
 8008200:	4630      	mov	r0, r6
 8008202:	e7c2      	b.n	800818a <_dtoa_r+0x982>
 8008204:	2301      	movs	r3, #1
 8008206:	e7e3      	b.n	80081d0 <_dtoa_r+0x9c8>
 8008208:	9a00      	ldr	r2, [sp, #0]
 800820a:	2a00      	cmp	r2, #0
 800820c:	db04      	blt.n	8008218 <_dtoa_r+0xa10>
 800820e:	d125      	bne.n	800825c <_dtoa_r+0xa54>
 8008210:	9a06      	ldr	r2, [sp, #24]
 8008212:	bb1a      	cbnz	r2, 800825c <_dtoa_r+0xa54>
 8008214:	9a07      	ldr	r2, [sp, #28]
 8008216:	bb0a      	cbnz	r2, 800825c <_dtoa_r+0xa54>
 8008218:	2b00      	cmp	r3, #0
 800821a:	ddec      	ble.n	80081f6 <_dtoa_r+0x9ee>
 800821c:	2201      	movs	r2, #1
 800821e:	9904      	ldr	r1, [sp, #16]
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fa8b 	bl	800873c <__lshift>
 8008226:	4639      	mov	r1, r7
 8008228:	9004      	str	r0, [sp, #16]
 800822a:	f000 fadb 	bl	80087e4 <__mcmp>
 800822e:	2800      	cmp	r0, #0
 8008230:	dc03      	bgt.n	800823a <_dtoa_r+0xa32>
 8008232:	d1e0      	bne.n	80081f6 <_dtoa_r+0x9ee>
 8008234:	f018 0f01 	tst.w	r8, #1
 8008238:	d0dd      	beq.n	80081f6 <_dtoa_r+0x9ee>
 800823a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800823e:	d1d8      	bne.n	80081f2 <_dtoa_r+0x9ea>
 8008240:	9b05      	ldr	r3, [sp, #20]
 8008242:	9a05      	ldr	r2, [sp, #20]
 8008244:	1c5d      	adds	r5, r3, #1
 8008246:	2339      	movs	r3, #57	; 0x39
 8008248:	7013      	strb	r3, [r2, #0]
 800824a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800824e:	2b39      	cmp	r3, #57	; 0x39
 8008250:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008254:	d04f      	beq.n	80082f6 <_dtoa_r+0xaee>
 8008256:	3301      	adds	r3, #1
 8008258:	7013      	strb	r3, [r2, #0]
 800825a:	e754      	b.n	8008106 <_dtoa_r+0x8fe>
 800825c:	9a05      	ldr	r2, [sp, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f102 0501 	add.w	r5, r2, #1
 8008264:	dd06      	ble.n	8008274 <_dtoa_r+0xa6c>
 8008266:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800826a:	d0e9      	beq.n	8008240 <_dtoa_r+0xa38>
 800826c:	f108 0801 	add.w	r8, r8, #1
 8008270:	9b05      	ldr	r3, [sp, #20]
 8008272:	e7c2      	b.n	80081fa <_dtoa_r+0x9f2>
 8008274:	9a02      	ldr	r2, [sp, #8]
 8008276:	f805 8c01 	strb.w	r8, [r5, #-1]
 800827a:	eba5 030b 	sub.w	r3, r5, fp
 800827e:	4293      	cmp	r3, r2
 8008280:	d021      	beq.n	80082c6 <_dtoa_r+0xabe>
 8008282:	2300      	movs	r3, #0
 8008284:	220a      	movs	r2, #10
 8008286:	9904      	ldr	r1, [sp, #16]
 8008288:	4620      	mov	r0, r4
 800828a:	f000 f8e1 	bl	8008450 <__multadd>
 800828e:	45b1      	cmp	r9, r6
 8008290:	9004      	str	r0, [sp, #16]
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	f04f 020a 	mov.w	r2, #10
 800829a:	4649      	mov	r1, r9
 800829c:	4620      	mov	r0, r4
 800829e:	d105      	bne.n	80082ac <_dtoa_r+0xaa4>
 80082a0:	f000 f8d6 	bl	8008450 <__multadd>
 80082a4:	4681      	mov	r9, r0
 80082a6:	4606      	mov	r6, r0
 80082a8:	9505      	str	r5, [sp, #20]
 80082aa:	e776      	b.n	800819a <_dtoa_r+0x992>
 80082ac:	f000 f8d0 	bl	8008450 <__multadd>
 80082b0:	4631      	mov	r1, r6
 80082b2:	4681      	mov	r9, r0
 80082b4:	2300      	movs	r3, #0
 80082b6:	220a      	movs	r2, #10
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f8c9 	bl	8008450 <__multadd>
 80082be:	4606      	mov	r6, r0
 80082c0:	e7f2      	b.n	80082a8 <_dtoa_r+0xaa0>
 80082c2:	f04f 0900 	mov.w	r9, #0
 80082c6:	2201      	movs	r2, #1
 80082c8:	9904      	ldr	r1, [sp, #16]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fa36 	bl	800873c <__lshift>
 80082d0:	4639      	mov	r1, r7
 80082d2:	9004      	str	r0, [sp, #16]
 80082d4:	f000 fa86 	bl	80087e4 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	dcb6      	bgt.n	800824a <_dtoa_r+0xa42>
 80082dc:	d102      	bne.n	80082e4 <_dtoa_r+0xadc>
 80082de:	f018 0f01 	tst.w	r8, #1
 80082e2:	d1b2      	bne.n	800824a <_dtoa_r+0xa42>
 80082e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082e8:	2b30      	cmp	r3, #48	; 0x30
 80082ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80082ee:	f47f af0a 	bne.w	8008106 <_dtoa_r+0x8fe>
 80082f2:	4615      	mov	r5, r2
 80082f4:	e7f6      	b.n	80082e4 <_dtoa_r+0xadc>
 80082f6:	4593      	cmp	fp, r2
 80082f8:	d105      	bne.n	8008306 <_dtoa_r+0xafe>
 80082fa:	2331      	movs	r3, #49	; 0x31
 80082fc:	f10a 0a01 	add.w	sl, sl, #1
 8008300:	f88b 3000 	strb.w	r3, [fp]
 8008304:	e6ff      	b.n	8008106 <_dtoa_r+0x8fe>
 8008306:	4615      	mov	r5, r2
 8008308:	e79f      	b.n	800824a <_dtoa_r+0xa42>
 800830a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008370 <_dtoa_r+0xb68>
 800830e:	e007      	b.n	8008320 <_dtoa_r+0xb18>
 8008310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008312:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008374 <_dtoa_r+0xb6c>
 8008316:	b11b      	cbz	r3, 8008320 <_dtoa_r+0xb18>
 8008318:	f10b 0308 	add.w	r3, fp, #8
 800831c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	4658      	mov	r0, fp
 8008322:	b017      	add	sp, #92	; 0x5c
 8008324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	9b06      	ldr	r3, [sp, #24]
 800832a:	2b01      	cmp	r3, #1
 800832c:	f77f ae35 	ble.w	8007f9a <_dtoa_r+0x792>
 8008330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	e649      	b.n	8007fca <_dtoa_r+0x7c2>
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	dc03      	bgt.n	8008344 <_dtoa_r+0xb3c>
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	2b02      	cmp	r3, #2
 8008340:	f73f aecc 	bgt.w	80080dc <_dtoa_r+0x8d4>
 8008344:	465d      	mov	r5, fp
 8008346:	4639      	mov	r1, r7
 8008348:	9804      	ldr	r0, [sp, #16]
 800834a:	f7ff f9d1 	bl	80076f0 <quorem>
 800834e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008352:	f805 8b01 	strb.w	r8, [r5], #1
 8008356:	9a02      	ldr	r2, [sp, #8]
 8008358:	eba5 030b 	sub.w	r3, r5, fp
 800835c:	429a      	cmp	r2, r3
 800835e:	ddb0      	ble.n	80082c2 <_dtoa_r+0xaba>
 8008360:	2300      	movs	r3, #0
 8008362:	220a      	movs	r2, #10
 8008364:	9904      	ldr	r1, [sp, #16]
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f872 	bl	8008450 <__multadd>
 800836c:	9004      	str	r0, [sp, #16]
 800836e:	e7ea      	b.n	8008346 <_dtoa_r+0xb3e>
 8008370:	0800a4c4 	.word	0x0800a4c4
 8008374:	0800a4e8 	.word	0x0800a4e8

08008378 <_localeconv_r>:
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <_localeconv_r+0x14>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6a18      	ldr	r0, [r3, #32]
 800837e:	4b04      	ldr	r3, [pc, #16]	; (8008390 <_localeconv_r+0x18>)
 8008380:	2800      	cmp	r0, #0
 8008382:	bf08      	it	eq
 8008384:	4618      	moveq	r0, r3
 8008386:	30f0      	adds	r0, #240	; 0xf0
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000060 	.word	0x20000060
 8008390:	200000c4 	.word	0x200000c4

08008394 <malloc>:
 8008394:	4b02      	ldr	r3, [pc, #8]	; (80083a0 <malloc+0xc>)
 8008396:	4601      	mov	r1, r0
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f000 bb45 	b.w	8008a28 <_malloc_r>
 800839e:	bf00      	nop
 80083a0:	20000060 	.word	0x20000060

080083a4 <memcpy>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	1e43      	subs	r3, r0, #1
 80083a8:	440a      	add	r2, r1
 80083aa:	4291      	cmp	r1, r2
 80083ac:	d100      	bne.n	80083b0 <memcpy+0xc>
 80083ae:	bd10      	pop	{r4, pc}
 80083b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b8:	e7f7      	b.n	80083aa <memcpy+0x6>

080083ba <_Balloc>:
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083be:	4604      	mov	r4, r0
 80083c0:	460e      	mov	r6, r1
 80083c2:	b93d      	cbnz	r5, 80083d4 <_Balloc+0x1a>
 80083c4:	2010      	movs	r0, #16
 80083c6:	f7ff ffe5 	bl	8008394 <malloc>
 80083ca:	6260      	str	r0, [r4, #36]	; 0x24
 80083cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083d0:	6005      	str	r5, [r0, #0]
 80083d2:	60c5      	str	r5, [r0, #12]
 80083d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80083d6:	68eb      	ldr	r3, [r5, #12]
 80083d8:	b183      	cbz	r3, 80083fc <_Balloc+0x42>
 80083da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80083e2:	b9b8      	cbnz	r0, 8008414 <_Balloc+0x5a>
 80083e4:	2101      	movs	r1, #1
 80083e6:	fa01 f506 	lsl.w	r5, r1, r6
 80083ea:	1d6a      	adds	r2, r5, #5
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 fabe 	bl	8008970 <_calloc_r>
 80083f4:	b160      	cbz	r0, 8008410 <_Balloc+0x56>
 80083f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80083fa:	e00e      	b.n	800841a <_Balloc+0x60>
 80083fc:	2221      	movs	r2, #33	; 0x21
 80083fe:	2104      	movs	r1, #4
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fab5 	bl	8008970 <_calloc_r>
 8008406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008408:	60e8      	str	r0, [r5, #12]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e4      	bne.n	80083da <_Balloc+0x20>
 8008410:	2000      	movs	r0, #0
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	6802      	ldr	r2, [r0, #0]
 8008416:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800841a:	2300      	movs	r3, #0
 800841c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008420:	e7f7      	b.n	8008412 <_Balloc+0x58>

08008422 <_Bfree>:
 8008422:	b570      	push	{r4, r5, r6, lr}
 8008424:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008426:	4606      	mov	r6, r0
 8008428:	460d      	mov	r5, r1
 800842a:	b93c      	cbnz	r4, 800843c <_Bfree+0x1a>
 800842c:	2010      	movs	r0, #16
 800842e:	f7ff ffb1 	bl	8008394 <malloc>
 8008432:	6270      	str	r0, [r6, #36]	; 0x24
 8008434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008438:	6004      	str	r4, [r0, #0]
 800843a:	60c4      	str	r4, [r0, #12]
 800843c:	b13d      	cbz	r5, 800844e <_Bfree+0x2c>
 800843e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008440:	686a      	ldr	r2, [r5, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008448:	6029      	str	r1, [r5, #0]
 800844a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800844e:	bd70      	pop	{r4, r5, r6, pc}

08008450 <__multadd>:
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008454:	690d      	ldr	r5, [r1, #16]
 8008456:	461f      	mov	r7, r3
 8008458:	4606      	mov	r6, r0
 800845a:	460c      	mov	r4, r1
 800845c:	f101 0c14 	add.w	ip, r1, #20
 8008460:	2300      	movs	r3, #0
 8008462:	f8dc 0000 	ldr.w	r0, [ip]
 8008466:	b281      	uxth	r1, r0
 8008468:	fb02 7101 	mla	r1, r2, r1, r7
 800846c:	0c0f      	lsrs	r7, r1, #16
 800846e:	0c00      	lsrs	r0, r0, #16
 8008470:	fb02 7000 	mla	r0, r2, r0, r7
 8008474:	b289      	uxth	r1, r1
 8008476:	3301      	adds	r3, #1
 8008478:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800847c:	429d      	cmp	r5, r3
 800847e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008482:	f84c 1b04 	str.w	r1, [ip], #4
 8008486:	dcec      	bgt.n	8008462 <__multadd+0x12>
 8008488:	b1d7      	cbz	r7, 80084c0 <__multadd+0x70>
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	42ab      	cmp	r3, r5
 800848e:	dc12      	bgt.n	80084b6 <__multadd+0x66>
 8008490:	6861      	ldr	r1, [r4, #4]
 8008492:	4630      	mov	r0, r6
 8008494:	3101      	adds	r1, #1
 8008496:	f7ff ff90 	bl	80083ba <_Balloc>
 800849a:	6922      	ldr	r2, [r4, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	f104 010c 	add.w	r1, r4, #12
 80084a2:	4680      	mov	r8, r0
 80084a4:	0092      	lsls	r2, r2, #2
 80084a6:	300c      	adds	r0, #12
 80084a8:	f7ff ff7c 	bl	80083a4 <memcpy>
 80084ac:	4621      	mov	r1, r4
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ffb7 	bl	8008422 <_Bfree>
 80084b4:	4644      	mov	r4, r8
 80084b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084ba:	3501      	adds	r5, #1
 80084bc:	615f      	str	r7, [r3, #20]
 80084be:	6125      	str	r5, [r4, #16]
 80084c0:	4620      	mov	r0, r4
 80084c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084c6 <__hi0bits>:
 80084c6:	0c02      	lsrs	r2, r0, #16
 80084c8:	0412      	lsls	r2, r2, #16
 80084ca:	4603      	mov	r3, r0
 80084cc:	b9b2      	cbnz	r2, 80084fc <__hi0bits+0x36>
 80084ce:	0403      	lsls	r3, r0, #16
 80084d0:	2010      	movs	r0, #16
 80084d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084d6:	bf04      	itt	eq
 80084d8:	021b      	lsleq	r3, r3, #8
 80084da:	3008      	addeq	r0, #8
 80084dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084e0:	bf04      	itt	eq
 80084e2:	011b      	lsleq	r3, r3, #4
 80084e4:	3004      	addeq	r0, #4
 80084e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084ea:	bf04      	itt	eq
 80084ec:	009b      	lsleq	r3, r3, #2
 80084ee:	3002      	addeq	r0, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db06      	blt.n	8008502 <__hi0bits+0x3c>
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	d503      	bpl.n	8008500 <__hi0bits+0x3a>
 80084f8:	3001      	adds	r0, #1
 80084fa:	4770      	bx	lr
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7e8      	b.n	80084d2 <__hi0bits+0xc>
 8008500:	2020      	movs	r0, #32
 8008502:	4770      	bx	lr

08008504 <__lo0bits>:
 8008504:	6803      	ldr	r3, [r0, #0]
 8008506:	f013 0207 	ands.w	r2, r3, #7
 800850a:	4601      	mov	r1, r0
 800850c:	d00b      	beq.n	8008526 <__lo0bits+0x22>
 800850e:	07da      	lsls	r2, r3, #31
 8008510:	d423      	bmi.n	800855a <__lo0bits+0x56>
 8008512:	0798      	lsls	r0, r3, #30
 8008514:	bf49      	itett	mi
 8008516:	085b      	lsrmi	r3, r3, #1
 8008518:	089b      	lsrpl	r3, r3, #2
 800851a:	2001      	movmi	r0, #1
 800851c:	600b      	strmi	r3, [r1, #0]
 800851e:	bf5c      	itt	pl
 8008520:	600b      	strpl	r3, [r1, #0]
 8008522:	2002      	movpl	r0, #2
 8008524:	4770      	bx	lr
 8008526:	b298      	uxth	r0, r3
 8008528:	b9a8      	cbnz	r0, 8008556 <__lo0bits+0x52>
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	2010      	movs	r0, #16
 800852e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008532:	bf04      	itt	eq
 8008534:	0a1b      	lsreq	r3, r3, #8
 8008536:	3008      	addeq	r0, #8
 8008538:	071a      	lsls	r2, r3, #28
 800853a:	bf04      	itt	eq
 800853c:	091b      	lsreq	r3, r3, #4
 800853e:	3004      	addeq	r0, #4
 8008540:	079a      	lsls	r2, r3, #30
 8008542:	bf04      	itt	eq
 8008544:	089b      	lsreq	r3, r3, #2
 8008546:	3002      	addeq	r0, #2
 8008548:	07da      	lsls	r2, r3, #31
 800854a:	d402      	bmi.n	8008552 <__lo0bits+0x4e>
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	d006      	beq.n	800855e <__lo0bits+0x5a>
 8008550:	3001      	adds	r0, #1
 8008552:	600b      	str	r3, [r1, #0]
 8008554:	4770      	bx	lr
 8008556:	4610      	mov	r0, r2
 8008558:	e7e9      	b.n	800852e <__lo0bits+0x2a>
 800855a:	2000      	movs	r0, #0
 800855c:	4770      	bx	lr
 800855e:	2020      	movs	r0, #32
 8008560:	4770      	bx	lr

08008562 <__i2b>:
 8008562:	b510      	push	{r4, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	2101      	movs	r1, #1
 8008568:	f7ff ff27 	bl	80083ba <_Balloc>
 800856c:	2201      	movs	r2, #1
 800856e:	6144      	str	r4, [r0, #20]
 8008570:	6102      	str	r2, [r0, #16]
 8008572:	bd10      	pop	{r4, pc}

08008574 <__multiply>:
 8008574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	4614      	mov	r4, r2
 800857a:	690a      	ldr	r2, [r1, #16]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	429a      	cmp	r2, r3
 8008580:	bfb8      	it	lt
 8008582:	460b      	movlt	r3, r1
 8008584:	4688      	mov	r8, r1
 8008586:	bfbc      	itt	lt
 8008588:	46a0      	movlt	r8, r4
 800858a:	461c      	movlt	r4, r3
 800858c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008590:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008594:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008598:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800859c:	eb07 0609 	add.w	r6, r7, r9
 80085a0:	42b3      	cmp	r3, r6
 80085a2:	bfb8      	it	lt
 80085a4:	3101      	addlt	r1, #1
 80085a6:	f7ff ff08 	bl	80083ba <_Balloc>
 80085aa:	f100 0514 	add.w	r5, r0, #20
 80085ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80085b2:	462b      	mov	r3, r5
 80085b4:	2200      	movs	r2, #0
 80085b6:	4573      	cmp	r3, lr
 80085b8:	d316      	bcc.n	80085e8 <__multiply+0x74>
 80085ba:	f104 0214 	add.w	r2, r4, #20
 80085be:	f108 0114 	add.w	r1, r8, #20
 80085c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80085c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	9b00      	ldr	r3, [sp, #0]
 80085ce:	9201      	str	r2, [sp, #4]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d80c      	bhi.n	80085ee <__multiply+0x7a>
 80085d4:	2e00      	cmp	r6, #0
 80085d6:	dd03      	ble.n	80085e0 <__multiply+0x6c>
 80085d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d05d      	beq.n	800869c <__multiply+0x128>
 80085e0:	6106      	str	r6, [r0, #16]
 80085e2:	b003      	add	sp, #12
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	f843 2b04 	str.w	r2, [r3], #4
 80085ec:	e7e3      	b.n	80085b6 <__multiply+0x42>
 80085ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80085f2:	f1bb 0f00 	cmp.w	fp, #0
 80085f6:	d023      	beq.n	8008640 <__multiply+0xcc>
 80085f8:	4689      	mov	r9, r1
 80085fa:	46ac      	mov	ip, r5
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	f859 4b04 	ldr.w	r4, [r9], #4
 8008604:	f8dc a000 	ldr.w	sl, [ip]
 8008608:	b2a3      	uxth	r3, r4
 800860a:	fa1f fa8a 	uxth.w	sl, sl
 800860e:	fb0b a303 	mla	r3, fp, r3, sl
 8008612:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008616:	f8dc 4000 	ldr.w	r4, [ip]
 800861a:	4443      	add	r3, r8
 800861c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008620:	fb0b 840a 	mla	r4, fp, sl, r8
 8008624:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008628:	46e2      	mov	sl, ip
 800862a:	b29b      	uxth	r3, r3
 800862c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008630:	454f      	cmp	r7, r9
 8008632:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008636:	f84a 3b04 	str.w	r3, [sl], #4
 800863a:	d82b      	bhi.n	8008694 <__multiply+0x120>
 800863c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008646:	3204      	adds	r2, #4
 8008648:	f1ba 0f00 	cmp.w	sl, #0
 800864c:	d020      	beq.n	8008690 <__multiply+0x11c>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	4689      	mov	r9, r1
 8008652:	46a8      	mov	r8, r5
 8008654:	f04f 0b00 	mov.w	fp, #0
 8008658:	f8b9 c000 	ldrh.w	ip, [r9]
 800865c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008660:	fb0a 440c 	mla	r4, sl, ip, r4
 8008664:	445c      	add	r4, fp
 8008666:	46c4      	mov	ip, r8
 8008668:	b29b      	uxth	r3, r3
 800866a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800866e:	f84c 3b04 	str.w	r3, [ip], #4
 8008672:	f859 3b04 	ldr.w	r3, [r9], #4
 8008676:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	fb0a b303 	mla	r3, sl, r3, fp
 8008680:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008684:	454f      	cmp	r7, r9
 8008686:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800868a:	d805      	bhi.n	8008698 <__multiply+0x124>
 800868c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008690:	3504      	adds	r5, #4
 8008692:	e79b      	b.n	80085cc <__multiply+0x58>
 8008694:	46d4      	mov	ip, sl
 8008696:	e7b3      	b.n	8008600 <__multiply+0x8c>
 8008698:	46e0      	mov	r8, ip
 800869a:	e7dd      	b.n	8008658 <__multiply+0xe4>
 800869c:	3e01      	subs	r6, #1
 800869e:	e799      	b.n	80085d4 <__multiply+0x60>

080086a0 <__pow5mult>:
 80086a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a4:	4615      	mov	r5, r2
 80086a6:	f012 0203 	ands.w	r2, r2, #3
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	d007      	beq.n	80086c0 <__pow5mult+0x20>
 80086b0:	3a01      	subs	r2, #1
 80086b2:	4c21      	ldr	r4, [pc, #132]	; (8008738 <__pow5mult+0x98>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086ba:	f7ff fec9 	bl	8008450 <__multadd>
 80086be:	4607      	mov	r7, r0
 80086c0:	10ad      	asrs	r5, r5, #2
 80086c2:	d035      	beq.n	8008730 <__pow5mult+0x90>
 80086c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086c6:	b93c      	cbnz	r4, 80086d8 <__pow5mult+0x38>
 80086c8:	2010      	movs	r0, #16
 80086ca:	f7ff fe63 	bl	8008394 <malloc>
 80086ce:	6270      	str	r0, [r6, #36]	; 0x24
 80086d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086d4:	6004      	str	r4, [r0, #0]
 80086d6:	60c4      	str	r4, [r0, #12]
 80086d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086e0:	b94c      	cbnz	r4, 80086f6 <__pow5mult+0x56>
 80086e2:	f240 2171 	movw	r1, #625	; 0x271
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7ff ff3b 	bl	8008562 <__i2b>
 80086ec:	2300      	movs	r3, #0
 80086ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80086f2:	4604      	mov	r4, r0
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	f04f 0800 	mov.w	r8, #0
 80086fa:	07eb      	lsls	r3, r5, #31
 80086fc:	d50a      	bpl.n	8008714 <__pow5mult+0x74>
 80086fe:	4639      	mov	r1, r7
 8008700:	4622      	mov	r2, r4
 8008702:	4630      	mov	r0, r6
 8008704:	f7ff ff36 	bl	8008574 <__multiply>
 8008708:	4639      	mov	r1, r7
 800870a:	4681      	mov	r9, r0
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff fe88 	bl	8008422 <_Bfree>
 8008712:	464f      	mov	r7, r9
 8008714:	106d      	asrs	r5, r5, #1
 8008716:	d00b      	beq.n	8008730 <__pow5mult+0x90>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	b938      	cbnz	r0, 800872c <__pow5mult+0x8c>
 800871c:	4622      	mov	r2, r4
 800871e:	4621      	mov	r1, r4
 8008720:	4630      	mov	r0, r6
 8008722:	f7ff ff27 	bl	8008574 <__multiply>
 8008726:	6020      	str	r0, [r4, #0]
 8008728:	f8c0 8000 	str.w	r8, [r0]
 800872c:	4604      	mov	r4, r0
 800872e:	e7e4      	b.n	80086fa <__pow5mult+0x5a>
 8008730:	4638      	mov	r0, r7
 8008732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008736:	bf00      	nop
 8008738:	0800a5e8 	.word	0x0800a5e8

0800873c <__lshift>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	6849      	ldr	r1, [r1, #4]
 800874a:	eb0a 0903 	add.w	r9, sl, r3
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	4607      	mov	r7, r0
 8008752:	4616      	mov	r6, r2
 8008754:	f109 0501 	add.w	r5, r9, #1
 8008758:	42ab      	cmp	r3, r5
 800875a:	db32      	blt.n	80087c2 <__lshift+0x86>
 800875c:	4638      	mov	r0, r7
 800875e:	f7ff fe2c 	bl	80083ba <_Balloc>
 8008762:	2300      	movs	r3, #0
 8008764:	4680      	mov	r8, r0
 8008766:	f100 0114 	add.w	r1, r0, #20
 800876a:	461a      	mov	r2, r3
 800876c:	4553      	cmp	r3, sl
 800876e:	db2b      	blt.n	80087c8 <__lshift+0x8c>
 8008770:	6920      	ldr	r0, [r4, #16]
 8008772:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008776:	f104 0314 	add.w	r3, r4, #20
 800877a:	f016 021f 	ands.w	r2, r6, #31
 800877e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008782:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008786:	d025      	beq.n	80087d4 <__lshift+0x98>
 8008788:	f1c2 0e20 	rsb	lr, r2, #32
 800878c:	2000      	movs	r0, #0
 800878e:	681e      	ldr	r6, [r3, #0]
 8008790:	468a      	mov	sl, r1
 8008792:	4096      	lsls	r6, r2
 8008794:	4330      	orrs	r0, r6
 8008796:	f84a 0b04 	str.w	r0, [sl], #4
 800879a:	f853 0b04 	ldr.w	r0, [r3], #4
 800879e:	459c      	cmp	ip, r3
 80087a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80087a4:	d814      	bhi.n	80087d0 <__lshift+0x94>
 80087a6:	6048      	str	r0, [r1, #4]
 80087a8:	b108      	cbz	r0, 80087ae <__lshift+0x72>
 80087aa:	f109 0502 	add.w	r5, r9, #2
 80087ae:	3d01      	subs	r5, #1
 80087b0:	4638      	mov	r0, r7
 80087b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80087b6:	4621      	mov	r1, r4
 80087b8:	f7ff fe33 	bl	8008422 <_Bfree>
 80087bc:	4640      	mov	r0, r8
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	3101      	adds	r1, #1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	e7c7      	b.n	8008758 <__lshift+0x1c>
 80087c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80087cc:	3301      	adds	r3, #1
 80087ce:	e7cd      	b.n	800876c <__lshift+0x30>
 80087d0:	4651      	mov	r1, sl
 80087d2:	e7dc      	b.n	800878e <__lshift+0x52>
 80087d4:	3904      	subs	r1, #4
 80087d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087da:	f841 2f04 	str.w	r2, [r1, #4]!
 80087de:	459c      	cmp	ip, r3
 80087e0:	d8f9      	bhi.n	80087d6 <__lshift+0x9a>
 80087e2:	e7e4      	b.n	80087ae <__lshift+0x72>

080087e4 <__mcmp>:
 80087e4:	6903      	ldr	r3, [r0, #16]
 80087e6:	690a      	ldr	r2, [r1, #16]
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	b530      	push	{r4, r5, lr}
 80087ec:	d10c      	bne.n	8008808 <__mcmp+0x24>
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	3014      	adds	r0, #20
 80087f2:	3114      	adds	r1, #20
 80087f4:	1884      	adds	r4, r0, r2
 80087f6:	4411      	add	r1, r2
 80087f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008800:	4295      	cmp	r5, r2
 8008802:	d003      	beq.n	800880c <__mcmp+0x28>
 8008804:	d305      	bcc.n	8008812 <__mcmp+0x2e>
 8008806:	2301      	movs	r3, #1
 8008808:	4618      	mov	r0, r3
 800880a:	bd30      	pop	{r4, r5, pc}
 800880c:	42a0      	cmp	r0, r4
 800880e:	d3f3      	bcc.n	80087f8 <__mcmp+0x14>
 8008810:	e7fa      	b.n	8008808 <__mcmp+0x24>
 8008812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008816:	e7f7      	b.n	8008808 <__mcmp+0x24>

08008818 <__mdiff>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	460d      	mov	r5, r1
 800881e:	4607      	mov	r7, r0
 8008820:	4611      	mov	r1, r2
 8008822:	4628      	mov	r0, r5
 8008824:	4614      	mov	r4, r2
 8008826:	f7ff ffdd 	bl	80087e4 <__mcmp>
 800882a:	1e06      	subs	r6, r0, #0
 800882c:	d108      	bne.n	8008840 <__mdiff+0x28>
 800882e:	4631      	mov	r1, r6
 8008830:	4638      	mov	r0, r7
 8008832:	f7ff fdc2 	bl	80083ba <_Balloc>
 8008836:	2301      	movs	r3, #1
 8008838:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800883c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008840:	bfa4      	itt	ge
 8008842:	4623      	movge	r3, r4
 8008844:	462c      	movge	r4, r5
 8008846:	4638      	mov	r0, r7
 8008848:	6861      	ldr	r1, [r4, #4]
 800884a:	bfa6      	itte	ge
 800884c:	461d      	movge	r5, r3
 800884e:	2600      	movge	r6, #0
 8008850:	2601      	movlt	r6, #1
 8008852:	f7ff fdb2 	bl	80083ba <_Balloc>
 8008856:	692b      	ldr	r3, [r5, #16]
 8008858:	60c6      	str	r6, [r0, #12]
 800885a:	6926      	ldr	r6, [r4, #16]
 800885c:	f105 0914 	add.w	r9, r5, #20
 8008860:	f104 0214 	add.w	r2, r4, #20
 8008864:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008868:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800886c:	f100 0514 	add.w	r5, r0, #20
 8008870:	f04f 0e00 	mov.w	lr, #0
 8008874:	f852 ab04 	ldr.w	sl, [r2], #4
 8008878:	f859 4b04 	ldr.w	r4, [r9], #4
 800887c:	fa1e f18a 	uxtah	r1, lr, sl
 8008880:	b2a3      	uxth	r3, r4
 8008882:	1ac9      	subs	r1, r1, r3
 8008884:	0c23      	lsrs	r3, r4, #16
 8008886:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800888a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800888e:	b289      	uxth	r1, r1
 8008890:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008894:	45c8      	cmp	r8, r9
 8008896:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800889a:	4694      	mov	ip, r2
 800889c:	f845 3b04 	str.w	r3, [r5], #4
 80088a0:	d8e8      	bhi.n	8008874 <__mdiff+0x5c>
 80088a2:	45bc      	cmp	ip, r7
 80088a4:	d304      	bcc.n	80088b0 <__mdiff+0x98>
 80088a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80088aa:	b183      	cbz	r3, 80088ce <__mdiff+0xb6>
 80088ac:	6106      	str	r6, [r0, #16]
 80088ae:	e7c5      	b.n	800883c <__mdiff+0x24>
 80088b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088b4:	fa1e f381 	uxtah	r3, lr, r1
 80088b8:	141a      	asrs	r2, r3, #16
 80088ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088be:	b29b      	uxth	r3, r3
 80088c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80088c8:	f845 3b04 	str.w	r3, [r5], #4
 80088cc:	e7e9      	b.n	80088a2 <__mdiff+0x8a>
 80088ce:	3e01      	subs	r6, #1
 80088d0:	e7e9      	b.n	80088a6 <__mdiff+0x8e>

080088d2 <__d2b>:
 80088d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088d6:	460e      	mov	r6, r1
 80088d8:	2101      	movs	r1, #1
 80088da:	ec59 8b10 	vmov	r8, r9, d0
 80088de:	4615      	mov	r5, r2
 80088e0:	f7ff fd6b 	bl	80083ba <_Balloc>
 80088e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80088e8:	4607      	mov	r7, r0
 80088ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088ee:	bb34      	cbnz	r4, 800893e <__d2b+0x6c>
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	f1b8 0300 	subs.w	r3, r8, #0
 80088f6:	d027      	beq.n	8008948 <__d2b+0x76>
 80088f8:	a802      	add	r0, sp, #8
 80088fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80088fe:	f7ff fe01 	bl	8008504 <__lo0bits>
 8008902:	9900      	ldr	r1, [sp, #0]
 8008904:	b1f0      	cbz	r0, 8008944 <__d2b+0x72>
 8008906:	9a01      	ldr	r2, [sp, #4]
 8008908:	f1c0 0320 	rsb	r3, r0, #32
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	430b      	orrs	r3, r1
 8008912:	40c2      	lsrs	r2, r0
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	9201      	str	r2, [sp, #4]
 8008918:	9b01      	ldr	r3, [sp, #4]
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	bf14      	ite	ne
 8008920:	2102      	movne	r1, #2
 8008922:	2101      	moveq	r1, #1
 8008924:	6139      	str	r1, [r7, #16]
 8008926:	b1c4      	cbz	r4, 800895a <__d2b+0x88>
 8008928:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800892c:	4404      	add	r4, r0
 800892e:	6034      	str	r4, [r6, #0]
 8008930:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008934:	6028      	str	r0, [r5, #0]
 8008936:	4638      	mov	r0, r7
 8008938:	b003      	add	sp, #12
 800893a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800893e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008942:	e7d5      	b.n	80088f0 <__d2b+0x1e>
 8008944:	6179      	str	r1, [r7, #20]
 8008946:	e7e7      	b.n	8008918 <__d2b+0x46>
 8008948:	a801      	add	r0, sp, #4
 800894a:	f7ff fddb 	bl	8008504 <__lo0bits>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	617b      	str	r3, [r7, #20]
 8008952:	2101      	movs	r1, #1
 8008954:	6139      	str	r1, [r7, #16]
 8008956:	3020      	adds	r0, #32
 8008958:	e7e5      	b.n	8008926 <__d2b+0x54>
 800895a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800895e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008962:	6030      	str	r0, [r6, #0]
 8008964:	6918      	ldr	r0, [r3, #16]
 8008966:	f7ff fdae 	bl	80084c6 <__hi0bits>
 800896a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800896e:	e7e1      	b.n	8008934 <__d2b+0x62>

08008970 <_calloc_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	fb02 f401 	mul.w	r4, r2, r1
 8008976:	4621      	mov	r1, r4
 8008978:	f000 f856 	bl	8008a28 <_malloc_r>
 800897c:	4605      	mov	r5, r0
 800897e:	b118      	cbz	r0, 8008988 <_calloc_r+0x18>
 8008980:	4622      	mov	r2, r4
 8008982:	2100      	movs	r1, #0
 8008984:	f7fe fa30 	bl	8006de8 <memset>
 8008988:	4628      	mov	r0, r5
 800898a:	bd38      	pop	{r3, r4, r5, pc}

0800898c <_free_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4605      	mov	r5, r0
 8008990:	2900      	cmp	r1, #0
 8008992:	d045      	beq.n	8008a20 <_free_r+0x94>
 8008994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008998:	1f0c      	subs	r4, r1, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfb8      	it	lt
 800899e:	18e4      	addlt	r4, r4, r3
 80089a0:	f000 fa29 	bl	8008df6 <__malloc_lock>
 80089a4:	4a1f      	ldr	r2, [pc, #124]	; (8008a24 <_free_r+0x98>)
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	4610      	mov	r0, r2
 80089aa:	b933      	cbnz	r3, 80089ba <_free_r+0x2e>
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	6014      	str	r4, [r2, #0]
 80089b0:	4628      	mov	r0, r5
 80089b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089b6:	f000 ba1f 	b.w	8008df8 <__malloc_unlock>
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	d90c      	bls.n	80089d8 <_free_r+0x4c>
 80089be:	6821      	ldr	r1, [r4, #0]
 80089c0:	1862      	adds	r2, r4, r1
 80089c2:	4293      	cmp	r3, r2
 80089c4:	bf04      	itt	eq
 80089c6:	681a      	ldreq	r2, [r3, #0]
 80089c8:	685b      	ldreq	r3, [r3, #4]
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	bf04      	itt	eq
 80089ce:	1852      	addeq	r2, r2, r1
 80089d0:	6022      	streq	r2, [r4, #0]
 80089d2:	6004      	str	r4, [r0, #0]
 80089d4:	e7ec      	b.n	80089b0 <_free_r+0x24>
 80089d6:	4613      	mov	r3, r2
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	b10a      	cbz	r2, 80089e0 <_free_r+0x54>
 80089dc:	42a2      	cmp	r2, r4
 80089de:	d9fa      	bls.n	80089d6 <_free_r+0x4a>
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	1858      	adds	r0, r3, r1
 80089e4:	42a0      	cmp	r0, r4
 80089e6:	d10b      	bne.n	8008a00 <_free_r+0x74>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	4401      	add	r1, r0
 80089ec:	1858      	adds	r0, r3, r1
 80089ee:	4282      	cmp	r2, r0
 80089f0:	6019      	str	r1, [r3, #0]
 80089f2:	d1dd      	bne.n	80089b0 <_free_r+0x24>
 80089f4:	6810      	ldr	r0, [r2, #0]
 80089f6:	6852      	ldr	r2, [r2, #4]
 80089f8:	605a      	str	r2, [r3, #4]
 80089fa:	4401      	add	r1, r0
 80089fc:	6019      	str	r1, [r3, #0]
 80089fe:	e7d7      	b.n	80089b0 <_free_r+0x24>
 8008a00:	d902      	bls.n	8008a08 <_free_r+0x7c>
 8008a02:	230c      	movs	r3, #12
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	e7d3      	b.n	80089b0 <_free_r+0x24>
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	1821      	adds	r1, r4, r0
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	bf04      	itt	eq
 8008a10:	6811      	ldreq	r1, [r2, #0]
 8008a12:	6852      	ldreq	r2, [r2, #4]
 8008a14:	6062      	str	r2, [r4, #4]
 8008a16:	bf04      	itt	eq
 8008a18:	1809      	addeq	r1, r1, r0
 8008a1a:	6021      	streq	r1, [r4, #0]
 8008a1c:	605c      	str	r4, [r3, #4]
 8008a1e:	e7c7      	b.n	80089b0 <_free_r+0x24>
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	20000280 	.word	0x20000280

08008a28 <_malloc_r>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	1ccd      	adds	r5, r1, #3
 8008a2c:	f025 0503 	bic.w	r5, r5, #3
 8008a30:	3508      	adds	r5, #8
 8008a32:	2d0c      	cmp	r5, #12
 8008a34:	bf38      	it	cc
 8008a36:	250c      	movcc	r5, #12
 8008a38:	2d00      	cmp	r5, #0
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	db01      	blt.n	8008a42 <_malloc_r+0x1a>
 8008a3e:	42a9      	cmp	r1, r5
 8008a40:	d903      	bls.n	8008a4a <_malloc_r+0x22>
 8008a42:	230c      	movs	r3, #12
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	2000      	movs	r0, #0
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
 8008a4a:	f000 f9d4 	bl	8008df6 <__malloc_lock>
 8008a4e:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <_malloc_r+0xac>)
 8008a50:	6814      	ldr	r4, [r2, #0]
 8008a52:	4621      	mov	r1, r4
 8008a54:	b991      	cbnz	r1, 8008a7c <_malloc_r+0x54>
 8008a56:	4c20      	ldr	r4, [pc, #128]	; (8008ad8 <_malloc_r+0xb0>)
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	b91b      	cbnz	r3, 8008a64 <_malloc_r+0x3c>
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f000 f98f 	bl	8008d80 <_sbrk_r>
 8008a62:	6020      	str	r0, [r4, #0]
 8008a64:	4629      	mov	r1, r5
 8008a66:	4630      	mov	r0, r6
 8008a68:	f000 f98a 	bl	8008d80 <_sbrk_r>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d124      	bne.n	8008aba <_malloc_r+0x92>
 8008a70:	230c      	movs	r3, #12
 8008a72:	6033      	str	r3, [r6, #0]
 8008a74:	4630      	mov	r0, r6
 8008a76:	f000 f9bf 	bl	8008df8 <__malloc_unlock>
 8008a7a:	e7e4      	b.n	8008a46 <_malloc_r+0x1e>
 8008a7c:	680b      	ldr	r3, [r1, #0]
 8008a7e:	1b5b      	subs	r3, r3, r5
 8008a80:	d418      	bmi.n	8008ab4 <_malloc_r+0x8c>
 8008a82:	2b0b      	cmp	r3, #11
 8008a84:	d90f      	bls.n	8008aa6 <_malloc_r+0x7e>
 8008a86:	600b      	str	r3, [r1, #0]
 8008a88:	50cd      	str	r5, [r1, r3]
 8008a8a:	18cc      	adds	r4, r1, r3
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f000 f9b3 	bl	8008df8 <__malloc_unlock>
 8008a92:	f104 000b 	add.w	r0, r4, #11
 8008a96:	1d23      	adds	r3, r4, #4
 8008a98:	f020 0007 	bic.w	r0, r0, #7
 8008a9c:	1ac3      	subs	r3, r0, r3
 8008a9e:	d0d3      	beq.n	8008a48 <_malloc_r+0x20>
 8008aa0:	425a      	negs	r2, r3
 8008aa2:	50e2      	str	r2, [r4, r3]
 8008aa4:	e7d0      	b.n	8008a48 <_malloc_r+0x20>
 8008aa6:	428c      	cmp	r4, r1
 8008aa8:	684b      	ldr	r3, [r1, #4]
 8008aaa:	bf16      	itet	ne
 8008aac:	6063      	strne	r3, [r4, #4]
 8008aae:	6013      	streq	r3, [r2, #0]
 8008ab0:	460c      	movne	r4, r1
 8008ab2:	e7eb      	b.n	8008a8c <_malloc_r+0x64>
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	6849      	ldr	r1, [r1, #4]
 8008ab8:	e7cc      	b.n	8008a54 <_malloc_r+0x2c>
 8008aba:	1cc4      	adds	r4, r0, #3
 8008abc:	f024 0403 	bic.w	r4, r4, #3
 8008ac0:	42a0      	cmp	r0, r4
 8008ac2:	d005      	beq.n	8008ad0 <_malloc_r+0xa8>
 8008ac4:	1a21      	subs	r1, r4, r0
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f000 f95a 	bl	8008d80 <_sbrk_r>
 8008acc:	3001      	adds	r0, #1
 8008ace:	d0cf      	beq.n	8008a70 <_malloc_r+0x48>
 8008ad0:	6025      	str	r5, [r4, #0]
 8008ad2:	e7db      	b.n	8008a8c <_malloc_r+0x64>
 8008ad4:	20000280 	.word	0x20000280
 8008ad8:	20000284 	.word	0x20000284

08008adc <__ssputs_r>:
 8008adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	688e      	ldr	r6, [r1, #8]
 8008ae2:	429e      	cmp	r6, r3
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	4690      	mov	r8, r2
 8008aea:	4699      	mov	r9, r3
 8008aec:	d837      	bhi.n	8008b5e <__ssputs_r+0x82>
 8008aee:	898a      	ldrh	r2, [r1, #12]
 8008af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af4:	d031      	beq.n	8008b5a <__ssputs_r+0x7e>
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	6909      	ldr	r1, [r1, #16]
 8008afa:	1a6f      	subs	r7, r5, r1
 8008afc:	6965      	ldr	r5, [r4, #20]
 8008afe:	2302      	movs	r3, #2
 8008b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b04:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b08:	f109 0301 	add.w	r3, r9, #1
 8008b0c:	443b      	add	r3, r7
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	bf38      	it	cc
 8008b12:	461d      	movcc	r5, r3
 8008b14:	0553      	lsls	r3, r2, #21
 8008b16:	d530      	bpl.n	8008b7a <__ssputs_r+0x9e>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7ff ff85 	bl	8008a28 <_malloc_r>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	b950      	cbnz	r0, 8008b38 <__ssputs_r+0x5c>
 8008b22:	230c      	movs	r3, #12
 8008b24:	f8ca 3000 	str.w	r3, [sl]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	463a      	mov	r2, r7
 8008b3a:	6921      	ldr	r1, [r4, #16]
 8008b3c:	f7ff fc32 	bl	80083a4 <memcpy>
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	6126      	str	r6, [r4, #16]
 8008b4e:	6165      	str	r5, [r4, #20]
 8008b50:	443e      	add	r6, r7
 8008b52:	1bed      	subs	r5, r5, r7
 8008b54:	6026      	str	r6, [r4, #0]
 8008b56:	60a5      	str	r5, [r4, #8]
 8008b58:	464e      	mov	r6, r9
 8008b5a:	454e      	cmp	r6, r9
 8008b5c:	d900      	bls.n	8008b60 <__ssputs_r+0x84>
 8008b5e:	464e      	mov	r6, r9
 8008b60:	4632      	mov	r2, r6
 8008b62:	4641      	mov	r1, r8
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	f000 f92d 	bl	8008dc4 <memmove>
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	1b9b      	subs	r3, r3, r6
 8008b6e:	60a3      	str	r3, [r4, #8]
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	441e      	add	r6, r3
 8008b74:	6026      	str	r6, [r4, #0]
 8008b76:	2000      	movs	r0, #0
 8008b78:	e7dc      	b.n	8008b34 <__ssputs_r+0x58>
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	f000 f93d 	bl	8008dfa <_realloc_r>
 8008b80:	4606      	mov	r6, r0
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1e2      	bne.n	8008b4c <__ssputs_r+0x70>
 8008b86:	6921      	ldr	r1, [r4, #16]
 8008b88:	4650      	mov	r0, sl
 8008b8a:	f7ff feff 	bl	800898c <_free_r>
 8008b8e:	e7c8      	b.n	8008b22 <__ssputs_r+0x46>

08008b90 <_svfiprintf_r>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	461d      	mov	r5, r3
 8008b96:	898b      	ldrh	r3, [r1, #12]
 8008b98:	061f      	lsls	r7, r3, #24
 8008b9a:	b09d      	sub	sp, #116	; 0x74
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4616      	mov	r6, r2
 8008ba2:	d50f      	bpl.n	8008bc4 <_svfiprintf_r+0x34>
 8008ba4:	690b      	ldr	r3, [r1, #16]
 8008ba6:	b96b      	cbnz	r3, 8008bc4 <_svfiprintf_r+0x34>
 8008ba8:	2140      	movs	r1, #64	; 0x40
 8008baa:	f7ff ff3d 	bl	8008a28 <_malloc_r>
 8008bae:	6020      	str	r0, [r4, #0]
 8008bb0:	6120      	str	r0, [r4, #16]
 8008bb2:	b928      	cbnz	r0, 8008bc0 <_svfiprintf_r+0x30>
 8008bb4:	230c      	movs	r3, #12
 8008bb6:	f8c8 3000 	str.w	r3, [r8]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbe:	e0c8      	b.n	8008d52 <_svfiprintf_r+0x1c2>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bce:	2330      	movs	r3, #48	; 0x30
 8008bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd4:	9503      	str	r5, [sp, #12]
 8008bd6:	f04f 0b01 	mov.w	fp, #1
 8008bda:	4637      	mov	r7, r6
 8008bdc:	463d      	mov	r5, r7
 8008bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008be2:	b10b      	cbz	r3, 8008be8 <_svfiprintf_r+0x58>
 8008be4:	2b25      	cmp	r3, #37	; 0x25
 8008be6:	d13e      	bne.n	8008c66 <_svfiprintf_r+0xd6>
 8008be8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008bec:	d00b      	beq.n	8008c06 <_svfiprintf_r+0x76>
 8008bee:	4653      	mov	r3, sl
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	f7ff ff71 	bl	8008adc <__ssputs_r>
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	f000 80a4 	beq.w	8008d48 <_svfiprintf_r+0x1b8>
 8008c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c02:	4453      	add	r3, sl
 8008c04:	9309      	str	r3, [sp, #36]	; 0x24
 8008c06:	783b      	ldrb	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 809d 	beq.w	8008d48 <_svfiprintf_r+0x1b8>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c20:	931a      	str	r3, [sp, #104]	; 0x68
 8008c22:	462f      	mov	r7, r5
 8008c24:	2205      	movs	r2, #5
 8008c26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c2a:	4850      	ldr	r0, [pc, #320]	; (8008d6c <_svfiprintf_r+0x1dc>)
 8008c2c:	f7f7 fb00 	bl	8000230 <memchr>
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	b9d0      	cbnz	r0, 8008c6a <_svfiprintf_r+0xda>
 8008c34:	06d9      	lsls	r1, r3, #27
 8008c36:	bf44      	itt	mi
 8008c38:	2220      	movmi	r2, #32
 8008c3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c3e:	071a      	lsls	r2, r3, #28
 8008c40:	bf44      	itt	mi
 8008c42:	222b      	movmi	r2, #43	; 0x2b
 8008c44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c48:	782a      	ldrb	r2, [r5, #0]
 8008c4a:	2a2a      	cmp	r2, #42	; 0x2a
 8008c4c:	d015      	beq.n	8008c7a <_svfiprintf_r+0xea>
 8008c4e:	9a07      	ldr	r2, [sp, #28]
 8008c50:	462f      	mov	r7, r5
 8008c52:	2000      	movs	r0, #0
 8008c54:	250a      	movs	r5, #10
 8008c56:	4639      	mov	r1, r7
 8008c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c5c:	3b30      	subs	r3, #48	; 0x30
 8008c5e:	2b09      	cmp	r3, #9
 8008c60:	d94d      	bls.n	8008cfe <_svfiprintf_r+0x16e>
 8008c62:	b1b8      	cbz	r0, 8008c94 <_svfiprintf_r+0x104>
 8008c64:	e00f      	b.n	8008c86 <_svfiprintf_r+0xf6>
 8008c66:	462f      	mov	r7, r5
 8008c68:	e7b8      	b.n	8008bdc <_svfiprintf_r+0x4c>
 8008c6a:	4a40      	ldr	r2, [pc, #256]	; (8008d6c <_svfiprintf_r+0x1dc>)
 8008c6c:	1a80      	subs	r0, r0, r2
 8008c6e:	fa0b f000 	lsl.w	r0, fp, r0
 8008c72:	4318      	orrs	r0, r3
 8008c74:	9004      	str	r0, [sp, #16]
 8008c76:	463d      	mov	r5, r7
 8008c78:	e7d3      	b.n	8008c22 <_svfiprintf_r+0x92>
 8008c7a:	9a03      	ldr	r2, [sp, #12]
 8008c7c:	1d11      	adds	r1, r2, #4
 8008c7e:	6812      	ldr	r2, [r2, #0]
 8008c80:	9103      	str	r1, [sp, #12]
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	db01      	blt.n	8008c8a <_svfiprintf_r+0xfa>
 8008c86:	9207      	str	r2, [sp, #28]
 8008c88:	e004      	b.n	8008c94 <_svfiprintf_r+0x104>
 8008c8a:	4252      	negs	r2, r2
 8008c8c:	f043 0302 	orr.w	r3, r3, #2
 8008c90:	9207      	str	r2, [sp, #28]
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	783b      	ldrb	r3, [r7, #0]
 8008c96:	2b2e      	cmp	r3, #46	; 0x2e
 8008c98:	d10c      	bne.n	8008cb4 <_svfiprintf_r+0x124>
 8008c9a:	787b      	ldrb	r3, [r7, #1]
 8008c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9e:	d133      	bne.n	8008d08 <_svfiprintf_r+0x178>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	1d1a      	adds	r2, r3, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	9203      	str	r2, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfb8      	it	lt
 8008cac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cb0:	3702      	adds	r7, #2
 8008cb2:	9305      	str	r3, [sp, #20]
 8008cb4:	4d2e      	ldr	r5, [pc, #184]	; (8008d70 <_svfiprintf_r+0x1e0>)
 8008cb6:	7839      	ldrb	r1, [r7, #0]
 8008cb8:	2203      	movs	r2, #3
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f7f7 fab8 	bl	8000230 <memchr>
 8008cc0:	b138      	cbz	r0, 8008cd2 <_svfiprintf_r+0x142>
 8008cc2:	2340      	movs	r3, #64	; 0x40
 8008cc4:	1b40      	subs	r0, r0, r5
 8008cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	4303      	orrs	r3, r0
 8008cce:	3701      	adds	r7, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	7839      	ldrb	r1, [r7, #0]
 8008cd4:	4827      	ldr	r0, [pc, #156]	; (8008d74 <_svfiprintf_r+0x1e4>)
 8008cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cda:	2206      	movs	r2, #6
 8008cdc:	1c7e      	adds	r6, r7, #1
 8008cde:	f7f7 faa7 	bl	8000230 <memchr>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d038      	beq.n	8008d58 <_svfiprintf_r+0x1c8>
 8008ce6:	4b24      	ldr	r3, [pc, #144]	; (8008d78 <_svfiprintf_r+0x1e8>)
 8008ce8:	bb13      	cbnz	r3, 8008d30 <_svfiprintf_r+0x1a0>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3307      	adds	r3, #7
 8008cee:	f023 0307 	bic.w	r3, r3, #7
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf8:	444b      	add	r3, r9
 8008cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfc:	e76d      	b.n	8008bda <_svfiprintf_r+0x4a>
 8008cfe:	fb05 3202 	mla	r2, r5, r2, r3
 8008d02:	2001      	movs	r0, #1
 8008d04:	460f      	mov	r7, r1
 8008d06:	e7a6      	b.n	8008c56 <_svfiprintf_r+0xc6>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	3701      	adds	r7, #1
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	250a      	movs	r5, #10
 8008d12:	4638      	mov	r0, r7
 8008d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d18:	3a30      	subs	r2, #48	; 0x30
 8008d1a:	2a09      	cmp	r2, #9
 8008d1c:	d903      	bls.n	8008d26 <_svfiprintf_r+0x196>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0c8      	beq.n	8008cb4 <_svfiprintf_r+0x124>
 8008d22:	9105      	str	r1, [sp, #20]
 8008d24:	e7c6      	b.n	8008cb4 <_svfiprintf_r+0x124>
 8008d26:	fb05 2101 	mla	r1, r5, r1, r2
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4607      	mov	r7, r0
 8008d2e:	e7f0      	b.n	8008d12 <_svfiprintf_r+0x182>
 8008d30:	ab03      	add	r3, sp, #12
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4622      	mov	r2, r4
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <_svfiprintf_r+0x1ec>)
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	f7fe f8f0 	bl	8006f20 <_printf_float>
 8008d40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008d44:	4681      	mov	r9, r0
 8008d46:	d1d6      	bne.n	8008cf6 <_svfiprintf_r+0x166>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	065b      	lsls	r3, r3, #25
 8008d4c:	f53f af35 	bmi.w	8008bba <_svfiprintf_r+0x2a>
 8008d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d52:	b01d      	add	sp, #116	; 0x74
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	ab03      	add	r3, sp, #12
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <_svfiprintf_r+0x1ec>)
 8008d60:	a904      	add	r1, sp, #16
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7fe fb92 	bl	800748c <_printf_i>
 8008d68:	e7ea      	b.n	8008d40 <_svfiprintf_r+0x1b0>
 8008d6a:	bf00      	nop
 8008d6c:	0800a5f4 	.word	0x0800a5f4
 8008d70:	0800a5fa 	.word	0x0800a5fa
 8008d74:	0800a5fe 	.word	0x0800a5fe
 8008d78:	08006f21 	.word	0x08006f21
 8008d7c:	08008add 	.word	0x08008add

08008d80 <_sbrk_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4c06      	ldr	r4, [pc, #24]	; (8008d9c <_sbrk_r+0x1c>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4605      	mov	r5, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	f7f9 fd26 	bl	80027dc <_sbrk>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_sbrk_r+0x1a>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_sbrk_r+0x1a>
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	2000070c 	.word	0x2000070c

08008da0 <__ascii_mbtowc>:
 8008da0:	b082      	sub	sp, #8
 8008da2:	b901      	cbnz	r1, 8008da6 <__ascii_mbtowc+0x6>
 8008da4:	a901      	add	r1, sp, #4
 8008da6:	b142      	cbz	r2, 8008dba <__ascii_mbtowc+0x1a>
 8008da8:	b14b      	cbz	r3, 8008dbe <__ascii_mbtowc+0x1e>
 8008daa:	7813      	ldrb	r3, [r2, #0]
 8008dac:	600b      	str	r3, [r1, #0]
 8008dae:	7812      	ldrb	r2, [r2, #0]
 8008db0:	1c10      	adds	r0, r2, #0
 8008db2:	bf18      	it	ne
 8008db4:	2001      	movne	r0, #1
 8008db6:	b002      	add	sp, #8
 8008db8:	4770      	bx	lr
 8008dba:	4610      	mov	r0, r2
 8008dbc:	e7fb      	b.n	8008db6 <__ascii_mbtowc+0x16>
 8008dbe:	f06f 0001 	mvn.w	r0, #1
 8008dc2:	e7f8      	b.n	8008db6 <__ascii_mbtowc+0x16>

08008dc4 <memmove>:
 8008dc4:	4288      	cmp	r0, r1
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	eb01 0302 	add.w	r3, r1, r2
 8008dcc:	d807      	bhi.n	8008dde <memmove+0x1a>
 8008dce:	1e42      	subs	r2, r0, #1
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d00a      	beq.n	8008dea <memmove+0x26>
 8008dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ddc:	e7f8      	b.n	8008dd0 <memmove+0xc>
 8008dde:	4283      	cmp	r3, r0
 8008de0:	d9f5      	bls.n	8008dce <memmove+0xa>
 8008de2:	1881      	adds	r1, r0, r2
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	42d3      	cmn	r3, r2
 8008de8:	d100      	bne.n	8008dec <memmove+0x28>
 8008dea:	bd10      	pop	{r4, pc}
 8008dec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008df0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008df4:	e7f7      	b.n	8008de6 <memmove+0x22>

08008df6 <__malloc_lock>:
 8008df6:	4770      	bx	lr

08008df8 <__malloc_unlock>:
 8008df8:	4770      	bx	lr

08008dfa <_realloc_r>:
 8008dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	4614      	mov	r4, r2
 8008e00:	460e      	mov	r6, r1
 8008e02:	b921      	cbnz	r1, 8008e0e <_realloc_r+0x14>
 8008e04:	4611      	mov	r1, r2
 8008e06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e0a:	f7ff be0d 	b.w	8008a28 <_malloc_r>
 8008e0e:	b922      	cbnz	r2, 8008e1a <_realloc_r+0x20>
 8008e10:	f7ff fdbc 	bl	800898c <_free_r>
 8008e14:	4625      	mov	r5, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e1a:	f000 f821 	bl	8008e60 <_malloc_usable_size_r>
 8008e1e:	42a0      	cmp	r0, r4
 8008e20:	d20f      	bcs.n	8008e42 <_realloc_r+0x48>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff fdff 	bl	8008a28 <_malloc_r>
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d0f2      	beq.n	8008e16 <_realloc_r+0x1c>
 8008e30:	4631      	mov	r1, r6
 8008e32:	4622      	mov	r2, r4
 8008e34:	f7ff fab6 	bl	80083a4 <memcpy>
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f7ff fda6 	bl	800898c <_free_r>
 8008e40:	e7e9      	b.n	8008e16 <_realloc_r+0x1c>
 8008e42:	4635      	mov	r5, r6
 8008e44:	e7e7      	b.n	8008e16 <_realloc_r+0x1c>

08008e46 <__ascii_wctomb>:
 8008e46:	b149      	cbz	r1, 8008e5c <__ascii_wctomb+0x16>
 8008e48:	2aff      	cmp	r2, #255	; 0xff
 8008e4a:	bf85      	ittet	hi
 8008e4c:	238a      	movhi	r3, #138	; 0x8a
 8008e4e:	6003      	strhi	r3, [r0, #0]
 8008e50:	700a      	strbls	r2, [r1, #0]
 8008e52:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e56:	bf98      	it	ls
 8008e58:	2001      	movls	r0, #1
 8008e5a:	4770      	bx	lr
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4770      	bx	lr

08008e60 <_malloc_usable_size_r>:
 8008e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e64:	1f18      	subs	r0, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfbc      	itt	lt
 8008e6a:	580b      	ldrlt	r3, [r1, r0]
 8008e6c:	18c0      	addlt	r0, r0, r3
 8008e6e:	4770      	bx	lr

08008e70 <pow>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	ed2d 8b04 	vpush	{d8-d9}
 8008e78:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800914c <pow+0x2dc>
 8008e7c:	b08d      	sub	sp, #52	; 0x34
 8008e7e:	ec57 6b10 	vmov	r6, r7, d0
 8008e82:	ec55 4b11 	vmov	r4, r5, d1
 8008e86:	f000 f963 	bl	8009150 <__ieee754_pow>
 8008e8a:	f999 3000 	ldrsb.w	r3, [r9]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	eeb0 8a40 	vmov.f32	s16, s0
 8008e96:	eef0 8a60 	vmov.f32	s17, s1
 8008e9a:	46c8      	mov	r8, r9
 8008e9c:	d05f      	beq.n	8008f5e <pow+0xee>
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7f7 fe69 	bl	8000b7c <__aeabi_dcmpun>
 8008eaa:	4683      	mov	fp, r0
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d156      	bne.n	8008f5e <pow+0xee>
 8008eb0:	4632      	mov	r2, r6
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 fe60 	bl	8000b7c <__aeabi_dcmpun>
 8008ebc:	9001      	str	r0, [sp, #4]
 8008ebe:	b1e8      	cbz	r0, 8008efc <pow+0x8c>
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 fe26 	bl	8000b18 <__aeabi_dcmpeq>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d046      	beq.n	8008f5e <pow+0xee>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	9302      	str	r3, [sp, #8]
 8008ed4:	4b96      	ldr	r3, [pc, #600]	; (8009130 <pow+0x2c0>)
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	4b96      	ldr	r3, [pc, #600]	; (8009134 <pow+0x2c4>)
 8008eda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008ede:	2200      	movs	r2, #0
 8008ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ee4:	9b00      	ldr	r3, [sp, #0]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008eec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ef0:	d033      	beq.n	8008f5a <pow+0xea>
 8008ef2:	a802      	add	r0, sp, #8
 8008ef4:	f000 fefb 	bl	8009cee <matherr>
 8008ef8:	bb48      	cbnz	r0, 8008f4e <pow+0xde>
 8008efa:	e05d      	b.n	8008fb8 <pow+0x148>
 8008efc:	f04f 0a00 	mov.w	sl, #0
 8008f00:	f04f 0b00 	mov.w	fp, #0
 8008f04:	4652      	mov	r2, sl
 8008f06:	465b      	mov	r3, fp
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fe04 	bl	8000b18 <__aeabi_dcmpeq>
 8008f10:	ec4b ab19 	vmov	d9, sl, fp
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d054      	beq.n	8008fc2 <pow+0x152>
 8008f18:	4652      	mov	r2, sl
 8008f1a:	465b      	mov	r3, fp
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 fdfa 	bl	8000b18 <__aeabi_dcmpeq>
 8008f24:	4680      	mov	r8, r0
 8008f26:	b318      	cbz	r0, 8008f70 <pow+0x100>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	9302      	str	r3, [sp, #8]
 8008f2c:	4b80      	ldr	r3, [pc, #512]	; (8009130 <pow+0x2c0>)
 8008f2e:	9303      	str	r3, [sp, #12]
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	930a      	str	r3, [sp, #40]	; 0x28
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008f3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008f3e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0d5      	beq.n	8008ef2 <pow+0x82>
 8008f46:	4b7b      	ldr	r3, [pc, #492]	; (8009134 <pow+0x2c4>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f50:	b11b      	cbz	r3, 8008f5a <pow+0xea>
 8008f52:	f7fd ff1f 	bl	8006d94 <__errno>
 8008f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f58:	6003      	str	r3, [r0, #0]
 8008f5a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8008f5e:	eeb0 0a48 	vmov.f32	s0, s16
 8008f62:	eef0 0a68 	vmov.f32	s1, s17
 8008f66:	b00d      	add	sp, #52	; 0x34
 8008f68:	ecbd 8b04 	vpop	{d8-d9}
 8008f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f70:	ec45 4b10 	vmov	d0, r4, r5
 8008f74:	f000 feb3 	bl	8009cde <finite>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d0f0      	beq.n	8008f5e <pow+0xee>
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	465b      	mov	r3, fp
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 fdd2 	bl	8000b2c <__aeabi_dcmplt>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d0e8      	beq.n	8008f5e <pow+0xee>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	9302      	str	r3, [sp, #8]
 8008f90:	4b67      	ldr	r3, [pc, #412]	; (8009130 <pow+0x2c0>)
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	f999 3000 	ldrsb.w	r3, [r9]
 8008f98:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008f9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008fa0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008fa4:	b913      	cbnz	r3, 8008fac <pow+0x13c>
 8008fa6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008faa:	e7a2      	b.n	8008ef2 <pow+0x82>
 8008fac:	4962      	ldr	r1, [pc, #392]	; (8009138 <pow+0x2c8>)
 8008fae:	2000      	movs	r0, #0
 8008fb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d19c      	bne.n	8008ef2 <pow+0x82>
 8008fb8:	f7fd feec 	bl	8006d94 <__errno>
 8008fbc:	2321      	movs	r3, #33	; 0x21
 8008fbe:	6003      	str	r3, [r0, #0]
 8008fc0:	e7c5      	b.n	8008f4e <pow+0xde>
 8008fc2:	eeb0 0a48 	vmov.f32	s0, s16
 8008fc6:	eef0 0a68 	vmov.f32	s1, s17
 8008fca:	f000 fe88 	bl	8009cde <finite>
 8008fce:	9000      	str	r0, [sp, #0]
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f040 8081 	bne.w	80090d8 <pow+0x268>
 8008fd6:	ec47 6b10 	vmov	d0, r6, r7
 8008fda:	f000 fe80 	bl	8009cde <finite>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d07a      	beq.n	80090d8 <pow+0x268>
 8008fe2:	ec45 4b10 	vmov	d0, r4, r5
 8008fe6:	f000 fe7a 	bl	8009cde <finite>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d074      	beq.n	80090d8 <pow+0x268>
 8008fee:	ec53 2b18 	vmov	r2, r3, d8
 8008ff2:	ee18 0a10 	vmov	r0, s16
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f7f7 fdc0 	bl	8000b7c <__aeabi_dcmpun>
 8008ffc:	f999 9000 	ldrsb.w	r9, [r9]
 8009000:	4b4b      	ldr	r3, [pc, #300]	; (8009130 <pow+0x2c0>)
 8009002:	b1b0      	cbz	r0, 8009032 <pow+0x1c2>
 8009004:	2201      	movs	r2, #1
 8009006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800900a:	9b00      	ldr	r3, [sp, #0]
 800900c:	930a      	str	r3, [sp, #40]	; 0x28
 800900e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009012:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	d0c4      	beq.n	8008fa6 <pow+0x136>
 800901c:	4652      	mov	r2, sl
 800901e:	465b      	mov	r3, fp
 8009020:	4650      	mov	r0, sl
 8009022:	4659      	mov	r1, fp
 8009024:	f7f7 fc3a 	bl	800089c <__aeabi_ddiv>
 8009028:	f1b9 0f02 	cmp.w	r9, #2
 800902c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009030:	e7c1      	b.n	8008fb6 <pow+0x146>
 8009032:	2203      	movs	r2, #3
 8009034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009038:	900a      	str	r0, [sp, #40]	; 0x28
 800903a:	4629      	mov	r1, r5
 800903c:	4620      	mov	r0, r4
 800903e:	2200      	movs	r2, #0
 8009040:	4b3e      	ldr	r3, [pc, #248]	; (800913c <pow+0x2cc>)
 8009042:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009046:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800904a:	f7f7 fafd 	bl	8000648 <__aeabi_dmul>
 800904e:	4604      	mov	r4, r0
 8009050:	460d      	mov	r5, r1
 8009052:	f1b9 0f00 	cmp.w	r9, #0
 8009056:	d124      	bne.n	80090a2 <pow+0x232>
 8009058:	4b39      	ldr	r3, [pc, #228]	; (8009140 <pow+0x2d0>)
 800905a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800905e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009062:	4630      	mov	r0, r6
 8009064:	4652      	mov	r2, sl
 8009066:	465b      	mov	r3, fp
 8009068:	4639      	mov	r1, r7
 800906a:	f7f7 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 800906e:	2800      	cmp	r0, #0
 8009070:	d056      	beq.n	8009120 <pow+0x2b0>
 8009072:	ec45 4b10 	vmov	d0, r4, r5
 8009076:	f000 fe47 	bl	8009d08 <rint>
 800907a:	4622      	mov	r2, r4
 800907c:	462b      	mov	r3, r5
 800907e:	ec51 0b10 	vmov	r0, r1, d0
 8009082:	f7f7 fd49 	bl	8000b18 <__aeabi_dcmpeq>
 8009086:	b920      	cbnz	r0, 8009092 <pow+0x222>
 8009088:	4b2e      	ldr	r3, [pc, #184]	; (8009144 <pow+0x2d4>)
 800908a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800908e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009092:	f998 3000 	ldrsb.w	r3, [r8]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d142      	bne.n	8009120 <pow+0x2b0>
 800909a:	f7fd fe7b 	bl	8006d94 <__errno>
 800909e:	2322      	movs	r3, #34	; 0x22
 80090a0:	e78d      	b.n	8008fbe <pow+0x14e>
 80090a2:	4b29      	ldr	r3, [pc, #164]	; (8009148 <pow+0x2d8>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090aa:	4630      	mov	r0, r6
 80090ac:	4652      	mov	r2, sl
 80090ae:	465b      	mov	r3, fp
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fd3b 	bl	8000b2c <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d0eb      	beq.n	8009092 <pow+0x222>
 80090ba:	ec45 4b10 	vmov	d0, r4, r5
 80090be:	f000 fe23 	bl	8009d08 <rint>
 80090c2:	4622      	mov	r2, r4
 80090c4:	462b      	mov	r3, r5
 80090c6:	ec51 0b10 	vmov	r0, r1, d0
 80090ca:	f7f7 fd25 	bl	8000b18 <__aeabi_dcmpeq>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1df      	bne.n	8009092 <pow+0x222>
 80090d2:	2200      	movs	r2, #0
 80090d4:	4b18      	ldr	r3, [pc, #96]	; (8009138 <pow+0x2c8>)
 80090d6:	e7da      	b.n	800908e <pow+0x21e>
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	ec51 0b18 	vmov	r0, r1, d8
 80090e0:	f7f7 fd1a 	bl	8000b18 <__aeabi_dcmpeq>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f43f af3a 	beq.w	8008f5e <pow+0xee>
 80090ea:	ec47 6b10 	vmov	d0, r6, r7
 80090ee:	f000 fdf6 	bl	8009cde <finite>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f43f af33 	beq.w	8008f5e <pow+0xee>
 80090f8:	ec45 4b10 	vmov	d0, r4, r5
 80090fc:	f000 fdef 	bl	8009cde <finite>
 8009100:	2800      	cmp	r0, #0
 8009102:	f43f af2c 	beq.w	8008f5e <pow+0xee>
 8009106:	2304      	movs	r3, #4
 8009108:	9302      	str	r3, [sp, #8]
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <pow+0x2c0>)
 800910c:	9303      	str	r3, [sp, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	930a      	str	r3, [sp, #40]	; 0x28
 8009112:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009116:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800911a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800911e:	e7b8      	b.n	8009092 <pow+0x222>
 8009120:	a802      	add	r0, sp, #8
 8009122:	f000 fde4 	bl	8009cee <matherr>
 8009126:	2800      	cmp	r0, #0
 8009128:	f47f af11 	bne.w	8008f4e <pow+0xde>
 800912c:	e7b5      	b.n	800909a <pow+0x22a>
 800912e:	bf00      	nop
 8009130:	0800a710 	.word	0x0800a710
 8009134:	3ff00000 	.word	0x3ff00000
 8009138:	fff00000 	.word	0xfff00000
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	47efffff 	.word	0x47efffff
 8009144:	c7efffff 	.word	0xc7efffff
 8009148:	7ff00000 	.word	0x7ff00000
 800914c:	20000230 	.word	0x20000230

08009150 <__ieee754_pow>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	b091      	sub	sp, #68	; 0x44
 8009156:	ed8d 1b00 	vstr	d1, [sp]
 800915a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800915e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009162:	ea58 0302 	orrs.w	r3, r8, r2
 8009166:	ec57 6b10 	vmov	r6, r7, d0
 800916a:	f000 84be 	beq.w	8009aea <__ieee754_pow+0x99a>
 800916e:	4b7a      	ldr	r3, [pc, #488]	; (8009358 <__ieee754_pow+0x208>)
 8009170:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009174:	429c      	cmp	r4, r3
 8009176:	463d      	mov	r5, r7
 8009178:	ee10 aa10 	vmov	sl, s0
 800917c:	dc09      	bgt.n	8009192 <__ieee754_pow+0x42>
 800917e:	d103      	bne.n	8009188 <__ieee754_pow+0x38>
 8009180:	b93e      	cbnz	r6, 8009192 <__ieee754_pow+0x42>
 8009182:	45a0      	cmp	r8, r4
 8009184:	dc0d      	bgt.n	80091a2 <__ieee754_pow+0x52>
 8009186:	e001      	b.n	800918c <__ieee754_pow+0x3c>
 8009188:	4598      	cmp	r8, r3
 800918a:	dc02      	bgt.n	8009192 <__ieee754_pow+0x42>
 800918c:	4598      	cmp	r8, r3
 800918e:	d10e      	bne.n	80091ae <__ieee754_pow+0x5e>
 8009190:	b16a      	cbz	r2, 80091ae <__ieee754_pow+0x5e>
 8009192:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009196:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800919a:	ea54 030a 	orrs.w	r3, r4, sl
 800919e:	f000 84a4 	beq.w	8009aea <__ieee754_pow+0x99a>
 80091a2:	486e      	ldr	r0, [pc, #440]	; (800935c <__ieee754_pow+0x20c>)
 80091a4:	b011      	add	sp, #68	; 0x44
 80091a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	f000 bda5 	b.w	8009cf8 <nan>
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	da53      	bge.n	800925a <__ieee754_pow+0x10a>
 80091b2:	4b6b      	ldr	r3, [pc, #428]	; (8009360 <__ieee754_pow+0x210>)
 80091b4:	4598      	cmp	r8, r3
 80091b6:	dc4d      	bgt.n	8009254 <__ieee754_pow+0x104>
 80091b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80091bc:	4598      	cmp	r8, r3
 80091be:	dd4c      	ble.n	800925a <__ieee754_pow+0x10a>
 80091c0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80091c4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80091c8:	2b14      	cmp	r3, #20
 80091ca:	dd26      	ble.n	800921a <__ieee754_pow+0xca>
 80091cc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80091d0:	fa22 f103 	lsr.w	r1, r2, r3
 80091d4:	fa01 f303 	lsl.w	r3, r1, r3
 80091d8:	4293      	cmp	r3, r2
 80091da:	d13e      	bne.n	800925a <__ieee754_pow+0x10a>
 80091dc:	f001 0101 	and.w	r1, r1, #1
 80091e0:	f1c1 0b02 	rsb	fp, r1, #2
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	d15b      	bne.n	80092a0 <__ieee754_pow+0x150>
 80091e8:	4b5b      	ldr	r3, [pc, #364]	; (8009358 <__ieee754_pow+0x208>)
 80091ea:	4598      	cmp	r8, r3
 80091ec:	d124      	bne.n	8009238 <__ieee754_pow+0xe8>
 80091ee:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80091f2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80091f6:	ea53 030a 	orrs.w	r3, r3, sl
 80091fa:	f000 8476 	beq.w	8009aea <__ieee754_pow+0x99a>
 80091fe:	4b59      	ldr	r3, [pc, #356]	; (8009364 <__ieee754_pow+0x214>)
 8009200:	429c      	cmp	r4, r3
 8009202:	dd2d      	ble.n	8009260 <__ieee754_pow+0x110>
 8009204:	f1b9 0f00 	cmp.w	r9, #0
 8009208:	f280 8473 	bge.w	8009af2 <__ieee754_pow+0x9a2>
 800920c:	2000      	movs	r0, #0
 800920e:	2100      	movs	r1, #0
 8009210:	ec41 0b10 	vmov	d0, r0, r1
 8009214:	b011      	add	sp, #68	; 0x44
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921a:	2a00      	cmp	r2, #0
 800921c:	d13e      	bne.n	800929c <__ieee754_pow+0x14c>
 800921e:	f1c3 0314 	rsb	r3, r3, #20
 8009222:	fa48 f103 	asr.w	r1, r8, r3
 8009226:	fa01 f303 	lsl.w	r3, r1, r3
 800922a:	4543      	cmp	r3, r8
 800922c:	f040 8469 	bne.w	8009b02 <__ieee754_pow+0x9b2>
 8009230:	f001 0101 	and.w	r1, r1, #1
 8009234:	f1c1 0b02 	rsb	fp, r1, #2
 8009238:	4b4b      	ldr	r3, [pc, #300]	; (8009368 <__ieee754_pow+0x218>)
 800923a:	4598      	cmp	r8, r3
 800923c:	d118      	bne.n	8009270 <__ieee754_pow+0x120>
 800923e:	f1b9 0f00 	cmp.w	r9, #0
 8009242:	f280 845a 	bge.w	8009afa <__ieee754_pow+0x9aa>
 8009246:	4948      	ldr	r1, [pc, #288]	; (8009368 <__ieee754_pow+0x218>)
 8009248:	4632      	mov	r2, r6
 800924a:	463b      	mov	r3, r7
 800924c:	2000      	movs	r0, #0
 800924e:	f7f7 fb25 	bl	800089c <__aeabi_ddiv>
 8009252:	e7dd      	b.n	8009210 <__ieee754_pow+0xc0>
 8009254:	f04f 0b02 	mov.w	fp, #2
 8009258:	e7c4      	b.n	80091e4 <__ieee754_pow+0x94>
 800925a:	f04f 0b00 	mov.w	fp, #0
 800925e:	e7c1      	b.n	80091e4 <__ieee754_pow+0x94>
 8009260:	f1b9 0f00 	cmp.w	r9, #0
 8009264:	dad2      	bge.n	800920c <__ieee754_pow+0xbc>
 8009266:	e9dd 0300 	ldrd	r0, r3, [sp]
 800926a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800926e:	e7cf      	b.n	8009210 <__ieee754_pow+0xc0>
 8009270:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009274:	d106      	bne.n	8009284 <__ieee754_pow+0x134>
 8009276:	4632      	mov	r2, r6
 8009278:	463b      	mov	r3, r7
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	f7f7 f9e3 	bl	8000648 <__aeabi_dmul>
 8009282:	e7c5      	b.n	8009210 <__ieee754_pow+0xc0>
 8009284:	4b39      	ldr	r3, [pc, #228]	; (800936c <__ieee754_pow+0x21c>)
 8009286:	4599      	cmp	r9, r3
 8009288:	d10a      	bne.n	80092a0 <__ieee754_pow+0x150>
 800928a:	2d00      	cmp	r5, #0
 800928c:	db08      	blt.n	80092a0 <__ieee754_pow+0x150>
 800928e:	ec47 6b10 	vmov	d0, r6, r7
 8009292:	b011      	add	sp, #68	; 0x44
 8009294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	f000 bc68 	b.w	8009b6c <__ieee754_sqrt>
 800929c:	f04f 0b00 	mov.w	fp, #0
 80092a0:	ec47 6b10 	vmov	d0, r6, r7
 80092a4:	f000 fd12 	bl	8009ccc <fabs>
 80092a8:	ec51 0b10 	vmov	r0, r1, d0
 80092ac:	f1ba 0f00 	cmp.w	sl, #0
 80092b0:	d127      	bne.n	8009302 <__ieee754_pow+0x1b2>
 80092b2:	b124      	cbz	r4, 80092be <__ieee754_pow+0x16e>
 80092b4:	4b2c      	ldr	r3, [pc, #176]	; (8009368 <__ieee754_pow+0x218>)
 80092b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d121      	bne.n	8009302 <__ieee754_pow+0x1b2>
 80092be:	f1b9 0f00 	cmp.w	r9, #0
 80092c2:	da05      	bge.n	80092d0 <__ieee754_pow+0x180>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	2000      	movs	r0, #0
 80092ca:	4927      	ldr	r1, [pc, #156]	; (8009368 <__ieee754_pow+0x218>)
 80092cc:	f7f7 fae6 	bl	800089c <__aeabi_ddiv>
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	da9d      	bge.n	8009210 <__ieee754_pow+0xc0>
 80092d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80092d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092dc:	ea54 030b 	orrs.w	r3, r4, fp
 80092e0:	d108      	bne.n	80092f4 <__ieee754_pow+0x1a4>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4610      	mov	r0, r2
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7f6 fff5 	bl	80002d8 <__aeabi_dsub>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	e7ac      	b.n	800924e <__ieee754_pow+0xfe>
 80092f4:	f1bb 0f01 	cmp.w	fp, #1
 80092f8:	d18a      	bne.n	8009210 <__ieee754_pow+0xc0>
 80092fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092fe:	4619      	mov	r1, r3
 8009300:	e786      	b.n	8009210 <__ieee754_pow+0xc0>
 8009302:	0fed      	lsrs	r5, r5, #31
 8009304:	1e6b      	subs	r3, r5, #1
 8009306:	930d      	str	r3, [sp, #52]	; 0x34
 8009308:	ea5b 0303 	orrs.w	r3, fp, r3
 800930c:	d102      	bne.n	8009314 <__ieee754_pow+0x1c4>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	e7e8      	b.n	80092e6 <__ieee754_pow+0x196>
 8009314:	4b16      	ldr	r3, [pc, #88]	; (8009370 <__ieee754_pow+0x220>)
 8009316:	4598      	cmp	r8, r3
 8009318:	f340 80fe 	ble.w	8009518 <__ieee754_pow+0x3c8>
 800931c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009320:	4598      	cmp	r8, r3
 8009322:	dd0a      	ble.n	800933a <__ieee754_pow+0x1ea>
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <__ieee754_pow+0x214>)
 8009326:	429c      	cmp	r4, r3
 8009328:	dc0d      	bgt.n	8009346 <__ieee754_pow+0x1f6>
 800932a:	f1b9 0f00 	cmp.w	r9, #0
 800932e:	f6bf af6d 	bge.w	800920c <__ieee754_pow+0xbc>
 8009332:	a307      	add	r3, pc, #28	; (adr r3, 8009350 <__ieee754_pow+0x200>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	e79f      	b.n	800927a <__ieee754_pow+0x12a>
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <__ieee754_pow+0x224>)
 800933c:	429c      	cmp	r4, r3
 800933e:	ddf4      	ble.n	800932a <__ieee754_pow+0x1da>
 8009340:	4b09      	ldr	r3, [pc, #36]	; (8009368 <__ieee754_pow+0x218>)
 8009342:	429c      	cmp	r4, r3
 8009344:	dd18      	ble.n	8009378 <__ieee754_pow+0x228>
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	dcf2      	bgt.n	8009332 <__ieee754_pow+0x1e2>
 800934c:	e75e      	b.n	800920c <__ieee754_pow+0xbc>
 800934e:	bf00      	nop
 8009350:	8800759c 	.word	0x8800759c
 8009354:	7e37e43c 	.word	0x7e37e43c
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	0800a5f9 	.word	0x0800a5f9
 8009360:	433fffff 	.word	0x433fffff
 8009364:	3fefffff 	.word	0x3fefffff
 8009368:	3ff00000 	.word	0x3ff00000
 800936c:	3fe00000 	.word	0x3fe00000
 8009370:	41e00000 	.word	0x41e00000
 8009374:	3feffffe 	.word	0x3feffffe
 8009378:	2200      	movs	r2, #0
 800937a:	4b63      	ldr	r3, [pc, #396]	; (8009508 <__ieee754_pow+0x3b8>)
 800937c:	f7f6 ffac 	bl	80002d8 <__aeabi_dsub>
 8009380:	a355      	add	r3, pc, #340	; (adr r3, 80094d8 <__ieee754_pow+0x388>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
 800938a:	f7f7 f95d 	bl	8000648 <__aeabi_dmul>
 800938e:	a354      	add	r3, pc, #336	; (adr r3, 80094e0 <__ieee754_pow+0x390>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	4606      	mov	r6, r0
 8009396:	460f      	mov	r7, r1
 8009398:	4620      	mov	r0, r4
 800939a:	4629      	mov	r1, r5
 800939c:	f7f7 f954 	bl	8000648 <__aeabi_dmul>
 80093a0:	2200      	movs	r2, #0
 80093a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a6:	4b59      	ldr	r3, [pc, #356]	; (800950c <__ieee754_pow+0x3bc>)
 80093a8:	4620      	mov	r0, r4
 80093aa:	4629      	mov	r1, r5
 80093ac:	f7f7 f94c 	bl	8000648 <__aeabi_dmul>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	a14c      	add	r1, pc, #304	; (adr r1, 80094e8 <__ieee754_pow+0x398>)
 80093b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ba:	f7f6 ff8d 	bl	80002d8 <__aeabi_dsub>
 80093be:	4622      	mov	r2, r4
 80093c0:	462b      	mov	r3, r5
 80093c2:	f7f7 f941 	bl	8000648 <__aeabi_dmul>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	2000      	movs	r0, #0
 80093cc:	4950      	ldr	r1, [pc, #320]	; (8009510 <__ieee754_pow+0x3c0>)
 80093ce:	f7f6 ff83 	bl	80002d8 <__aeabi_dsub>
 80093d2:	4622      	mov	r2, r4
 80093d4:	462b      	mov	r3, r5
 80093d6:	4680      	mov	r8, r0
 80093d8:	4689      	mov	r9, r1
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f7f7 f933 	bl	8000648 <__aeabi_dmul>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4640      	mov	r0, r8
 80093e8:	4649      	mov	r1, r9
 80093ea:	f7f7 f92d 	bl	8000648 <__aeabi_dmul>
 80093ee:	a340      	add	r3, pc, #256	; (adr r3, 80094f0 <__ieee754_pow+0x3a0>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f7f7 f928 	bl	8000648 <__aeabi_dmul>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009400:	f7f6 ff6a 	bl	80002d8 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	4630      	mov	r0, r6
 800940e:	4639      	mov	r1, r7
 8009410:	f7f6 ff64 	bl	80002dc <__adddf3>
 8009414:	2000      	movs	r0, #0
 8009416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800941a:	4632      	mov	r2, r6
 800941c:	463b      	mov	r3, r7
 800941e:	f7f6 ff5b 	bl	80002d8 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f6 ff55 	bl	80002d8 <__aeabi_dsub>
 800942e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009430:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009434:	4313      	orrs	r3, r2
 8009436:	4606      	mov	r6, r0
 8009438:	460f      	mov	r7, r1
 800943a:	f040 81eb 	bne.w	8009814 <__ieee754_pow+0x6c4>
 800943e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80094f8 <__ieee754_pow+0x3a8>
 8009442:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009446:	2400      	movs	r4, #0
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009450:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009454:	f7f6 ff40 	bl	80002d8 <__aeabi_dsub>
 8009458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800945c:	f7f7 f8f4 	bl	8000648 <__aeabi_dmul>
 8009460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009464:	4680      	mov	r8, r0
 8009466:	4689      	mov	r9, r1
 8009468:	4630      	mov	r0, r6
 800946a:	4639      	mov	r1, r7
 800946c:	f7f7 f8ec 	bl	8000648 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	f7f6 ff30 	bl	80002dc <__adddf3>
 800947c:	4622      	mov	r2, r4
 800947e:	462b      	mov	r3, r5
 8009480:	4680      	mov	r8, r0
 8009482:	4689      	mov	r9, r1
 8009484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009488:	f7f7 f8de 	bl	8000648 <__aeabi_dmul>
 800948c:	460b      	mov	r3, r1
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
 8009492:	4602      	mov	r2, r0
 8009494:	4649      	mov	r1, r9
 8009496:	4640      	mov	r0, r8
 8009498:	e9cd 4500 	strd	r4, r5, [sp]
 800949c:	f7f6 ff1e 	bl	80002dc <__adddf3>
 80094a0:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <__ieee754_pow+0x3c4>)
 80094a2:	4299      	cmp	r1, r3
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	468b      	mov	fp, r1
 80094aa:	f340 82f7 	ble.w	8009a9c <__ieee754_pow+0x94c>
 80094ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80094b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80094b6:	4303      	orrs	r3, r0
 80094b8:	f000 81ea 	beq.w	8009890 <__ieee754_pow+0x740>
 80094bc:	a310      	add	r3, pc, #64	; (adr r3, 8009500 <__ieee754_pow+0x3b0>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c6:	f7f7 f8bf 	bl	8000648 <__aeabi_dmul>
 80094ca:	a30d      	add	r3, pc, #52	; (adr r3, 8009500 <__ieee754_pow+0x3b0>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	e6d5      	b.n	800927e <__ieee754_pow+0x12e>
 80094d2:	bf00      	nop
 80094d4:	f3af 8000 	nop.w
 80094d8:	60000000 	.word	0x60000000
 80094dc:	3ff71547 	.word	0x3ff71547
 80094e0:	f85ddf44 	.word	0xf85ddf44
 80094e4:	3e54ae0b 	.word	0x3e54ae0b
 80094e8:	55555555 	.word	0x55555555
 80094ec:	3fd55555 	.word	0x3fd55555
 80094f0:	652b82fe 	.word	0x652b82fe
 80094f4:	3ff71547 	.word	0x3ff71547
 80094f8:	00000000 	.word	0x00000000
 80094fc:	bff00000 	.word	0xbff00000
 8009500:	8800759c 	.word	0x8800759c
 8009504:	7e37e43c 	.word	0x7e37e43c
 8009508:	3ff00000 	.word	0x3ff00000
 800950c:	3fd00000 	.word	0x3fd00000
 8009510:	3fe00000 	.word	0x3fe00000
 8009514:	408fffff 	.word	0x408fffff
 8009518:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	da05      	bge.n	800952e <__ieee754_pow+0x3de>
 8009522:	4bd3      	ldr	r3, [pc, #844]	; (8009870 <__ieee754_pow+0x720>)
 8009524:	f7f7 f890 	bl	8000648 <__aeabi_dmul>
 8009528:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800952c:	460c      	mov	r4, r1
 800952e:	1523      	asrs	r3, r4, #20
 8009530:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009534:	4413      	add	r3, r2
 8009536:	9309      	str	r3, [sp, #36]	; 0x24
 8009538:	4bce      	ldr	r3, [pc, #824]	; (8009874 <__ieee754_pow+0x724>)
 800953a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800953e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009542:	429c      	cmp	r4, r3
 8009544:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009548:	dd08      	ble.n	800955c <__ieee754_pow+0x40c>
 800954a:	4bcb      	ldr	r3, [pc, #812]	; (8009878 <__ieee754_pow+0x728>)
 800954c:	429c      	cmp	r4, r3
 800954e:	f340 815e 	ble.w	800980e <__ieee754_pow+0x6be>
 8009552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009554:	3301      	adds	r3, #1
 8009556:	9309      	str	r3, [sp, #36]	; 0x24
 8009558:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800955c:	f04f 0a00 	mov.w	sl, #0
 8009560:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009564:	930c      	str	r3, [sp, #48]	; 0x30
 8009566:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009568:	4bc4      	ldr	r3, [pc, #784]	; (800987c <__ieee754_pow+0x72c>)
 800956a:	4413      	add	r3, r2
 800956c:	ed93 7b00 	vldr	d7, [r3]
 8009570:	4629      	mov	r1, r5
 8009572:	ec53 2b17 	vmov	r2, r3, d7
 8009576:	ed8d 7b06 	vstr	d7, [sp, #24]
 800957a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800957e:	f7f6 feab 	bl	80002d8 <__aeabi_dsub>
 8009582:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800958e:	f7f6 fea5 	bl	80002dc <__adddf3>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	2000      	movs	r0, #0
 8009598:	49b9      	ldr	r1, [pc, #740]	; (8009880 <__ieee754_pow+0x730>)
 800959a:	f7f7 f97f 	bl	800089c <__aeabi_ddiv>
 800959e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4630      	mov	r0, r6
 80095a8:	4639      	mov	r1, r7
 80095aa:	f7f7 f84d 	bl	8000648 <__aeabi_dmul>
 80095ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095b2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80095b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80095ba:	2300      	movs	r3, #0
 80095bc:	9302      	str	r3, [sp, #8]
 80095be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80095c2:	106d      	asrs	r5, r5, #1
 80095c4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80095c8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80095cc:	2200      	movs	r2, #0
 80095ce:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	4614      	mov	r4, r2
 80095d8:	461d      	mov	r5, r3
 80095da:	f7f7 f835 	bl	8000648 <__aeabi_dmul>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f6 fe77 	bl	80002d8 <__aeabi_dsub>
 80095ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095ee:	4606      	mov	r6, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	4620      	mov	r0, r4
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7f6 fe6f 	bl	80002d8 <__aeabi_dsub>
 80095fa:	4602      	mov	r2, r0
 80095fc:	460b      	mov	r3, r1
 80095fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009602:	f7f6 fe69 	bl	80002d8 <__aeabi_dsub>
 8009606:	4642      	mov	r2, r8
 8009608:	464b      	mov	r3, r9
 800960a:	f7f7 f81d 	bl	8000648 <__aeabi_dmul>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4630      	mov	r0, r6
 8009614:	4639      	mov	r1, r7
 8009616:	f7f6 fe5f 	bl	80002d8 <__aeabi_dsub>
 800961a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800961e:	f7f7 f813 	bl	8000648 <__aeabi_dmul>
 8009622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009626:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800962a:	4610      	mov	r0, r2
 800962c:	4619      	mov	r1, r3
 800962e:	f7f7 f80b 	bl	8000648 <__aeabi_dmul>
 8009632:	a37b      	add	r3, pc, #492	; (adr r3, 8009820 <__ieee754_pow+0x6d0>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	f7f7 f804 	bl	8000648 <__aeabi_dmul>
 8009640:	a379      	add	r3, pc, #484	; (adr r3, 8009828 <__ieee754_pow+0x6d8>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 fe49 	bl	80002dc <__adddf3>
 800964a:	4622      	mov	r2, r4
 800964c:	462b      	mov	r3, r5
 800964e:	f7f6 fffb 	bl	8000648 <__aeabi_dmul>
 8009652:	a377      	add	r3, pc, #476	; (adr r3, 8009830 <__ieee754_pow+0x6e0>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f6 fe40 	bl	80002dc <__adddf3>
 800965c:	4622      	mov	r2, r4
 800965e:	462b      	mov	r3, r5
 8009660:	f7f6 fff2 	bl	8000648 <__aeabi_dmul>
 8009664:	a374      	add	r3, pc, #464	; (adr r3, 8009838 <__ieee754_pow+0x6e8>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f6 fe37 	bl	80002dc <__adddf3>
 800966e:	4622      	mov	r2, r4
 8009670:	462b      	mov	r3, r5
 8009672:	f7f6 ffe9 	bl	8000648 <__aeabi_dmul>
 8009676:	a372      	add	r3, pc, #456	; (adr r3, 8009840 <__ieee754_pow+0x6f0>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f6 fe2e 	bl	80002dc <__adddf3>
 8009680:	4622      	mov	r2, r4
 8009682:	462b      	mov	r3, r5
 8009684:	f7f6 ffe0 	bl	8000648 <__aeabi_dmul>
 8009688:	a36f      	add	r3, pc, #444	; (adr r3, 8009848 <__ieee754_pow+0x6f8>)
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f7f6 fe25 	bl	80002dc <__adddf3>
 8009692:	4622      	mov	r2, r4
 8009694:	4606      	mov	r6, r0
 8009696:	460f      	mov	r7, r1
 8009698:	462b      	mov	r3, r5
 800969a:	4620      	mov	r0, r4
 800969c:	4629      	mov	r1, r5
 800969e:	f7f6 ffd3 	bl	8000648 <__aeabi_dmul>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4630      	mov	r0, r6
 80096a8:	4639      	mov	r1, r7
 80096aa:	f7f6 ffcd 	bl	8000648 <__aeabi_dmul>
 80096ae:	4642      	mov	r2, r8
 80096b0:	4604      	mov	r4, r0
 80096b2:	460d      	mov	r5, r1
 80096b4:	464b      	mov	r3, r9
 80096b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096ba:	f7f6 fe0f 	bl	80002dc <__adddf3>
 80096be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096c2:	f7f6 ffc1 	bl	8000648 <__aeabi_dmul>
 80096c6:	4622      	mov	r2, r4
 80096c8:	462b      	mov	r3, r5
 80096ca:	f7f6 fe07 	bl	80002dc <__adddf3>
 80096ce:	4642      	mov	r2, r8
 80096d0:	4606      	mov	r6, r0
 80096d2:	460f      	mov	r7, r1
 80096d4:	464b      	mov	r3, r9
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f6 ffb5 	bl	8000648 <__aeabi_dmul>
 80096de:	2200      	movs	r2, #0
 80096e0:	4b68      	ldr	r3, [pc, #416]	; (8009884 <__ieee754_pow+0x734>)
 80096e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096e6:	f7f6 fdf9 	bl	80002dc <__adddf3>
 80096ea:	4632      	mov	r2, r6
 80096ec:	463b      	mov	r3, r7
 80096ee:	f7f6 fdf5 	bl	80002dc <__adddf3>
 80096f2:	9802      	ldr	r0, [sp, #8]
 80096f4:	460d      	mov	r5, r1
 80096f6:	4604      	mov	r4, r0
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4640      	mov	r0, r8
 80096fe:	4649      	mov	r1, r9
 8009700:	f7f6 ffa2 	bl	8000648 <__aeabi_dmul>
 8009704:	2200      	movs	r2, #0
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	4b5e      	ldr	r3, [pc, #376]	; (8009884 <__ieee754_pow+0x734>)
 800970c:	4620      	mov	r0, r4
 800970e:	4629      	mov	r1, r5
 8009710:	f7f6 fde2 	bl	80002d8 <__aeabi_dsub>
 8009714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009718:	f7f6 fdde 	bl	80002d8 <__aeabi_dsub>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f6 fdd8 	bl	80002d8 <__aeabi_dsub>
 8009728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800972c:	f7f6 ff8c 	bl	8000648 <__aeabi_dmul>
 8009730:	4622      	mov	r2, r4
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	462b      	mov	r3, r5
 8009738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800973c:	f7f6 ff84 	bl	8000648 <__aeabi_dmul>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4630      	mov	r0, r6
 8009746:	4639      	mov	r1, r7
 8009748:	f7f6 fdc8 	bl	80002dc <__adddf3>
 800974c:	4606      	mov	r6, r0
 800974e:	460f      	mov	r7, r1
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4640      	mov	r0, r8
 8009756:	4649      	mov	r1, r9
 8009758:	f7f6 fdc0 	bl	80002dc <__adddf3>
 800975c:	9802      	ldr	r0, [sp, #8]
 800975e:	a33c      	add	r3, pc, #240	; (adr r3, 8009850 <__ieee754_pow+0x700>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	4604      	mov	r4, r0
 8009766:	460d      	mov	r5, r1
 8009768:	f7f6 ff6e 	bl	8000648 <__aeabi_dmul>
 800976c:	4642      	mov	r2, r8
 800976e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009772:	464b      	mov	r3, r9
 8009774:	4620      	mov	r0, r4
 8009776:	4629      	mov	r1, r5
 8009778:	f7f6 fdae 	bl	80002d8 <__aeabi_dsub>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f6 fda8 	bl	80002d8 <__aeabi_dsub>
 8009788:	a333      	add	r3, pc, #204	; (adr r3, 8009858 <__ieee754_pow+0x708>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 ff5b 	bl	8000648 <__aeabi_dmul>
 8009792:	a333      	add	r3, pc, #204	; (adr r3, 8009860 <__ieee754_pow+0x710>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	4606      	mov	r6, r0
 800979a:	460f      	mov	r7, r1
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 ff52 	bl	8000648 <__aeabi_dmul>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4630      	mov	r0, r6
 80097aa:	4639      	mov	r1, r7
 80097ac:	f7f6 fd96 	bl	80002dc <__adddf3>
 80097b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097b2:	4b35      	ldr	r3, [pc, #212]	; (8009888 <__ieee754_pow+0x738>)
 80097b4:	4413      	add	r3, r2
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fd8f 	bl	80002dc <__adddf3>
 80097be:	4604      	mov	r4, r0
 80097c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097c2:	460d      	mov	r5, r1
 80097c4:	f7f6 fed6 	bl	8000574 <__aeabi_i2d>
 80097c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ca:	4b30      	ldr	r3, [pc, #192]	; (800988c <__ieee754_pow+0x73c>)
 80097cc:	4413      	add	r3, r2
 80097ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097d2:	4606      	mov	r6, r0
 80097d4:	460f      	mov	r7, r1
 80097d6:	4622      	mov	r2, r4
 80097d8:	462b      	mov	r3, r5
 80097da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097de:	f7f6 fd7d 	bl	80002dc <__adddf3>
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	f7f6 fd79 	bl	80002dc <__adddf3>
 80097ea:	4632      	mov	r2, r6
 80097ec:	463b      	mov	r3, r7
 80097ee:	f7f6 fd75 	bl	80002dc <__adddf3>
 80097f2:	9802      	ldr	r0, [sp, #8]
 80097f4:	4632      	mov	r2, r6
 80097f6:	463b      	mov	r3, r7
 80097f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097fc:	f7f6 fd6c 	bl	80002d8 <__aeabi_dsub>
 8009800:	4642      	mov	r2, r8
 8009802:	464b      	mov	r3, r9
 8009804:	f7f6 fd68 	bl	80002d8 <__aeabi_dsub>
 8009808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800980c:	e607      	b.n	800941e <__ieee754_pow+0x2ce>
 800980e:	f04f 0a01 	mov.w	sl, #1
 8009812:	e6a5      	b.n	8009560 <__ieee754_pow+0x410>
 8009814:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009868 <__ieee754_pow+0x718>
 8009818:	e613      	b.n	8009442 <__ieee754_pow+0x2f2>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	4a454eef 	.word	0x4a454eef
 8009824:	3fca7e28 	.word	0x3fca7e28
 8009828:	93c9db65 	.word	0x93c9db65
 800982c:	3fcd864a 	.word	0x3fcd864a
 8009830:	a91d4101 	.word	0xa91d4101
 8009834:	3fd17460 	.word	0x3fd17460
 8009838:	518f264d 	.word	0x518f264d
 800983c:	3fd55555 	.word	0x3fd55555
 8009840:	db6fabff 	.word	0xdb6fabff
 8009844:	3fdb6db6 	.word	0x3fdb6db6
 8009848:	33333303 	.word	0x33333303
 800984c:	3fe33333 	.word	0x3fe33333
 8009850:	e0000000 	.word	0xe0000000
 8009854:	3feec709 	.word	0x3feec709
 8009858:	dc3a03fd 	.word	0xdc3a03fd
 800985c:	3feec709 	.word	0x3feec709
 8009860:	145b01f5 	.word	0x145b01f5
 8009864:	be3e2fe0 	.word	0xbe3e2fe0
 8009868:	00000000 	.word	0x00000000
 800986c:	3ff00000 	.word	0x3ff00000
 8009870:	43400000 	.word	0x43400000
 8009874:	0003988e 	.word	0x0003988e
 8009878:	000bb679 	.word	0x000bb679
 800987c:	0800a718 	.word	0x0800a718
 8009880:	3ff00000 	.word	0x3ff00000
 8009884:	40080000 	.word	0x40080000
 8009888:	0800a738 	.word	0x0800a738
 800988c:	0800a728 	.word	0x0800a728
 8009890:	a3b4      	add	r3, pc, #720	; (adr r3, 8009b64 <__ieee754_pow+0xa14>)
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f6 fd1f 	bl	80002dc <__adddf3>
 800989e:	4622      	mov	r2, r4
 80098a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a4:	462b      	mov	r3, r5
 80098a6:	4630      	mov	r0, r6
 80098a8:	4639      	mov	r1, r7
 80098aa:	f7f6 fd15 	bl	80002d8 <__aeabi_dsub>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b6:	f7f7 f957 	bl	8000b68 <__aeabi_dcmpgt>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f47f adfe 	bne.w	80094bc <__ieee754_pow+0x36c>
 80098c0:	4aa3      	ldr	r2, [pc, #652]	; (8009b50 <__ieee754_pow+0xa00>)
 80098c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098c6:	4293      	cmp	r3, r2
 80098c8:	f340 810a 	ble.w	8009ae0 <__ieee754_pow+0x990>
 80098cc:	151b      	asrs	r3, r3, #20
 80098ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80098d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80098d6:	fa4a f303 	asr.w	r3, sl, r3
 80098da:	445b      	add	r3, fp
 80098dc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80098e0:	4e9c      	ldr	r6, [pc, #624]	; (8009b54 <__ieee754_pow+0xa04>)
 80098e2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80098e6:	4116      	asrs	r6, r2
 80098e8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80098ec:	2000      	movs	r0, #0
 80098ee:	ea23 0106 	bic.w	r1, r3, r6
 80098f2:	f1c2 0214 	rsb	r2, r2, #20
 80098f6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80098fa:	fa4a fa02 	asr.w	sl, sl, r2
 80098fe:	f1bb 0f00 	cmp.w	fp, #0
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	bfb8      	it	lt
 800990c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009910:	f7f6 fce2 	bl	80002d8 <__aeabi_dsub>
 8009914:	e9cd 0100 	strd	r0, r1, [sp]
 8009918:	4642      	mov	r2, r8
 800991a:	464b      	mov	r3, r9
 800991c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009920:	f7f6 fcdc 	bl	80002dc <__adddf3>
 8009924:	2000      	movs	r0, #0
 8009926:	a378      	add	r3, pc, #480	; (adr r3, 8009b08 <__ieee754_pow+0x9b8>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	4604      	mov	r4, r0
 800992e:	460d      	mov	r5, r1
 8009930:	f7f6 fe8a 	bl	8000648 <__aeabi_dmul>
 8009934:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009938:	4606      	mov	r6, r0
 800993a:	460f      	mov	r7, r1
 800993c:	4620      	mov	r0, r4
 800993e:	4629      	mov	r1, r5
 8009940:	f7f6 fcca 	bl	80002d8 <__aeabi_dsub>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f6 fcc4 	bl	80002d8 <__aeabi_dsub>
 8009950:	a36f      	add	r3, pc, #444	; (adr r3, 8009b10 <__ieee754_pow+0x9c0>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fe77 	bl	8000648 <__aeabi_dmul>
 800995a:	a36f      	add	r3, pc, #444	; (adr r3, 8009b18 <__ieee754_pow+0x9c8>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	4620      	mov	r0, r4
 8009966:	4629      	mov	r1, r5
 8009968:	f7f6 fe6e 	bl	8000648 <__aeabi_dmul>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f6 fcb2 	bl	80002dc <__adddf3>
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f6 fcaa 	bl	80002dc <__adddf3>
 8009988:	4632      	mov	r2, r6
 800998a:	463b      	mov	r3, r7
 800998c:	4680      	mov	r8, r0
 800998e:	4689      	mov	r9, r1
 8009990:	f7f6 fca2 	bl	80002d8 <__aeabi_dsub>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4620      	mov	r0, r4
 800999a:	4629      	mov	r1, r5
 800999c:	f7f6 fc9c 	bl	80002d8 <__aeabi_dsub>
 80099a0:	4642      	mov	r2, r8
 80099a2:	4606      	mov	r6, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	464b      	mov	r3, r9
 80099a8:	4640      	mov	r0, r8
 80099aa:	4649      	mov	r1, r9
 80099ac:	f7f6 fe4c 	bl	8000648 <__aeabi_dmul>
 80099b0:	a35b      	add	r3, pc, #364	; (adr r3, 8009b20 <__ieee754_pow+0x9d0>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	f7f6 fe45 	bl	8000648 <__aeabi_dmul>
 80099be:	a35a      	add	r3, pc, #360	; (adr r3, 8009b28 <__ieee754_pow+0x9d8>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fc88 	bl	80002d8 <__aeabi_dsub>
 80099c8:	4622      	mov	r2, r4
 80099ca:	462b      	mov	r3, r5
 80099cc:	f7f6 fe3c 	bl	8000648 <__aeabi_dmul>
 80099d0:	a357      	add	r3, pc, #348	; (adr r3, 8009b30 <__ieee754_pow+0x9e0>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fc81 	bl	80002dc <__adddf3>
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	f7f6 fe33 	bl	8000648 <__aeabi_dmul>
 80099e2:	a355      	add	r3, pc, #340	; (adr r3, 8009b38 <__ieee754_pow+0x9e8>)
 80099e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e8:	f7f6 fc76 	bl	80002d8 <__aeabi_dsub>
 80099ec:	4622      	mov	r2, r4
 80099ee:	462b      	mov	r3, r5
 80099f0:	f7f6 fe2a 	bl	8000648 <__aeabi_dmul>
 80099f4:	a352      	add	r3, pc, #328	; (adr r3, 8009b40 <__ieee754_pow+0x9f0>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	f7f6 fc6f 	bl	80002dc <__adddf3>
 80099fe:	4622      	mov	r2, r4
 8009a00:	462b      	mov	r3, r5
 8009a02:	f7f6 fe21 	bl	8000648 <__aeabi_dmul>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fc63 	bl	80002d8 <__aeabi_dsub>
 8009a12:	4604      	mov	r4, r0
 8009a14:	460d      	mov	r5, r1
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f6 fe13 	bl	8000648 <__aeabi_dmul>
 8009a22:	2200      	movs	r2, #0
 8009a24:	e9cd 0100 	strd	r0, r1, [sp]
 8009a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f7f6 fc52 	bl	80002d8 <__aeabi_dsub>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a3c:	f7f6 ff2e 	bl	800089c <__aeabi_ddiv>
 8009a40:	4632      	mov	r2, r6
 8009a42:	4604      	mov	r4, r0
 8009a44:	460d      	mov	r5, r1
 8009a46:	463b      	mov	r3, r7
 8009a48:	4640      	mov	r0, r8
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7f6 fdfc 	bl	8000648 <__aeabi_dmul>
 8009a50:	4632      	mov	r2, r6
 8009a52:	463b      	mov	r3, r7
 8009a54:	f7f6 fc42 	bl	80002dc <__adddf3>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fc3a 	bl	80002d8 <__aeabi_dsub>
 8009a64:	4642      	mov	r2, r8
 8009a66:	464b      	mov	r3, r9
 8009a68:	f7f6 fc36 	bl	80002d8 <__aeabi_dsub>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	2000      	movs	r0, #0
 8009a72:	4939      	ldr	r1, [pc, #228]	; (8009b58 <__ieee754_pow+0xa08>)
 8009a74:	f7f6 fc30 	bl	80002d8 <__aeabi_dsub>
 8009a78:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009a7c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	da2f      	bge.n	8009ae6 <__ieee754_pow+0x996>
 8009a86:	4650      	mov	r0, sl
 8009a88:	ec43 2b10 	vmov	d0, r2, r3
 8009a8c:	f000 f9c0 	bl	8009e10 <scalbn>
 8009a90:	ec51 0b10 	vmov	r0, r1, d0
 8009a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a98:	f7ff bbf1 	b.w	800927e <__ieee754_pow+0x12e>
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	; (8009b5c <__ieee754_pow+0xa0c>)
 8009a9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009aa2:	429e      	cmp	r6, r3
 8009aa4:	f77f af0c 	ble.w	80098c0 <__ieee754_pow+0x770>
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <__ieee754_pow+0xa10>)
 8009aaa:	440b      	add	r3, r1
 8009aac:	4303      	orrs	r3, r0
 8009aae:	d00b      	beq.n	8009ac8 <__ieee754_pow+0x978>
 8009ab0:	a325      	add	r3, pc, #148	; (adr r3, 8009b48 <__ieee754_pow+0x9f8>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aba:	f7f6 fdc5 	bl	8000648 <__aeabi_dmul>
 8009abe:	a322      	add	r3, pc, #136	; (adr r3, 8009b48 <__ieee754_pow+0x9f8>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7ff bbdb 	b.w	800927e <__ieee754_pow+0x12e>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	462b      	mov	r3, r5
 8009acc:	f7f6 fc04 	bl	80002d8 <__aeabi_dsub>
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	f7f7 f83e 	bl	8000b54 <__aeabi_dcmpge>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	f43f aef1 	beq.w	80098c0 <__ieee754_pow+0x770>
 8009ade:	e7e7      	b.n	8009ab0 <__ieee754_pow+0x960>
 8009ae0:	f04f 0a00 	mov.w	sl, #0
 8009ae4:	e718      	b.n	8009918 <__ieee754_pow+0x7c8>
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	e7d4      	b.n	8009a94 <__ieee754_pow+0x944>
 8009aea:	2000      	movs	r0, #0
 8009aec:	491a      	ldr	r1, [pc, #104]	; (8009b58 <__ieee754_pow+0xa08>)
 8009aee:	f7ff bb8f 	b.w	8009210 <__ieee754_pow+0xc0>
 8009af2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009af6:	f7ff bb8b 	b.w	8009210 <__ieee754_pow+0xc0>
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7ff bb87 	b.w	8009210 <__ieee754_pow+0xc0>
 8009b02:	4693      	mov	fp, r2
 8009b04:	f7ff bb98 	b.w	8009238 <__ieee754_pow+0xe8>
 8009b08:	00000000 	.word	0x00000000
 8009b0c:	3fe62e43 	.word	0x3fe62e43
 8009b10:	fefa39ef 	.word	0xfefa39ef
 8009b14:	3fe62e42 	.word	0x3fe62e42
 8009b18:	0ca86c39 	.word	0x0ca86c39
 8009b1c:	be205c61 	.word	0xbe205c61
 8009b20:	72bea4d0 	.word	0x72bea4d0
 8009b24:	3e663769 	.word	0x3e663769
 8009b28:	c5d26bf1 	.word	0xc5d26bf1
 8009b2c:	3ebbbd41 	.word	0x3ebbbd41
 8009b30:	af25de2c 	.word	0xaf25de2c
 8009b34:	3f11566a 	.word	0x3f11566a
 8009b38:	16bebd93 	.word	0x16bebd93
 8009b3c:	3f66c16c 	.word	0x3f66c16c
 8009b40:	5555553e 	.word	0x5555553e
 8009b44:	3fc55555 	.word	0x3fc55555
 8009b48:	c2f8f359 	.word	0xc2f8f359
 8009b4c:	01a56e1f 	.word	0x01a56e1f
 8009b50:	3fe00000 	.word	0x3fe00000
 8009b54:	000fffff 	.word	0x000fffff
 8009b58:	3ff00000 	.word	0x3ff00000
 8009b5c:	4090cbff 	.word	0x4090cbff
 8009b60:	3f6f3400 	.word	0x3f6f3400
 8009b64:	652b82fe 	.word	0x652b82fe
 8009b68:	3c971547 	.word	0x3c971547

08009b6c <__ieee754_sqrt>:
 8009b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b70:	4955      	ldr	r1, [pc, #340]	; (8009cc8 <__ieee754_sqrt+0x15c>)
 8009b72:	ec55 4b10 	vmov	r4, r5, d0
 8009b76:	43a9      	bics	r1, r5
 8009b78:	462b      	mov	r3, r5
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	d112      	bne.n	8009ba4 <__ieee754_sqrt+0x38>
 8009b7e:	ee10 2a10 	vmov	r2, s0
 8009b82:	ee10 0a10 	vmov	r0, s0
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fd5e 	bl	8000648 <__aeabi_dmul>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fba2 	bl	80002dc <__adddf3>
 8009b98:	4604      	mov	r4, r0
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	ec45 4b10 	vmov	d0, r4, r5
 8009ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba4:	2d00      	cmp	r5, #0
 8009ba6:	ee10 0a10 	vmov	r0, s0
 8009baa:	4621      	mov	r1, r4
 8009bac:	dc0f      	bgt.n	8009bce <__ieee754_sqrt+0x62>
 8009bae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009bb2:	4330      	orrs	r0, r6
 8009bb4:	d0f2      	beq.n	8009b9c <__ieee754_sqrt+0x30>
 8009bb6:	b155      	cbz	r5, 8009bce <__ieee754_sqrt+0x62>
 8009bb8:	ee10 2a10 	vmov	r2, s0
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	f7f6 fb8a 	bl	80002d8 <__aeabi_dsub>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	f7f6 fe68 	bl	800089c <__aeabi_ddiv>
 8009bcc:	e7e4      	b.n	8009b98 <__ieee754_sqrt+0x2c>
 8009bce:	151b      	asrs	r3, r3, #20
 8009bd0:	d073      	beq.n	8009cba <__ieee754_sqrt+0x14e>
 8009bd2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009bd6:	07dd      	lsls	r5, r3, #31
 8009bd8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009bdc:	bf48      	it	mi
 8009bde:	0fc8      	lsrmi	r0, r1, #31
 8009be0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009be4:	bf44      	itt	mi
 8009be6:	0049      	lslmi	r1, r1, #1
 8009be8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009bec:	2500      	movs	r5, #0
 8009bee:	1058      	asrs	r0, r3, #1
 8009bf0:	0fcb      	lsrs	r3, r1, #31
 8009bf2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009bf6:	0049      	lsls	r1, r1, #1
 8009bf8:	2316      	movs	r3, #22
 8009bfa:	462c      	mov	r4, r5
 8009bfc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009c00:	19a7      	adds	r7, r4, r6
 8009c02:	4297      	cmp	r7, r2
 8009c04:	bfde      	ittt	le
 8009c06:	19bc      	addle	r4, r7, r6
 8009c08:	1bd2      	suble	r2, r2, r7
 8009c0a:	19ad      	addle	r5, r5, r6
 8009c0c:	0fcf      	lsrs	r7, r1, #31
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009c14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c1c:	d1f0      	bne.n	8009c00 <__ieee754_sqrt+0x94>
 8009c1e:	f04f 0c20 	mov.w	ip, #32
 8009c22:	469e      	mov	lr, r3
 8009c24:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009c28:	42a2      	cmp	r2, r4
 8009c2a:	eb06 070e 	add.w	r7, r6, lr
 8009c2e:	dc02      	bgt.n	8009c36 <__ieee754_sqrt+0xca>
 8009c30:	d112      	bne.n	8009c58 <__ieee754_sqrt+0xec>
 8009c32:	428f      	cmp	r7, r1
 8009c34:	d810      	bhi.n	8009c58 <__ieee754_sqrt+0xec>
 8009c36:	2f00      	cmp	r7, #0
 8009c38:	eb07 0e06 	add.w	lr, r7, r6
 8009c3c:	da42      	bge.n	8009cc4 <__ieee754_sqrt+0x158>
 8009c3e:	f1be 0f00 	cmp.w	lr, #0
 8009c42:	db3f      	blt.n	8009cc4 <__ieee754_sqrt+0x158>
 8009c44:	f104 0801 	add.w	r8, r4, #1
 8009c48:	1b12      	subs	r2, r2, r4
 8009c4a:	428f      	cmp	r7, r1
 8009c4c:	bf88      	it	hi
 8009c4e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009c52:	1bc9      	subs	r1, r1, r7
 8009c54:	4433      	add	r3, r6
 8009c56:	4644      	mov	r4, r8
 8009c58:	0052      	lsls	r2, r2, #1
 8009c5a:	f1bc 0c01 	subs.w	ip, ip, #1
 8009c5e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009c62:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c6a:	d1dd      	bne.n	8009c28 <__ieee754_sqrt+0xbc>
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	d006      	beq.n	8009c7e <__ieee754_sqrt+0x112>
 8009c70:	1c5c      	adds	r4, r3, #1
 8009c72:	bf13      	iteet	ne
 8009c74:	3301      	addne	r3, #1
 8009c76:	3501      	addeq	r5, #1
 8009c78:	4663      	moveq	r3, ip
 8009c7a:	f023 0301 	bicne.w	r3, r3, #1
 8009c7e:	106a      	asrs	r2, r5, #1
 8009c80:	085b      	lsrs	r3, r3, #1
 8009c82:	07e9      	lsls	r1, r5, #31
 8009c84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009c88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009c8c:	bf48      	it	mi
 8009c8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009c92:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009c96:	461c      	mov	r4, r3
 8009c98:	e780      	b.n	8009b9c <__ieee754_sqrt+0x30>
 8009c9a:	0aca      	lsrs	r2, r1, #11
 8009c9c:	3815      	subs	r0, #21
 8009c9e:	0549      	lsls	r1, r1, #21
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	d0fa      	beq.n	8009c9a <__ieee754_sqrt+0x12e>
 8009ca4:	02d6      	lsls	r6, r2, #11
 8009ca6:	d50a      	bpl.n	8009cbe <__ieee754_sqrt+0x152>
 8009ca8:	f1c3 0420 	rsb	r4, r3, #32
 8009cac:	fa21 f404 	lsr.w	r4, r1, r4
 8009cb0:	1e5d      	subs	r5, r3, #1
 8009cb2:	4099      	lsls	r1, r3
 8009cb4:	4322      	orrs	r2, r4
 8009cb6:	1b43      	subs	r3, r0, r5
 8009cb8:	e78b      	b.n	8009bd2 <__ieee754_sqrt+0x66>
 8009cba:	4618      	mov	r0, r3
 8009cbc:	e7f0      	b.n	8009ca0 <__ieee754_sqrt+0x134>
 8009cbe:	0052      	lsls	r2, r2, #1
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	e7ef      	b.n	8009ca4 <__ieee754_sqrt+0x138>
 8009cc4:	46a0      	mov	r8, r4
 8009cc6:	e7bf      	b.n	8009c48 <__ieee754_sqrt+0xdc>
 8009cc8:	7ff00000 	.word	0x7ff00000

08009ccc <fabs>:
 8009ccc:	ec51 0b10 	vmov	r0, r1, d0
 8009cd0:	ee10 2a10 	vmov	r2, s0
 8009cd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cd8:	ec43 2b10 	vmov	d0, r2, r3
 8009cdc:	4770      	bx	lr

08009cde <finite>:
 8009cde:	ee10 3a90 	vmov	r3, s1
 8009ce2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009ce6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009cea:	0fc0      	lsrs	r0, r0, #31
 8009cec:	4770      	bx	lr

08009cee <matherr>:
 8009cee:	2000      	movs	r0, #0
 8009cf0:	4770      	bx	lr
 8009cf2:	0000      	movs	r0, r0
 8009cf4:	0000      	movs	r0, r0
	...

08009cf8 <nan>:
 8009cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d00 <nan+0x8>
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	00000000 	.word	0x00000000
 8009d04:	7ff80000 	.word	0x7ff80000

08009d08 <rint>:
 8009d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d0a:	ec51 0b10 	vmov	r0, r1, d0
 8009d0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009d12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009d16:	2e13      	cmp	r6, #19
 8009d18:	460b      	mov	r3, r1
 8009d1a:	ee10 4a10 	vmov	r4, s0
 8009d1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009d22:	dc56      	bgt.n	8009dd2 <rint+0xca>
 8009d24:	2e00      	cmp	r6, #0
 8009d26:	da2b      	bge.n	8009d80 <rint+0x78>
 8009d28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009d2c:	4302      	orrs	r2, r0
 8009d2e:	d023      	beq.n	8009d78 <rint+0x70>
 8009d30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009d34:	4302      	orrs	r2, r0
 8009d36:	4254      	negs	r4, r2
 8009d38:	4314      	orrs	r4, r2
 8009d3a:	0c4b      	lsrs	r3, r1, #17
 8009d3c:	0b24      	lsrs	r4, r4, #12
 8009d3e:	045b      	lsls	r3, r3, #17
 8009d40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009d44:	ea44 0103 	orr.w	r1, r4, r3
 8009d48:	460b      	mov	r3, r1
 8009d4a:	492f      	ldr	r1, [pc, #188]	; (8009e08 <rint+0x100>)
 8009d4c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009d50:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009d54:	4602      	mov	r2, r0
 8009d56:	4639      	mov	r1, r7
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7f6 fabf 	bl	80002dc <__adddf3>
 8009d5e:	e9cd 0100 	strd	r0, r1, [sp]
 8009d62:	463b      	mov	r3, r7
 8009d64:	4632      	mov	r2, r6
 8009d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d6a:	f7f6 fab5 	bl	80002d8 <__aeabi_dsub>
 8009d6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009d76:	4639      	mov	r1, r7
 8009d78:	ec41 0b10 	vmov	d0, r0, r1
 8009d7c:	b003      	add	sp, #12
 8009d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d80:	4a22      	ldr	r2, [pc, #136]	; (8009e0c <rint+0x104>)
 8009d82:	4132      	asrs	r2, r6
 8009d84:	ea01 0702 	and.w	r7, r1, r2
 8009d88:	4307      	orrs	r7, r0
 8009d8a:	d0f5      	beq.n	8009d78 <rint+0x70>
 8009d8c:	0852      	lsrs	r2, r2, #1
 8009d8e:	4011      	ands	r1, r2
 8009d90:	430c      	orrs	r4, r1
 8009d92:	d00b      	beq.n	8009dac <rint+0xa4>
 8009d94:	ea23 0202 	bic.w	r2, r3, r2
 8009d98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d9c:	2e13      	cmp	r6, #19
 8009d9e:	fa43 f306 	asr.w	r3, r3, r6
 8009da2:	bf0c      	ite	eq
 8009da4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009da8:	2400      	movne	r4, #0
 8009daa:	4313      	orrs	r3, r2
 8009dac:	4916      	ldr	r1, [pc, #88]	; (8009e08 <rint+0x100>)
 8009dae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009db2:	4622      	mov	r2, r4
 8009db4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009db8:	4620      	mov	r0, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	f7f6 fa8e 	bl	80002dc <__adddf3>
 8009dc0:	e9cd 0100 	strd	r0, r1, [sp]
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dcc:	f7f6 fa84 	bl	80002d8 <__aeabi_dsub>
 8009dd0:	e7d2      	b.n	8009d78 <rint+0x70>
 8009dd2:	2e33      	cmp	r6, #51	; 0x33
 8009dd4:	dd07      	ble.n	8009de6 <rint+0xde>
 8009dd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009dda:	d1cd      	bne.n	8009d78 <rint+0x70>
 8009ddc:	ee10 2a10 	vmov	r2, s0
 8009de0:	f7f6 fa7c 	bl	80002dc <__adddf3>
 8009de4:	e7c8      	b.n	8009d78 <rint+0x70>
 8009de6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dee:	40f2      	lsrs	r2, r6
 8009df0:	4210      	tst	r0, r2
 8009df2:	d0c1      	beq.n	8009d78 <rint+0x70>
 8009df4:	0852      	lsrs	r2, r2, #1
 8009df6:	4210      	tst	r0, r2
 8009df8:	bf1f      	itttt	ne
 8009dfa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009dfe:	ea20 0202 	bicne.w	r2, r0, r2
 8009e02:	4134      	asrne	r4, r6
 8009e04:	4314      	orrne	r4, r2
 8009e06:	e7d1      	b.n	8009dac <rint+0xa4>
 8009e08:	0800a748 	.word	0x0800a748
 8009e0c:	000fffff 	.word	0x000fffff

08009e10 <scalbn>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	ec55 4b10 	vmov	r4, r5, d0
 8009e16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	b9aa      	cbnz	r2, 8009e4c <scalbn+0x3c>
 8009e20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e24:	4323      	orrs	r3, r4
 8009e26:	d03b      	beq.n	8009ea0 <scalbn+0x90>
 8009e28:	4b31      	ldr	r3, [pc, #196]	; (8009ef0 <scalbn+0xe0>)
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	ee10 0a10 	vmov	r0, s0
 8009e32:	f7f6 fc09 	bl	8000648 <__aeabi_dmul>
 8009e36:	4b2f      	ldr	r3, [pc, #188]	; (8009ef4 <scalbn+0xe4>)
 8009e38:	429e      	cmp	r6, r3
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	da12      	bge.n	8009e66 <scalbn+0x56>
 8009e40:	a327      	add	r3, pc, #156	; (adr r3, 8009ee0 <scalbn+0xd0>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 fbff 	bl	8000648 <__aeabi_dmul>
 8009e4a:	e009      	b.n	8009e60 <scalbn+0x50>
 8009e4c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009e50:	428a      	cmp	r2, r1
 8009e52:	d10c      	bne.n	8009e6e <scalbn+0x5e>
 8009e54:	ee10 2a10 	vmov	r2, s0
 8009e58:	4620      	mov	r0, r4
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	f7f6 fa3e 	bl	80002dc <__adddf3>
 8009e60:	4604      	mov	r4, r0
 8009e62:	460d      	mov	r5, r1
 8009e64:	e01c      	b.n	8009ea0 <scalbn+0x90>
 8009e66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	3a36      	subs	r2, #54	; 0x36
 8009e6e:	4432      	add	r2, r6
 8009e70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009e74:	428a      	cmp	r2, r1
 8009e76:	dd0b      	ble.n	8009e90 <scalbn+0x80>
 8009e78:	ec45 4b11 	vmov	d1, r4, r5
 8009e7c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009ee8 <scalbn+0xd8>
 8009e80:	f000 f83c 	bl	8009efc <copysign>
 8009e84:	a318      	add	r3, pc, #96	; (adr r3, 8009ee8 <scalbn+0xd8>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	ec51 0b10 	vmov	r0, r1, d0
 8009e8e:	e7da      	b.n	8009e46 <scalbn+0x36>
 8009e90:	2a00      	cmp	r2, #0
 8009e92:	dd08      	ble.n	8009ea6 <scalbn+0x96>
 8009e94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ea0:	ec45 4b10 	vmov	d0, r4, r5
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}
 8009ea6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009eaa:	da0d      	bge.n	8009ec8 <scalbn+0xb8>
 8009eac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009eb0:	429e      	cmp	r6, r3
 8009eb2:	ec45 4b11 	vmov	d1, r4, r5
 8009eb6:	dce1      	bgt.n	8009e7c <scalbn+0x6c>
 8009eb8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009ee0 <scalbn+0xd0>
 8009ebc:	f000 f81e 	bl	8009efc <copysign>
 8009ec0:	a307      	add	r3, pc, #28	; (adr r3, 8009ee0 <scalbn+0xd0>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	e7e0      	b.n	8009e8a <scalbn+0x7a>
 8009ec8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ecc:	3236      	adds	r2, #54	; 0x36
 8009ece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ed2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	4629      	mov	r1, r5
 8009eda:	2200      	movs	r2, #0
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <scalbn+0xe8>)
 8009ede:	e7b2      	b.n	8009e46 <scalbn+0x36>
 8009ee0:	c2f8f359 	.word	0xc2f8f359
 8009ee4:	01a56e1f 	.word	0x01a56e1f
 8009ee8:	8800759c 	.word	0x8800759c
 8009eec:	7e37e43c 	.word	0x7e37e43c
 8009ef0:	43500000 	.word	0x43500000
 8009ef4:	ffff3cb0 	.word	0xffff3cb0
 8009ef8:	3c900000 	.word	0x3c900000

08009efc <copysign>:
 8009efc:	ec51 0b10 	vmov	r0, r1, d0
 8009f00:	ee11 0a90 	vmov	r0, s3
 8009f04:	ee10 2a10 	vmov	r2, s0
 8009f08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009f10:	ea41 0300 	orr.w	r3, r1, r0
 8009f14:	ec43 2b10 	vmov	d0, r2, r3
 8009f18:	4770      	bx	lr
	...

08009f1c <_init>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr

08009f28 <_fini>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr
