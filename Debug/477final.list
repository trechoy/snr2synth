
477final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08008590  08008590  00018590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b38  08008b38  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  08008b38  08008b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b40  08008b40  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08008b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000218  08008d60  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08008d60  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e82  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000257e  00000000  00000000  000310ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  00033648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d50  00000000  00000000  000344c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228c6  00000000  00000000  00035210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c1da  00000000  00000000  00057ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d04c0  00000000  00000000  00063cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  001341ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000218 	.word	0x20000218
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008578 	.word	0x08008578

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000021c 	.word	0x2000021c
 800021c:	08008578 	.word	0x08008578

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <lcd_changeColor>:
#include "lcd.h"

void lcd_changeColor(char color, UART_HandleTypeDef huart)
{
 8000ef8:	b084      	sub	sp, #16
 8000efa:	b590      	push	{r4, r7, lr}
 8000efc:	b089      	sub	sp, #36	; 0x24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4604      	mov	r4, r0
 8000f02:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
	unsigned char start[] = {0x7C, 0x2B};
 8000f0e:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <lcd_changeColor+0xf8>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	83bb      	strh	r3, [r7, #28]
	HAL_UART_Transmit(&huart, (uint8_t *)start, 2, 20);
 8000f14:	f107 011c 	add.w	r1, r7, #28
 8000f18:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f1c:	2314      	movs	r3, #20
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f004 fc01 	bl	8005726 <HAL_UART_Transmit>
	if (color == 'r') {
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b72      	cmp	r3, #114	; 0x72
 8000f28:	d111      	bne.n	8000f4e <lcd_changeColor+0x56>
		unsigned char red[] = {0xff, 0x0f, 0x0f};
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <lcd_changeColor+0xfc>)
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	4611      	mov	r1, r2
 8000f34:	8019      	strh	r1, [r3, #0]
 8000f36:	3302      	adds	r3, #2
 8000f38:	0c12      	lsrs	r2, r2, #16
 8000f3a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t *) red, 3, 20);
 8000f3c:	f107 0118 	add.w	r1, r7, #24
 8000f40:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f44:	2314      	movs	r3, #20
 8000f46:	2203      	movs	r2, #3
 8000f48:	f004 fbed 	bl	8005726 <HAL_UART_Transmit>
	}
	else {
		unsigned char wht[] = {0xff, 0xff, 0xff};
		HAL_UART_Transmit(&huart, (uint8_t *) wht, 3, 20);
	}
}
 8000f4c:	e049      	b.n	8000fe2 <lcd_changeColor+0xea>
	else if (color == 'g') {
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b67      	cmp	r3, #103	; 0x67
 8000f52:	d10e      	bne.n	8000f72 <lcd_changeColor+0x7a>
		unsigned char grn[] = {0x00, 0x0ff, 0x00};
 8000f54:	2300      	movs	r3, #0
 8000f56:	753b      	strb	r3, [r7, #20]
 8000f58:	23ff      	movs	r3, #255	; 0xff
 8000f5a:	757b      	strb	r3, [r7, #21]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75bb      	strb	r3, [r7, #22]
		HAL_UART_Transmit(&huart, (uint8_t *) grn, 3, 20);
 8000f60:	f107 0114 	add.w	r1, r7, #20
 8000f64:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f68:	2314      	movs	r3, #20
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	f004 fbdb 	bl	8005726 <HAL_UART_Transmit>
}
 8000f70:	e037      	b.n	8000fe2 <lcd_changeColor+0xea>
	else if (color == 'b') {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b62      	cmp	r3, #98	; 0x62
 8000f76:	d111      	bne.n	8000f9c <lcd_changeColor+0xa4>
		unsigned char blue[] = {0x00, 0xaf, 0xff};
 8000f78:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <lcd_changeColor+0x100>)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	4611      	mov	r1, r2
 8000f82:	8019      	strh	r1, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	0c12      	lsrs	r2, r2, #16
 8000f88:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t *) blue, 3, 20);
 8000f8a:	f107 0110 	add.w	r1, r7, #16
 8000f8e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f92:	2314      	movs	r3, #20
 8000f94:	2203      	movs	r2, #3
 8000f96:	f004 fbc6 	bl	8005726 <HAL_UART_Transmit>
}
 8000f9a:	e022      	b.n	8000fe2 <lcd_changeColor+0xea>
	else if (color == '0')
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b30      	cmp	r3, #48	; 0x30
 8000fa0:	d10e      	bne.n	8000fc0 <lcd_changeColor+0xc8>
		unsigned char off[] = {0x00, 0x00, 0x00};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	733b      	strb	r3, [r7, #12]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	737b      	strb	r3, [r7, #13]
 8000faa:	2300      	movs	r3, #0
 8000fac:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart, (uint8_t *) off, 3, 20);
 8000fae:	f107 010c 	add.w	r1, r7, #12
 8000fb2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fb6:	2314      	movs	r3, #20
 8000fb8:	2203      	movs	r2, #3
 8000fba:	f004 fbb4 	bl	8005726 <HAL_UART_Transmit>
}
 8000fbe:	e010      	b.n	8000fe2 <lcd_changeColor+0xea>
		unsigned char wht[] = {0xff, 0xff, 0xff};
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <lcd_changeColor+0x104>)
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	8019      	strh	r1, [r3, #0]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	0c12      	lsrs	r2, r2, #16
 8000fd0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t *) wht, 3, 20);
 8000fd2:	f107 0108 	add.w	r1, r7, #8
 8000fd6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fda:	2314      	movs	r3, #20
 8000fdc:	2203      	movs	r2, #3
 8000fde:	f004 fba2 	bl	8005726 <HAL_UART_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fec:	b004      	add	sp, #16
 8000fee:	4770      	bx	lr
 8000ff0:	08008590 	.word	0x08008590
 8000ff4:	08008594 	.word	0x08008594
 8000ff8:	08008598 	.word	0x08008598
 8000ffc:	0800859c 	.word	0x0800859c

08001000 <lcd_clear>:
	unsigned char * msg[] = {0x7C, 0x2B, r, g, b};
	HAL_UART_Transmit(&huart, (uint8_t *) msg, 5, 10);
}

void lcd_clear(UART_HandleTypeDef huart)
{
 8001000:	b084      	sub	sp, #16
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
 8001006:	f107 0c08 	add.w	ip, r7, #8
 800100a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *) "|-", strlen("|-"), 15);
 800100e:	230f      	movs	r3, #15
 8001010:	2202      	movs	r2, #2
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <lcd_clear+0x28>)
 8001014:	f107 0008 	add.w	r0, r7, #8
 8001018:	f004 fb85 	bl	8005726 <HAL_UART_Transmit>
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001024:	b004      	add	sp, #16
 8001026:	4770      	bx	lr
 8001028:	080085a0 	.word	0x080085a0

0800102c <lcd_showMessage>:

void lcd_showMessage(char * msg, UART_HandleTypeDef huart)
{
 800102c:	b084      	sub	sp, #16
 800102e:	b5b0      	push	{r4, r5, r7, lr}
 8001030:	b08e      	sub	sp, #56	; 0x38
 8001032:	af0c      	add	r7, sp, #48	; 0x30
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	f107 001c 	add.w	r0, r7, #28
 800103a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	lcd_clear(huart);
 800103e:	466d      	mov	r5, sp
 8001040:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001050:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105a:	f7ff ffd1 	bl	8001000 <lcd_clear>
	HAL_UART_Transmit(&huart, (uint8_t *) msg , strlen(msg), 50);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff f8de 	bl	8000220 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	f107 001c 	add.w	r0, r7, #28
 800106c:	2332      	movs	r3, #50	; 0x32
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f004 fb59 	bl	8005726 <HAL_UART_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800107e:	b004      	add	sp, #16
 8001080:	4770      	bx	lr
	...

08001084 <updateMenuDisplay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updateMenuDisplay()
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	b0df      	sub	sp, #380	; 0x17c
 8001088:	af0e      	add	r7, sp, #56	; 0x38
	char * buf[80];
	sprintf(buf, "#%d\r%s\r\rPush knob to select.", CURRENT_PRESET, presetBank[CURRENT_PRESET - 1]);
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <updateMenuDisplay+0x50>)
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <updateMenuDisplay+0x50>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <updateMenuDisplay+0x54>)
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	4638      	mov	r0, r7
 800109c:	460a      	mov	r2, r1
 800109e:	490f      	ldr	r1, [pc, #60]	; (80010dc <updateMenuDisplay+0x58>)
 80010a0:	f005 fe8a 	bl	8006db8 <siprintf>
	lcd_showMessage(buf, huart4);
 80010a4:	4e0e      	ldr	r6, [pc, #56]	; (80010e0 <updateMenuDisplay+0x5c>)
 80010a6:	46bc      	mov	ip, r7
 80010a8:	466d      	mov	r5, sp
 80010aa:	f106 040c 	add.w	r4, r6, #12
 80010ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	602b      	str	r3, [r5, #0]
 80010be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80010c2:	4660      	mov	r0, ip
 80010c4:	f7ff ffb2 	bl	800102c <lcd_showMessage>

}
 80010c8:	bf00      	nop
 80010ca:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004
 80010dc:	0800864c 	.word	0x0800864c
 80010e0:	200002ec 	.word	0x200002ec

080010e4 <clockwise_menu_event>:

void clockwise_menu_event()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	CURRENT_PRESET++;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <clockwise_menu_event+0x24>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <clockwise_menu_event+0x24>)
 80010f0:	6013      	str	r3, [r2, #0]
	if (CURRENT_PRESET > NUM_PRESETS)
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <clockwise_menu_event+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	dd02      	ble.n	8001100 <clockwise_menu_event+0x1c>
	{
		CURRENT_PRESET = 1;
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <clockwise_menu_event+0x24>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
	}
	updateMenuDisplay();
 8001100:	f7ff ffc0 	bl	8001084 <updateMenuDisplay>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000

0800110c <anticlockwise_menu_event>:

void anticlockwise_menu_event()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	CURRENT_PRESET--;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <anticlockwise_menu_event+0x24>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <anticlockwise_menu_event+0x24>)
 8001118:	6013      	str	r3, [r2, #0]
	if (CURRENT_PRESET < 1)
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <anticlockwise_menu_event+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	dc02      	bgt.n	8001128 <anticlockwise_menu_event+0x1c>
	{
		CURRENT_PRESET = NUM_PRESETS;
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <anticlockwise_menu_event+0x24>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
	}
	updateMenuDisplay();
 8001128:	f7ff ffac 	bl	8001084 <updateMenuDisplay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000

08001134 <reset_rtrencFlags>:

void reset_rtrencFlags()
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	RTRENC_CCW_EVENT = 0;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <reset_rtrencFlags+0x20>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
	RTRENC_CW_EVENT = 0;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <reset_rtrencFlags+0x24>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
	RTRENC_PUSHB_EVENT = 0;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <reset_rtrencFlags+0x28>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20000234 	.word	0x20000234
 8001158:	20000238 	.word	0x20000238
 800115c:	2000023c 	.word	0x2000023c

08001160 <LED_Test>:

void LED_Test()
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b0e1      	sub	sp, #388	; 0x184
 8001164:	af0e      	add	r7, sp, #56	; 0x38
	lcd_showMessage("Welcome to the\rLED Test Mode!", huart4);
 8001166:	4e3a      	ldr	r6, [pc, #232]	; (8001250 <LED_Test+0xf0>)
 8001168:	466d      	mov	r5, sp
 800116a:	f106 040c 	add.w	r4, r6, #12
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	602b      	str	r3, [r5, #0]
 800117e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001182:	4834      	ldr	r0, [pc, #208]	; (8001254 <LED_Test+0xf4>)
 8001184:	f7ff ff52 	bl	800102c <lcd_showMessage>
	HAL_Delay(1000);
 8001188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118c:	f001 fef4 	bl	8002f78 <HAL_Delay>
	lcd_clear(huart4);
 8001190:	4e2f      	ldr	r6, [pc, #188]	; (8001250 <LED_Test+0xf0>)
 8001192:	466d      	mov	r5, sp
 8001194:	f106 0410 	add.w	r4, r6, #16
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011ac:	f7ff ff28 	bl	8001000 <lcd_clear>

	int numLEDS = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	char * buf[80];
	sprintf(buf, "Rotate knob to\rchange number\rof LEDs.");
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <LED_Test+0xf8>)
 80011ba:	461c      	mov	r4, r3
 80011bc:	4615      	mov	r5, r2
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011ca:	6020      	str	r0, [r4, #0]
 80011cc:	3404      	adds	r4, #4
 80011ce:	8021      	strh	r1, [r4, #0]
	lcd_showMessage(buf, huart4);
 80011d0:	4e1f      	ldr	r6, [pc, #124]	; (8001250 <LED_Test+0xf0>)
 80011d2:	f107 0c04 	add.w	ip, r7, #4
 80011d6:	466d      	mov	r5, sp
 80011d8:	f106 040c 	add.w	r4, r6, #12
 80011dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80011f0:	4660      	mov	r0, ip
 80011f2:	f7ff ff1b 	bl	800102c <lcd_showMessage>
	while (1)
	{
		if (RTRENC_CW_EVENT)
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <LED_Test+0xfc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00c      	beq.n	8001218 <LED_Test+0xb8>
		{
			numLEDS++;
 80011fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001202:	3301      	adds	r3, #1
 8001204:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (numLEDS > 12)
 8001208:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800120c:	2b0c      	cmp	r3, #12
 800120e:	dd13      	ble.n	8001238 <LED_Test+0xd8>
			{
				numLEDS = 12;
 8001210:	230c      	movs	r3, #12
 8001212:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001216:	e00f      	b.n	8001238 <LED_Test+0xd8>
			}
		}
		else if (RTRENC_CCW_EVENT)
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <LED_Test+0x100>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <LED_Test+0xd8>
		{
			numLEDS--;
 8001220:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001224:	3b01      	subs	r3, #1
 8001226:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (numLEDS < 0)
 800122a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800122e:	2b00      	cmp	r3, #0
 8001230:	da02      	bge.n	8001238 <LED_Test+0xd8>
			{
				numLEDS = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			}
		}
		updateRingLED(0, numLEDS);
 8001238:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800123c:	2000      	movs	r0, #0
 800123e:	f001 f801 	bl	8002244 <updateRingLED>
		reset_rtrencFlags();
 8001242:	f7ff ff77 	bl	8001134 <reset_rtrencFlags>
		HAL_Delay(80);
 8001246:	2050      	movs	r0, #80	; 0x50
 8001248:	f001 fe96 	bl	8002f78 <HAL_Delay>
		if (RTRENC_CW_EVENT)
 800124c:	e7d3      	b.n	80011f6 <LED_Test+0x96>
 800124e:	bf00      	nop
 8001250:	200002ec 	.word	0x200002ec
 8001254:	0800866c 	.word	0x0800866c
 8001258:	0800868c 	.word	0x0800868c
 800125c:	20000238 	.word	0x20000238
 8001260:	20000234 	.word	0x20000234
 8001264:	00000000 	.word	0x00000000

08001268 <DAC_Test>:
	}
}

void DAC_Test()
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	b0e5      	sub	sp, #404	; 0x194
 800126c:	af0e      	add	r7, sp, #56	; 0x38
	lcd_showMessage("Welcome to the\rDAC Test Mode!", huart4);
 800126e:	4e88      	ldr	r6, [pc, #544]	; (8001490 <DAC_Test+0x228>)
 8001270:	466d      	mov	r5, sp
 8001272:	f106 040c 	add.w	r4, r6, #12
 8001276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800127c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800127e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	602b      	str	r3, [r5, #0]
 8001286:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800128a:	4882      	ldr	r0, [pc, #520]	; (8001494 <DAC_Test+0x22c>)
 800128c:	f7ff fece 	bl	800102c <lcd_showMessage>
	HAL_Delay(1000);
 8001290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001294:	f001 fe70 	bl	8002f78 <HAL_Delay>
	lcd_clear(huart4);
 8001298:	4e7d      	ldr	r6, [pc, #500]	; (8001490 <DAC_Test+0x228>)
 800129a:	466d      	mov	r5, sp
 800129c:	f106 0410 	add.w	r4, r6, #16
 80012a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80012b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012b4:	f7ff fea4 	bl	8001000 <lcd_clear>

	double adjustment = 0.3;
 80012b8:	a46f      	add	r4, pc, #444	; (adr r4, 8001478 <DAC_Test+0x210>)
 80012ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012be:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148

	double dac_vout = 0;
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	f04f 0400 	mov.w	r4, #0
 80012ca:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	int dac_write = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	char * buf[80];
	sprintf(buf, "DAC V_out: %.2fV\r\rRotate knob to\radjust voltage.", dac_vout);
 80012d4:	1d38      	adds	r0, r7, #4
 80012d6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80012da:	496f      	ldr	r1, [pc, #444]	; (8001498 <DAC_Test+0x230>)
 80012dc:	f005 fd6c 	bl	8006db8 <siprintf>
	lcd_showMessage(buf, huart4);
 80012e0:	4e6b      	ldr	r6, [pc, #428]	; (8001490 <DAC_Test+0x228>)
 80012e2:	f107 0c04 	add.w	ip, r7, #4
 80012e6:	466d      	mov	r5, sp
 80012e8:	f106 040c 	add.w	r4, r6, #12
 80012ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	602b      	str	r3, [r5, #0]
 80012fc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001300:	4660      	mov	r0, ip
 8001302:	f7ff fe93 	bl	800102c <lcd_showMessage>
	while (1)
	{
		if (RTRENC_CW_EVENT)
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <DAC_Test+0x234>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d054      	beq.n	80013b8 <DAC_Test+0x150>
		{
			dac_vout += adjustment;
 800130e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001312:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001316:	f7fe ffe1 	bl	80002dc <__adddf3>
 800131a:	4603      	mov	r3, r0
 800131c:	460c      	mov	r4, r1
 800131e:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			if (dac_vout > 3.3)
 8001322:	a357      	add	r3, pc, #348	; (adr r3, 8001480 <DAC_Test+0x218>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800132c:	f7ff fc1c 	bl	8000b68 <__aeabi_dcmpgt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <DAC_Test+0xd8>
			{
				dac_vout = 3.3;
 8001336:	a452      	add	r4, pc, #328	; (adr r4, 8001480 <DAC_Test+0x218>)
 8001338:	e9d4 3400 	ldrd	r3, r4, [r4]
 800133c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			}
			sprintf(buf, "DAC V_out: %.2fV\r\rRotate knob to\radjust voltage.", dac_vout);
 8001340:	1d38      	adds	r0, r7, #4
 8001342:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001346:	4954      	ldr	r1, [pc, #336]	; (8001498 <DAC_Test+0x230>)
 8001348:	f005 fd36 	bl	8006db8 <siprintf>
			lcd_showMessage(buf, huart4);
 800134c:	4e50      	ldr	r6, [pc, #320]	; (8001490 <DAC_Test+0x228>)
 800134e:	f107 0c04 	add.w	ip, r7, #4
 8001352:	466d      	mov	r5, sp
 8001354:	f106 040c 	add.w	r4, r6, #12
 8001358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	602b      	str	r3, [r5, #0]
 8001368:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800136c:	4660      	mov	r0, ip
 800136e:	f7ff fe5d 	bl	800102c <lcd_showMessage>

			dac_write = (int) (dac_vout / (3.3/4095));
 8001372:	a345      	add	r3, pc, #276	; (adr r3, 8001488 <DAC_Test+0x220>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800137c:	f7ff fa8e 	bl	800089c <__aeabi_ddiv>
 8001380:	4603      	mov	r3, r0
 8001382:	460c      	mov	r4, r1
 8001384:	4618      	mov	r0, r3
 8001386:	4621      	mov	r1, r4
 8001388:	f7ff fc0e 	bl	8000ba8 <__aeabi_d2iz>
 800138c:	4603      	mov	r3, r0
 800138e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (dac_write == 4096)
 8001392:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800139a:	d104      	bne.n	80013a6 <DAC_Test+0x13e>
				DAC->DHR12R1 = 4095;
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <DAC_Test+0x238>)
 800139e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e003      	b.n	80013ae <DAC_Test+0x146>
			else
				DAC->DHR12R1 = dac_write;
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <DAC_Test+0x238>)
 80013a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80013ac:	6093      	str	r3, [r2, #8]
			HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80013ae:	2100      	movs	r1, #0
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <DAC_Test+0x23c>)
 80013b2:	f001 ff36 	bl	8003222 <HAL_DAC_Start>
 80013b6:	e059      	b.n	800146c <DAC_Test+0x204>
		}
		else if (RTRENC_CCW_EVENT)
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <DAC_Test+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d055      	beq.n	800146c <DAC_Test+0x204>
		{
			dac_vout -= adjustment;
 80013c0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80013c4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80013c8:	f7fe ff86 	bl	80002d8 <__aeabi_dsub>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			if (dac_vout < 0)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80013e0:	f7ff fba4 	bl	8000b2c <__aeabi_dcmplt>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <DAC_Test+0x18e>
			{
				dac_vout = 0;
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	f04f 0400 	mov.w	r4, #0
 80013f2:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			}
			sprintf(buf, "DAC V_out: %.2fV\r\rRotate knob to\radjust voltage.", dac_vout);
 80013f6:	1d38      	adds	r0, r7, #4
 80013f8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80013fc:	4926      	ldr	r1, [pc, #152]	; (8001498 <DAC_Test+0x230>)
 80013fe:	f005 fcdb 	bl	8006db8 <siprintf>
			lcd_showMessage(buf, huart4);
 8001402:	4e23      	ldr	r6, [pc, #140]	; (8001490 <DAC_Test+0x228>)
 8001404:	f107 0c04 	add.w	ip, r7, #4
 8001408:	466d      	mov	r5, sp
 800140a:	f106 040c 	add.w	r4, r6, #12
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	602b      	str	r3, [r5, #0]
 800141e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001422:	4660      	mov	r0, ip
 8001424:	f7ff fe02 	bl	800102c <lcd_showMessage>

			dac_write = (int) (dac_vout / (3.3/4095));
 8001428:	a317      	add	r3, pc, #92	; (adr r3, 8001488 <DAC_Test+0x220>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001432:	f7ff fa33 	bl	800089c <__aeabi_ddiv>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	4618      	mov	r0, r3
 800143c:	4621      	mov	r1, r4
 800143e:	f7ff fbb3 	bl	8000ba8 <__aeabi_d2iz>
 8001442:	4603      	mov	r3, r0
 8001444:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (dac_write == 4096)
 8001448:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800144c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001450:	d104      	bne.n	800145c <DAC_Test+0x1f4>
				DAC->DHR12R1 = 4095;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <DAC_Test+0x238>)
 8001454:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	e003      	b.n	8001464 <DAC_Test+0x1fc>
			else
				DAC->DHR12R1 = dac_write;
 800145c:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <DAC_Test+0x238>)
 800145e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001462:	6093      	str	r3, [r2, #8]
			HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001464:	2100      	movs	r1, #0
 8001466:	480f      	ldr	r0, [pc, #60]	; (80014a4 <DAC_Test+0x23c>)
 8001468:	f001 fedb 	bl	8003222 <HAL_DAC_Start>
		}
		reset_rtrencFlags();
 800146c:	f7ff fe62 	bl	8001134 <reset_rtrencFlags>
		HAL_Delay(150);
 8001470:	2096      	movs	r0, #150	; 0x96
 8001472:	f001 fd81 	bl	8002f78 <HAL_Delay>
		if (RTRENC_CW_EVENT)
 8001476:	e746      	b.n	8001306 <DAC_Test+0x9e>
 8001478:	33333333 	.word	0x33333333
 800147c:	3fd33333 	.word	0x3fd33333
 8001480:	66666666 	.word	0x66666666
 8001484:	400a6666 	.word	0x400a6666
 8001488:	e734d9b4 	.word	0xe734d9b4
 800148c:	3f4a680c 	.word	0x3f4a680c
 8001490:	200002ec 	.word	0x200002ec
 8001494:	080086b4 	.word	0x080086b4
 8001498:	080086d4 	.word	0x080086d4
 800149c:	20000238 	.word	0x20000238
 80014a0:	40007400 	.word	0x40007400
 80014a4:	20000298 	.word	0x20000298
 80014a8:	20000234 	.word	0x20000234

080014ac <Demo_Mode>:
	}
}

void Demo_Mode(int preset)
{
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b0e5      	sub	sp, #404	; 0x194
 80014b0:	af0e      	add	r7, sp, #56	; 0x38
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	6018      	str	r0, [r3, #0]
	int preset_ind = preset - 1;
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	char * buf[80];

	reset_rtrencFlags();
 80014c0:	f7ff fe38 	bl	8001134 <reset_rtrencFlags>
	sprintf(buf, "Showing parameters\rfor %s\r\rPress knob to start.", parameterNames[preset_ind]);
 80014c4:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <Demo_Mode+0x194>)
 80014c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80014ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	495c      	ldr	r1, [pc, #368]	; (8001644 <Demo_Mode+0x198>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fc6f 	bl	8006db8 <siprintf>
	while (!RTRENC_PUSHB_EVENT)
 80014da:	e002      	b.n	80014e2 <Demo_Mode+0x36>
	{
		HAL_Delay(100);
 80014dc:	2064      	movs	r0, #100	; 0x64
 80014de:	f001 fd4b 	bl	8002f78 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 80014e2:	4b59      	ldr	r3, [pc, #356]	; (8001648 <Demo_Mode+0x19c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f8      	beq.n	80014dc <Demo_Mode+0x30>
	}
	reset_rtrencFlags();
 80014ea:	f7ff fe23 	bl	8001134 <reset_rtrencFlags>

	for (int curParameter = 0; curParameter < NUM_PARAMETERS; curParameter++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014f4:	e076      	b.n	80015e4 <Demo_Mode+0x138>
	{
		int parameterVal = parameterVals[preset_ind][curParameter];
 80014f6:	4955      	ldr	r1, [pc, #340]	; (800164c <Demo_Mode+0x1a0>)
 80014f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	18ca      	adds	r2, r1, r3
 8001504:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		sprintf(buf, "Set the\r%s\rknob to %d.\rPress knob to go on.", parameterNames[preset_ind], parameterVal);
 8001510:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <Demo_Mode+0x194>)
 8001512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800151a:	f107 0008 	add.w	r0, r7, #8
 800151e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001522:	494b      	ldr	r1, [pc, #300]	; (8001650 <Demo_Mode+0x1a4>)
 8001524:	f005 fc48 	bl	8006db8 <siprintf>
		lcd_showMessage(buf, huart4);
 8001528:	4e4a      	ldr	r6, [pc, #296]	; (8001654 <Demo_Mode+0x1a8>)
 800152a:	f107 0c08 	add.w	ip, r7, #8
 800152e:	466d      	mov	r5, sp
 8001530:	f106 040c 	add.w	r4, r6, #12
 8001534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	602b      	str	r3, [r5, #0]
 8001544:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001548:	4660      	mov	r0, ip
 800154a:	f7ff fd6f 	bl	800102c <lcd_showMessage>
		if (parameterVal != 0)
 800154e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001552:	2b00      	cmp	r3, #0
 8001554:	d027      	beq.n	80015a6 <Demo_Mode+0xfa>
		{
			flashLED(curParameter);
 8001556:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800155a:	f000 fea3 	bl	80022a4 <flashLED>
			HAL_Delay(600);
 800155e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001562:	f001 fd09 	bl	8002f78 <HAL_Delay>
			flashLED(curParameter);
 8001566:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800156a:	f000 fe9b 	bl	80022a4 <flashLED>
			HAL_Delay(600);
 800156e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001572:	f001 fd01 	bl	8002f78 <HAL_Delay>
			for (int i = 1; i <= parameterVal; i++)
 8001576:	2301      	movs	r3, #1
 8001578:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800157c:	e00d      	b.n	800159a <Demo_Mode+0xee>
			{
				updateRingLED(curParameter, i);
 800157e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001582:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8001586:	f000 fe5d 	bl	8002244 <updateRingLED>
				HAL_Delay(80);
 800158a:	2050      	movs	r0, #80	; 0x50
 800158c:	f001 fcf4 	bl	8002f78 <HAL_Delay>
			for (int i = 1; i <= parameterVal; i++)
 8001590:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800159a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800159e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80015a2:	429a      	cmp	r2, r3
 80015a4:	ddeb      	ble.n	800157e <Demo_Mode+0xd2>
			}
		}
		reset_rtrencFlags();
 80015a6:	f7ff fdc5 	bl	8001134 <reset_rtrencFlags>
		while (!RTRENC_PUSHB_EVENT)
 80015aa:	e00e      	b.n	80015ca <Demo_Mode+0x11e>
		{
			HAL_Delay(100);
 80015ac:	2064      	movs	r0, #100	; 0x64
 80015ae:	f001 fce3 	bl	8002f78 <HAL_Delay>
			if (parameterVal == 0)
 80015b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <Demo_Mode+0x11e>
			{
				flashLED(curParameter);
 80015ba:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80015be:	f000 fe71 	bl	80022a4 <flashLED>
				HAL_Delay(500);
 80015c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c6:	f001 fcd7 	bl	8002f78 <HAL_Delay>
		while (!RTRENC_PUSHB_EVENT)
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <Demo_Mode+0x19c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0ec      	beq.n	80015ac <Demo_Mode+0x100>
			}
		}
		reset_rtrencFlags();
 80015d2:	f7ff fdaf 	bl	8001134 <reset_rtrencFlags>
		clearLEDs();
 80015d6:	f000 fe99 	bl	800230c <clearLEDs>
	for (int curParameter = 0; curParameter < NUM_PARAMETERS; curParameter++)
 80015da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015de:	3301      	adds	r3, #1
 80015e0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	dd84      	ble.n	80014f6 <Demo_Mode+0x4a>
	}

	//probably some specific stuff for the waveform generators

	sprintf(buf, "Parameters for\r%s\rhave been set!\rPush knob to return.");
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	4919      	ldr	r1, [pc, #100]	; (8001658 <Demo_Mode+0x1ac>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 fbe0 	bl	8006db8 <siprintf>
	lcd_showMessage(buf, huart4);
 80015f8:	4e16      	ldr	r6, [pc, #88]	; (8001654 <Demo_Mode+0x1a8>)
 80015fa:	f107 0c08 	add.w	ip, r7, #8
 80015fe:	466d      	mov	r5, sp
 8001600:	f106 040c 	add.w	r4, r6, #12
 8001604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	602b      	str	r3, [r5, #0]
 8001614:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001618:	4660      	mov	r0, ip
 800161a:	f7ff fd07 	bl	800102c <lcd_showMessage>
	reset_rtrencFlags();
 800161e:	f7ff fd89 	bl	8001134 <reset_rtrencFlags>
	while (!RTRENC_PUSHB_EVENT)
 8001622:	e002      	b.n	800162a <Demo_Mode+0x17e>
	{
		HAL_Delay(100);
 8001624:	2064      	movs	r0, #100	; 0x64
 8001626:	f001 fca7 	bl	8002f78 <HAL_Delay>
	while (!RTRENC_PUSHB_EVENT)
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <Demo_Mode+0x19c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f8      	beq.n	8001624 <Demo_Mode+0x178>
	}
	reset_rtrencFlags();
 8001632:	f7ff fd7f 	bl	8001134 <reset_rtrencFlags>
}
 8001636:	bf00      	nop
 8001638:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800163c:	46bd      	mov	sp, r7
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001640:	20000020 	.word	0x20000020
 8001644:	08008708 	.word	0x08008708
 8001648:	2000023c 	.word	0x2000023c
 800164c:	0800879c 	.word	0x0800879c
 8001650:	08008738 	.word	0x08008738
 8001654:	200002ec 	.word	0x200002ec
 8001658:	08008764 	.word	0x08008764

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b08f      	sub	sp, #60	; 0x3c
 8001660:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001662:	f001 fc17 	bl	8002e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001666:	f000 f873 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166a:	f000 fa05 	bl	8001a78 <MX_GPIO_Init>
  MX_UART4_Init();
 800166e:	f000 f9af 	bl	80019d0 <MX_UART4_Init>
  MX_DAC_Init();
 8001672:	f000 f8d7 	bl	8001824 <MX_DAC_Init>
  MX_TIM1_Init();
 8001676:	f000 f8ff 	bl	8001878 <MX_TIM1_Init>
  MX_UART5_Init();
 800167a:	f000 f9d3 	bl	8001a24 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(800);
 800167e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001682:	f001 fc79 	bl	8002f78 <HAL_Delay>
  lcd_changeColor('w', huart4);
 8001686:	4e2d      	ldr	r6, [pc, #180]	; (800173c <main+0xe0>)
 8001688:	466d      	mov	r5, sp
 800168a:	f106 040c 	add.w	r4, r6, #12
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	602b      	str	r3, [r5, #0]
 800169e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80016a2:	2077      	movs	r0, #119	; 0x77
 80016a4:	f7ff fc28 	bl	8000ef8 <lcd_changeColor>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_clear(huart4);
 80016a8:	4e24      	ldr	r6, [pc, #144]	; (800173c <main+0xe0>)
 80016aa:	466d      	mov	r5, sp
 80016ac:	f106 0410 	add.w	r4, r6, #16
 80016b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016c4:	f7ff fc9c 	bl	8001000 <lcd_clear>
  updateMenuDisplay();
 80016c8:	f7ff fcdc 	bl	8001084 <updateMenuDisplay>
  visInit();
 80016cc:	f000 fd90 	bl	80021f0 <visInit>
  clearLEDs();
 80016d0:	f000 fe1c 	bl	800230c <clearLEDs>

  while (1)
  {
	  if (RTRENC_CW_EVENT)
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <main+0xe4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <main+0x86>
	  {
	 	 clockwise_menu_event();
 80016dc:	f7ff fd02 	bl	80010e4 <clockwise_menu_event>
 80016e0:	e025      	b.n	800172e <main+0xd2>
	  }
	  else if (RTRENC_CCW_EVENT)
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <main+0xe8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <main+0x94>
	  {
	  	 anticlockwise_menu_event();
 80016ea:	f7ff fd0f 	bl	800110c <anticlockwise_menu_event>
 80016ee:	e01e      	b.n	800172e <main+0xd2>
	  }
	  else if (CURRENT_PRESET == 6 && RTRENC_PUSHB_EVENT)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <main+0xec>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b06      	cmp	r3, #6
 80016f6:	d106      	bne.n	8001706 <main+0xaa>
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <main+0xf0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <main+0xaa>
	  {
		 DAC_Test();
 8001700:	f7ff fdb2 	bl	8001268 <DAC_Test>
 8001704:	e013      	b.n	800172e <main+0xd2>
	  }
	  else if (CURRENT_PRESET == 7 && RTRENC_PUSHB_EVENT)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <main+0xec>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d106      	bne.n	800171c <main+0xc0>
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <main+0xf0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <main+0xc0>
	  {
		  LED_Test();
 8001716:	f7ff fd23 	bl	8001160 <LED_Test>
 800171a:	e008      	b.n	800172e <main+0xd2>
	  }
	  else if (RTRENC_PUSHB_EVENT)
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <main+0xf0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <main+0xd2>
	  {
		  //demo mode bb
		  Demo_Mode(CURRENT_PRESET);
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <main+0xec>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff febf 	bl	80014ac <Demo_Mode>
	  }

	  reset_rtrencFlags();
 800172e:	f7ff fd01 	bl	8001134 <reset_rtrencFlags>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(125);
 8001732:	207d      	movs	r0, #125	; 0x7d
 8001734:	f001 fc20 	bl	8002f78 <HAL_Delay>
	  if (RTRENC_CW_EVENT)
 8001738:	e7cc      	b.n	80016d4 <main+0x78>
 800173a:	bf00      	nop
 800173c:	200002ec 	.word	0x200002ec
 8001740:	20000238 	.word	0x20000238
 8001744:	20000234 	.word	0x20000234
 8001748:	20000000 	.word	0x20000000
 800174c:	2000023c 	.word	0x2000023c

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	; 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	2234      	movs	r2, #52	; 0x34
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f004 fec6 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <SystemClock_Config+0xcc>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a27      	ldr	r2, [pc, #156]	; (800181c <SystemClock_Config+0xcc>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <SystemClock_Config+0xcc>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	2300      	movs	r3, #0
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <SystemClock_Config+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <SystemClock_Config+0xd0>)
 800179a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <SystemClock_Config+0xd0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	2310      	movs	r3, #16
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017c0:	2308      	movs	r3, #8
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017c4:	2360      	movs	r3, #96	; 0x60
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fdb3 	bl	8004344 <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017e4:	f000 fa28 	bl	8001c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	230f      	movs	r3, #15
 80017ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ec:	2302      	movs	r3, #2
 80017ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	2103      	movs	r1, #3
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fbd1 	bl	8003fac <HAL_RCC_ClockConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001810:	f000 fa12 	bl	8001c38 <Error_Handler>
  }
}
 8001814:	bf00      	nop
 8001816:	3750      	adds	r7, #80	; 0x50
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000

08001824 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800182a:	463b      	mov	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_DAC_Init+0x4c>)
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <MX_DAC_Init+0x50>)
 8001836:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_DAC_Init+0x4c>)
 800183a:	f001 fcd0 	bl	80031de <HAL_DAC_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001844:	f000 f9f8 	bl	8001c38 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <MX_DAC_Init+0x4c>)
 8001858:	f001 fd49 	bl	80032ee <HAL_DAC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001862:	f000 f9e9 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000298 	.word	0x20000298
 8001874:	40007400 	.word	0x40007400

08001878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	; 0x58
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2220      	movs	r2, #32
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fe1d 	bl	80064f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018b8:	4a44      	ldr	r2, [pc, #272]	; (80019cc <MX_TIM1_Init+0x154>)
 80018ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018c8:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e2:	4839      	ldr	r0, [pc, #228]	; (80019c8 <MX_TIM1_Init+0x150>)
 80018e4:	f002 ff70 	bl	80047c8 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018ee:	f000 f9a3 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018fc:	4619      	mov	r1, r3
 80018fe:	4832      	ldr	r0, [pc, #200]	; (80019c8 <MX_TIM1_Init+0x150>)
 8001900:	f003 f9f2 	bl	8004ce8 <HAL_TIM_ConfigClockSource>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800190a:	f000 f995 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800190e:	482e      	ldr	r0, [pc, #184]	; (80019c8 <MX_TIM1_Init+0x150>)
 8001910:	f002 ffa9 	bl	8004866 <HAL_TIM_PWM_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800191a:	f000 f98d 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800192a:	4619      	mov	r1, r3
 800192c:	4826      	ldr	r0, [pc, #152]	; (80019c8 <MX_TIM1_Init+0x150>)
 800192e:	f003 fdcb 	bl	80054c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001938:	f000 f97e 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193c:	2360      	movs	r3, #96	; 0x60
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	4819      	ldr	r0, [pc, #100]	; (80019c8 <MX_TIM1_Init+0x150>)
 8001962:	f003 f8fb 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800196c:	f000 f964 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	2204      	movs	r2, #4
 8001976:	4619      	mov	r1, r3
 8001978:	4813      	ldr	r0, [pc, #76]	; (80019c8 <MX_TIM1_Init+0x150>)
 800197a:	f003 f8ef 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001984:	f000 f958 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <MX_TIM1_Init+0x150>)
 80019ac:	f003 fe08 	bl	80055c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019b6:	f000 f93f 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <MX_TIM1_Init+0x150>)
 80019bc:	f000 f9d2 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 80019c0:	bf00      	nop
 80019c2:	3758      	adds	r7, #88	; 0x58
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002ac 	.word	0x200002ac
 80019cc:	40010000 	.word	0x40010000

080019d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_UART4_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019f6:	2208      	movs	r2, #8
 80019f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_UART4_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_UART4_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_UART4_Init+0x4c>)
 8001a08:	f003 fe40 	bl	800568c <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a12:	f000 f911 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002ec 	.word	0x200002ec
 8001a20:	40004c00 	.word	0x40004c00

08001a24 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_UART5_Init+0x50>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 31250;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a30:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001a34:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_UART5_Init+0x4c>)
 8001a5c:	f003 fe16 	bl	800568c <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a66:	f000 f8e7 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000258 	.word	0x20000258
 8001a74:	40005000 	.word	0x40005000

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a62      	ldr	r2, [pc, #392]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a46      	ldr	r2, [pc, #280]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a3f      	ldr	r2, [pc, #252]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <MX_GPIO_Init+0x1a8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b3c:	4839      	ldr	r0, [pc, #228]	; (8001c24 <MX_GPIO_Init+0x1ac>)
 8001b3e:	f002 f9f7 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	4838      	ldr	r0, [pc, #224]	; (8001c28 <MX_GPIO_Init+0x1b0>)
 8001b48:	f002 f9f2 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <MX_GPIO_Init+0x1b4>)
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4833      	ldr	r0, [pc, #204]	; (8001c30 <MX_GPIO_Init+0x1b8>)
 8001b62:	f002 f83b 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : RTRENC_PSH_Pin */
  GPIO_InitStruct.Pin = RTRENC_PSH_Pin;
 8001b66:	2308      	movs	r3, #8
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <MX_GPIO_Init+0x1b4>)
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RTRENC_PSH_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	482d      	ldr	r0, [pc, #180]	; (8001c30 <MX_GPIO_Init+0x1b8>)
 8001b7a:	f002 f82f 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RTRENC_A_Pin RTRENC_B_Pin */
  GPIO_InitStruct.Pin = RTRENC_A_Pin|RTRENC_B_Pin;
 8001b7e:	2330      	movs	r3, #48	; 0x30
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <MX_GPIO_Init+0x1bc>)
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4827      	ldr	r0, [pc, #156]	; (8001c30 <MX_GPIO_Init+0x1b8>)
 8001b92:	f002 f823 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b96:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	481d      	ldr	r0, [pc, #116]	; (8001c24 <MX_GPIO_Init+0x1ac>)
 8001bb0:	f002 f814 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bb4:	2340      	movs	r3, #64	; 0x40
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4817      	ldr	r0, [pc, #92]	; (8001c28 <MX_GPIO_Init+0x1b0>)
 8001bcc:	f002 f806 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	; (8001c28 <MX_GPIO_Init+0x1b0>)
 8001be4:	f001 fffa 	bl	8003bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2102      	movs	r1, #2
 8001bec:	2009      	movs	r0, #9
 8001bee:	f001 fac0 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bf2:	2009      	movs	r0, #9
 8001bf4:	f001 fad9 	bl	80031aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f001 fab8 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c02:	200a      	movs	r0, #10
 8001c04:	f001 fad1 	bl	80031aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	2017      	movs	r0, #23
 8001c0e:	f001 fab0 	bl	8003172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c12:	2017      	movs	r0, #23
 8001c14:	f001 fac9 	bl	80031aa <HAL_NVIC_EnableIRQ>

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	10110000 	.word	0x10110000
 8001c30:	40020800 	.word	0x40020800
 8001c34:	10210000 	.word	0x10210000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_DAC_MspInit+0x7c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d127      	bne.n	8001d0a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_DAC_MspInit+0x80>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <HAL_DAC_MspInit+0x80>)
 8001cc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_DAC_MspInit+0x80>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_DAC_MspInit+0x80>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_DAC_MspInit+0x80>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_DAC_MspInit+0x80>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_DAC_MspInit+0x84>)
 8001d06:	f001 ff69 	bl	8003bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40007400 	.word	0x40007400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <HAL_TIM_Base_MspInit+0x3c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10d      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_TIM_Base_MspInit+0x40>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_TIM_MspPostInit+0x68>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d11e      	bne.n	8001dc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_TIM_MspPostInit+0x6c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_TIM_MspPostInit+0x6c>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_TIM_MspPostInit+0x6c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001da2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001da6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_TIM_MspPostInit+0x70>)
 8001dc0:	f001 ff0c 	bl	8003bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a45      	ldr	r2, [pc, #276]	; (8001f0c <HAL_UART_MspInit+0x134>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d14a      	bne.n	8001e90 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a43      	ldr	r2, [pc, #268]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e5e:	2308      	movs	r3, #8
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	482a      	ldr	r0, [pc, #168]	; (8001f14 <HAL_UART_MspInit+0x13c>)
 8001e6a:	f001 feb7 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001e7e:	230b      	movs	r3, #11
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4823      	ldr	r0, [pc, #140]	; (8001f18 <HAL_UART_MspInit+0x140>)
 8001e8a:	f001 fea7 	bl	8003bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e8e:	e039      	b.n	8001f04 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_UART_MspInit+0x144>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d134      	bne.n	8001f04 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_UART_MspInit+0x138>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8;
 8001ed2:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8001ee4:	230b      	movs	r3, #11
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <HAL_UART_MspInit+0x148>)
 8001ef0:	f001 fe74 	bl	8003bdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 1, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2035      	movs	r0, #53	; 0x35
 8001efa:	f001 f93a 	bl	8003172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001efe:	2035      	movs	r0, #53	; 0x35
 8001f00:	f001 f953 	bl	80031aa <HAL_NVIC_EnableIRQ>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40004c00 	.word	0x40004c00
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40005000 	.word	0x40005000
 8001f20:	40020400 	.word	0x40020400

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f78:	f000 ffde 	bl	8002f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	//rotary encoder push button event
		RTRENC_PUSHB_EVENT++;
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <EXTI3_IRQHandler+0x18>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <EXTI3_IRQHandler+0x18>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f8e:	2008      	movs	r0, #8
 8001f90:	f001 ffe8 	bl	8003f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000023c 	.word	0x2000023c

08001f9c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	  if (HAL_GPIO_ReadPin(RTRENC_B_GPIO_Port, RTRENC_B_Pin))
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <EXTI4_IRQHandler+0x28>)
 8001fa4:	f001 ffac 	bl	8003f00 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <EXTI4_IRQHandler+0x1c>
	  {
		  RTRENC_CW_EVENT++;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <EXTI4_IRQHandler+0x2c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <EXTI4_IRQHandler+0x2c>)
 8001fb6:	6013      	str	r3, [r2, #0]
	  }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fb8:	2010      	movs	r0, #16
 8001fba:	f001 ffd3 	bl	8003f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	20000238 	.word	0x20000238

08001fcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (HAL_GPIO_ReadPin(RTRENC_A_GPIO_Port, RTRENC_A_Pin))
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <EXTI9_5_IRQHandler+0x28>)
 8001fd4:	f001 ff94 	bl	8003f00 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <EXTI9_5_IRQHandler+0x1c>
		{
			RTRENC_CCW_EVENT++;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <EXTI9_5_IRQHandler+0x2c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <EXTI9_5_IRQHandler+0x2c>)
 8001fe6:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fe8:	2020      	movs	r0, #32
 8001fea:	f001 ffbb 	bl	8003f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	20000234 	.word	0x20000234

08001ffc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <UART5_IRQHandler+0x10>)
 8002002:	f003 fc29 	bl	8005858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000258 	.word	0x20000258

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f004 fa2c 	bl	800649c <__errno>
 8002044:	4602      	mov	r2, r0
 8002046:	230c      	movs	r3, #12
 8002048:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20050000 	.word	0x20050000
 8002070:	00000400 	.word	0x00000400
 8002074:	20000240 	.word	0x20000240
 8002078:	20000578 	.word	0x20000578

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SystemInit+0x28>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemInit+0x28>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SystemInit+0x28>)
 8002092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002096:	609a      	str	r2, [r3, #8]
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <visRing>:
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
	}
}

void visRing(uint8_t *frameBuffer, uint32_t frameBufferSize, int numRing, int numLEDs)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
	uint32_t color = newColor(60,0,13);
 80020b6:	4b27      	ldr	r3, [pc, #156]	; (8002154 <visRing+0xac>)
 80020b8:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < ((frameBufferSize / 3) - (12 - numLEDs)); i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e037      	b.n	8002130 <visRing+0x88>
	{
		frameBuffer[numRing * 12 + i*3 + 0] = (uint8_t)(color & 0xFF);
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4619      	mov	r1, r3
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]
		frameBuffer[numRing * 12 + i*3 + 1] = (uint8_t)(color >> 8 & 0xFF);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	0a19      	lsrs	r1, r3, #8
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	4403      	add	r3, r0
 80020fc:	3301      	adds	r3, #1
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	b2ca      	uxtb	r2, r1
 8002104:	701a      	strb	r2, [r3, #0]
		frameBuffer[numRing * 12 + i*3 + 2] = (uint8_t)(color >> 16 & 0xFF);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	0c19      	lsrs	r1, r3, #16
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4618      	mov	r0, r3
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	4403      	add	r3, r0
 8002120:	3302      	adds	r3, #2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	b2ca      	uxtb	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < ((frameBufferSize / 3) - (12 - numLEDs)); i++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <visRing+0xb0>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	085a      	lsrs	r2, r3, #1
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	f1a3 020c 	sub.w	r2, r3, #12
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8bb      	bhi.n	80020c0 <visRing+0x18>
	}
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	000d003c 	.word	0x000d003c
 8002158:	aaaaaaab 	.word	0xaaaaaaab

0800215c <visFlashOn>:

void visFlashOn(uint8_t *frameBuffer, uint32_t frameBufferSize, int numRing)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
	uint32_t color = newColor(0, 60, 10);
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <visFlashOn+0x8c>)
 800216a:	613b      	str	r3, [r7, #16]
	for (int i = 12 * numRing; i < ((frameBufferSize / 3) + (numRing * 12)); i++)
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	e022      	b.n	80021c0 <visFlashOn+0x64>
	{
		frameBuffer[i*3 + 0] = (uint8_t)(color & 0xFF);
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = (uint8_t)(color >> 8 & 0xFF);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	0a19      	lsrs	r1, r3, #8
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	3301      	adds	r3, #1
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	b2ca      	uxtb	r2, r1
 80021a2:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = (uint8_t)(color >> 16 & 0xFF);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	0c19      	lsrs	r1, r3, #16
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3302      	adds	r3, #2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
	for (int i = 12 * numRing; i < ((frameBufferSize / 3) + (numRing * 12)); i++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <visFlashOn+0x90>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0859      	lsrs	r1, r3, #1
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	18ca      	adds	r2, r1, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8ce      	bhi.n	800217a <visFlashOn+0x1e>
	}
}
 80021dc:	bf00      	nop
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	000a3c00 	.word	0x000a3c00
 80021ec:	aaaaaaab 	.word	0xaaaaaaab

080021f0 <visInit>:
	}
}


void visInit()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0

	// 4 paralel output LED strips needs 18% overhead during TX
	// 8 paralel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	e016      	b.n	800222a <visInit+0x3a>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = i;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	4a0f      	ldr	r2, [pc, #60]	; (800223c <visInit+0x4c>)
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4413      	add	r3, r2
 8002204:	330c      	adds	r3, #12
 8002206:	79fa      	ldrb	r2, [r7, #7]
 8002208:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		//if(i % 2 == 0)
		//{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <visInit+0x4c>)
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <visInit+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <visInit+0x4c>)
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	3301      	adds	r3, #1
 8002228:	71fb      	strb	r3, [r7, #7]
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0e5      	beq.n	80021fc <visInit+0xc>
		}*/

	}


	ws2812b_init();
 8002230:	f000 fde6 	bl	8002e00 <ws2812b_init>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000032c 	.word	0x2000032c
 8002240:	20000348 	.word	0x20000348

08002244 <updateRingLED>:
		ws2812b_handle();
	}
}

void updateRingLED(int numRing, int numLEDs)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	if (ws2812b.transferComplete)
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <updateRingLED+0x54>)
 8002250:	7c1b      	ldrb	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01c      	beq.n	8002290 <updateRingLED+0x4c>
	{
		static uint32_t timestamp;

		if (HAL_GetTick() - timestamp > 10)
 8002256:	f000 fe83 	bl	8002f60 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <updateRingLED+0x58>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b0a      	cmp	r3, #10
 8002264:	d90f      	bls.n	8002286 <updateRingLED+0x42>
		{
			timestamp = HAL_GetTick();
 8002266:	f000 fe7b 	bl	8002f60 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <updateRingLED+0x58>)
 800226e:	601a      	str	r2, [r3, #0]
			memset(frameBuffer, 0, sizeof(frameBuffer));
 8002270:	2224      	movs	r2, #36	; 0x24
 8002272:	2100      	movs	r1, #0
 8002274:	480a      	ldr	r0, [pc, #40]	; (80022a0 <updateRingLED+0x5c>)
 8002276:	f004 f93b 	bl	80064f0 <memset>
			visRing(frameBuffer, sizeof(frameBuffer), numRing, numLEDs);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	2124      	movs	r1, #36	; 0x24
 8002280:	4807      	ldr	r0, [pc, #28]	; (80022a0 <updateRingLED+0x5c>)
 8002282:	f7ff ff11 	bl	80020a8 <visRing>
		}
		ws2812b.startTransfer = 1;
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <updateRingLED+0x54>)
 8002288:	2201      	movs	r2, #1
 800228a:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 800228c:	f000 fdc8 	bl	8002e20 <ws2812b_handle>
	}
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000032c 	.word	0x2000032c
 800229c:	20000244 	.word	0x20000244
 80022a0:	20000348 	.word	0x20000348

080022a4 <flashLED>:

void flashLED(int numRing)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	if (ws2812b.transferComplete)
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <flashLED+0x5c>)
 80022ae:	7c1b      	ldrb	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <flashLED+0x48>
	{
		static uint32_t timestamp;

		if (HAL_GetTick() - timestamp > 10)
 80022b4:	f000 fe54 	bl	8002f60 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <flashLED+0x60>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b0a      	cmp	r3, #10
 80022c2:	d90e      	bls.n	80022e2 <flashLED+0x3e>
		{
			timestamp = HAL_GetTick();
 80022c4:	f000 fe4c 	bl	8002f60 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <flashLED+0x60>)
 80022cc:	601a      	str	r2, [r3, #0]
			memset(frameBuffer, 0, sizeof(frameBuffer));
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	2100      	movs	r1, #0
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <flashLED+0x64>)
 80022d4:	f004 f90c 	bl	80064f0 <memset>
			visFlashOn(frameBuffer, sizeof(frameBuffer), numRing);
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	2124      	movs	r1, #36	; 0x24
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <flashLED+0x64>)
 80022de:	f7ff ff3d 	bl	800215c <visFlashOn>
		}
		ws2812b.startTransfer = 1;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <flashLED+0x5c>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 80022e8:	f000 fd9a 	bl	8002e20 <ws2812b_handle>
	}
	HAL_Delay(600);
 80022ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022f0:	f000 fe42 	bl	8002f78 <HAL_Delay>
	clearLEDs();
 80022f4:	f000 f80a 	bl	800230c <clearLEDs>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000032c 	.word	0x2000032c
 8002304:	20000248 	.word	0x20000248
 8002308:	20000348 	.word	0x20000348

0800230c <clearLEDs>:

void clearLEDs()
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	if (ws2812b.transferComplete)
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <clearLEDs+0x40>)
 8002312:	7c1b      	ldrb	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <clearLEDs+0x3a>
	{
		static uint32_t timestamp;

		if (HAL_GetTick() - timestamp > 10)
 8002318:	f000 fe22 	bl	8002f60 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <clearLEDs+0x44>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b0a      	cmp	r3, #10
 8002326:	d909      	bls.n	800233c <clearLEDs+0x30>
		{
			timestamp = HAL_GetTick();
 8002328:	f000 fe1a 	bl	8002f60 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <clearLEDs+0x44>)
 8002330:	601a      	str	r2, [r3, #0]
			memset(frameBuffer, 0, sizeof(frameBuffer));
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	2100      	movs	r1, #0
 8002336:	4807      	ldr	r0, [pc, #28]	; (8002354 <clearLEDs+0x48>)
 8002338:	f004 f8da 	bl	80064f0 <memset>
		}
		ws2812b.startTransfer = 1;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <clearLEDs+0x40>)
 800233e:	2201      	movs	r2, #1
 8002340:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8002342:	f000 fd6d 	bl	8002e20 <ws2812b_handle>
	}
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000032c 	.word	0x2000032c
 8002350:	2000024c 	.word	0x2000024c
 8002354:	20000348 	.word	0x20000348

08002358 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <ws2812b_gpio_init+0x94>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a21      	ldr	r2, [pc, #132]	; (80023ec <ws2812b_gpio_init+0x94>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <ws2812b_gpio_init+0x94>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	4619      	mov	r1, r3
 8002390:	4817      	ldr	r0, [pc, #92]	; (80023f0 <ws2812b_gpio_init+0x98>)
 8002392:	f001 fc23 	bl	8003bdc <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <ws2812b_gpio_init+0x94>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <ws2812b_gpio_init+0x94>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <ws2812b_gpio_init+0x94>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 80023be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c2:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	480a      	ldr	r0, [pc, #40]	; (80023f4 <ws2812b_gpio_init+0x9c>)
 80023cc:	f001 fc06 	bl	8003bdc <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 80023d6:	f107 030c 	add.w	r3, r7, #12
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <ws2812b_gpio_init+0x9c>)
 80023de:	f001 fbfd 	bl	8003bdc <HAL_GPIO_Init>
	#endif
}
 80023e2:	bf00      	nop
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40020c00 	.word	0x40020c00

080023f8 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <TIM1_init+0x154>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a51      	ldr	r2, [pc, #324]	; (800254c <TIM1_init+0x154>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b4f      	ldr	r3, [pc, #316]	; (800254c <TIM1_init+0x154>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <TIM1_init+0x158>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <TIM1_init+0x15c>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <TIM1_init+0x160>)
 800242a:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 800242c:	4b48      	ldr	r3, [pc, #288]	; (8002550 <TIM1_init+0x158>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4a      	ldr	r2, [pc, #296]	; (800255c <TIM1_init+0x164>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0adb      	lsrs	r3, r3, #11
 8002438:	4a49      	ldr	r2, [pc, #292]	; (8002560 <TIM1_init+0x168>)
 800243a:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <TIM1_init+0x160>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	461a      	mov	r2, r3
 800244a:	4b46      	ldr	r3, [pc, #280]	; (8002564 <TIM1_init+0x16c>)
 800244c:	fba3 2302 	umull	r2, r3, r3, r2
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <TIM1_init+0x160>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	461a      	mov	r2, r3
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <TIM1_init+0x170>)
 8002464:	fba3 2302 	umull	r2, r3, r3, r2
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 800246c:	4b3f      	ldr	r3, [pc, #252]	; (800256c <TIM1_init+0x174>)
 800246e:	4a40      	ldr	r2, [pc, #256]	; (8002570 <TIM1_init+0x178>)
 8002470:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <TIM1_init+0x160>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3d      	ldr	r2, [pc, #244]	; (800256c <TIM1_init+0x174>)
 8002478:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <TIM1_init+0x174>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <TIM1_init+0x174>)
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <TIM1_init+0x174>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <TIM1_init+0x174>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 8002492:	4836      	ldr	r0, [pc, #216]	; (800256c <TIM1_init+0x174>)
 8002494:	f002 f9e7 	bl	8004866 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2019      	movs	r0, #25
 800249e:	f000 fe68 	bl	8003172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024a2:	2019      	movs	r0, #25
 80024a4:	f000 fe81 	bl	80031aa <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 80024a8:	4b32      	ldr	r3, [pc, #200]	; (8002574 <TIM1_init+0x17c>)
 80024aa:	2260      	movs	r2, #96	; 0x60
 80024ac:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <TIM1_init+0x17c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 80024b4:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <TIM1_init+0x17c>)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <TIM1_init+0x17c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <TIM1_init+0x17c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 80024c6:	2200      	movs	r2, #0
 80024c8:	492a      	ldr	r1, [pc, #168]	; (8002574 <TIM1_init+0x17c>)
 80024ca:	4828      	ldr	r0, [pc, #160]	; (800256c <TIM1_init+0x174>)
 80024cc:	f002 fb46 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <TIM1_init+0x180>)
 80024d2:	2260      	movs	r2, #96	; 0x60
 80024d4:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80024d6:	4b28      	ldr	r3, [pc, #160]	; (8002578 <TIM1_init+0x180>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 80024dc:	4a26      	ldr	r2, [pc, #152]	; (8002578 <TIM1_init+0x180>)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <TIM1_init+0x180>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <TIM1_init+0x180>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <TIM1_init+0x180>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <TIM1_init+0x180>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 80024fa:	2204      	movs	r2, #4
 80024fc:	491e      	ldr	r1, [pc, #120]	; (8002578 <TIM1_init+0x180>)
 80024fe:	481b      	ldr	r0, [pc, #108]	; (800256c <TIM1_init+0x174>)
 8002500:	f002 fb2c 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8002504:	4819      	ldr	r0, [pc, #100]	; (800256c <TIM1_init+0x174>)
 8002506:	f002 f98a 	bl	800481e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 800250a:	2100      	movs	r1, #0
 800250c:	4817      	ldr	r0, [pc, #92]	; (800256c <TIM1_init+0x174>)
 800250e:	f002 f9df 	bl	80048d0 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <TIM1_init+0x174>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	f241 1311 	movw	r3, #4369	; 0x1111
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <TIM1_init+0x14a>
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <TIM1_init+0x174>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	f240 4344 	movw	r3, #1092	; 0x444
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <TIM1_init+0x14a>
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <TIM1_init+0x174>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <TIM1_init+0x174>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	20000034 	.word	0x20000034
 8002554:	014f8b59 	.word	0x014f8b59
 8002558:	20000448 	.word	0x20000448
 800255c:	1b4e81b5 	.word	0x1b4e81b5
 8002560:	20000388 	.word	0x20000388
 8002564:	38e38e39 	.word	0x38e38e39
 8002568:	88888889 	.word	0x88888889
 800256c:	20000408 	.word	0x20000408
 8002570:	40010000 	.word	0x40010000
 8002574:	200003ec 	.word	0x200003ec
 8002578:	2000036c 	.word	0x2000036c

0800257c <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b65      	ldr	r3, [pc, #404]	; (800271c <DMA2_init+0x1a0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a64      	ldr	r2, [pc, #400]	; (800271c <DMA2_init+0x1a0>)
 800258c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b62      	ldr	r3, [pc, #392]	; (800271c <DMA2_init+0x1a0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259e:	4b60      	ldr	r3, [pc, #384]	; (8002720 <DMA2_init+0x1a4>)
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <DMA2_init+0x1a4>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 80025aa:	4b5d      	ldr	r3, [pc, #372]	; (8002720 <DMA2_init+0x1a4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b0:	4b5b      	ldr	r3, [pc, #364]	; (8002720 <DMA2_init+0x1a4>)
 80025b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b6:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <DMA2_init+0x1a4>)
 80025ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025be:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 80025c0:	4b57      	ldr	r3, [pc, #348]	; (8002720 <DMA2_init+0x1a4>)
 80025c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c6:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <DMA2_init+0x1a4>)
 80025ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025ce:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <DMA2_init+0x1a4>)
 80025d2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80025d6:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d8:	4b51      	ldr	r3, [pc, #324]	; (8002720 <DMA2_init+0x1a4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025de:	4b50      	ldr	r3, [pc, #320]	; (8002720 <DMA2_init+0x1a4>)
 80025e0:	2203      	movs	r2, #3
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 80025e4:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <DMA2_init+0x1a4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <DMA2_init+0x1a4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 80025f0:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <DMA2_init+0x1a4>)
 80025f2:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <DMA2_init+0x1a8>)
 80025f4:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 80025f6:	484a      	ldr	r0, [pc, #296]	; (8002720 <DMA2_init+0x1a4>)
 80025f8:	f000 ff74 	bl	80034e4 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 80025fc:	4848      	ldr	r0, [pc, #288]	; (8002720 <DMA2_init+0x1a4>)
 80025fe:	f000 fec3 	bl	8003388 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 8002602:	4949      	ldr	r1, [pc, #292]	; (8002728 <DMA2_init+0x1ac>)
 8002604:	2330      	movs	r3, #48	; 0x30
 8002606:	4a49      	ldr	r2, [pc, #292]	; (800272c <DMA2_init+0x1b0>)
 8002608:	4845      	ldr	r0, [pc, #276]	; (8002720 <DMA2_init+0x1a4>)
 800260a:	f000 ffc9 	bl	80035a0 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800260e:	4b48      	ldr	r3, [pc, #288]	; (8002730 <DMA2_init+0x1b4>)
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <DMA2_init+0x1b4>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 800261a:	4b45      	ldr	r3, [pc, #276]	; (8002730 <DMA2_init+0x1b4>)
 800261c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002620:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002622:	4b43      	ldr	r3, [pc, #268]	; (8002730 <DMA2_init+0x1b4>)
 8002624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002628:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <DMA2_init+0x1b4>)
 800262c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002630:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <DMA2_init+0x1b4>)
 8002634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002638:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <DMA2_init+0x1b4>)
 800263c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002640:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <DMA2_init+0x1b4>)
 8002644:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002648:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <DMA2_init+0x1b4>)
 800264c:	2200      	movs	r2, #0
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002650:	4b37      	ldr	r3, [pc, #220]	; (8002730 <DMA2_init+0x1b4>)
 8002652:	2203      	movs	r2, #3
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <DMA2_init+0x1b4>)
 8002658:	2200      	movs	r2, #0
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800265c:	4b34      	ldr	r3, [pc, #208]	; (8002730 <DMA2_init+0x1b4>)
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <DMA2_init+0x1b4>)
 8002664:	4a33      	ldr	r2, [pc, #204]	; (8002734 <DMA2_init+0x1b8>)
 8002666:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 8002668:	4831      	ldr	r0, [pc, #196]	; (8002730 <DMA2_init+0x1b4>)
 800266a:	f000 ff3b 	bl	80034e4 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 800266e:	4830      	ldr	r0, [pc, #192]	; (8002730 <DMA2_init+0x1b4>)
 8002670:	f000 fe8a 	bl	8003388 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 8002674:	4930      	ldr	r1, [pc, #192]	; (8002738 <DMA2_init+0x1bc>)
 8002676:	2330      	movs	r3, #48	; 0x30
 8002678:	4a30      	ldr	r2, [pc, #192]	; (800273c <DMA2_init+0x1c0>)
 800267a:	482d      	ldr	r0, [pc, #180]	; (8002730 <DMA2_init+0x1b4>)
 800267c:	f000 ff90 	bl	80035a0 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <DMA2_init+0x1c4>)
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <DMA2_init+0x1c4>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <DMA2_init+0x1c4>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002692:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <DMA2_init+0x1c4>)
 8002694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002698:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800269a:	4b29      	ldr	r3, [pc, #164]	; (8002740 <DMA2_init+0x1c4>)
 800269c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026a0:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <DMA2_init+0x1c4>)
 80026a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a8:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <DMA2_init+0x1c4>)
 80026ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026b0:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <DMA2_init+0x1c4>)
 80026b4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80026b8:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <DMA2_init+0x1c4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026c0:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <DMA2_init+0x1c4>)
 80026c2:	2203      	movs	r2, #3
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <DMA2_init+0x1c4>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <DMA2_init+0x1c4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <DMA2_init+0x1c4>)
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <DMA2_init+0x1c8>)
 80026d6:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 80026d8:	4819      	ldr	r0, [pc, #100]	; (8002740 <DMA2_init+0x1c4>)
 80026da:	f000 ff03 	bl	80034e4 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <DMA2_init+0x1c4>)
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <DMA2_init+0x1cc>)
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <DMA2_init+0x1c4>)
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <DMA2_init+0x1d0>)
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <DMA2_init+0x1c4>)
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <DMA2_init+0x1d4>)
 80026ee:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 80026f0:	4813      	ldr	r0, [pc, #76]	; (8002740 <DMA2_init+0x1c4>)
 80026f2:	f000 fe49 	bl	8003388 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	203a      	movs	r0, #58	; 0x3a
 80026fc:	f000 fd39 	bl	8003172 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002700:	203a      	movs	r0, #58	; 0x3a
 8002702:	f000 fd52 	bl	80031aa <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8002706:	4913      	ldr	r1, [pc, #76]	; (8002754 <DMA2_init+0x1d8>)
 8002708:	2330      	movs	r3, #48	; 0x30
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <DMA2_init+0x1b0>)
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <DMA2_init+0x1c4>)
 800270e:	f000 ff82 	bl	8003616 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	20000510 	.word	0x20000510
 8002724:	40026488 	.word	0x40026488
 8002728:	20000038 	.word	0x20000038
 800272c:	40021018 	.word	0x40021018
 8002730:	2000044c 	.word	0x2000044c
 8002734:	40026428 	.word	0x40026428
 8002738:	200004b0 	.word	0x200004b0
 800273c:	4002101a 	.word	0x4002101a
 8002740:	2000038c 	.word	0x2000038c
 8002744:	40026440 	.word	0x40026440
 8002748:	08002a51 	.word	0x08002a51
 800274c:	080029f5 	.word	0x080029f5
 8002750:	080029d5 	.word	0x080029d5
 8002754:	2000003c 	.word	0x2000003c

08002758 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af02      	add	r7, sp, #8
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	1c58      	adds	r0, r3, #1
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6088      	str	r0, [r1, #8]
 8002770:	4413      	add	r3, r2
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	1c58      	adds	r0, r3, #1
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6088      	str	r0, [r1, #8]
 8002784:	4413      	add	r3, r2
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	1c58      	adds	r0, r3, #1
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	6088      	str	r0, [r1, #8]
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d102      	bne.n	80027b0 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7b18      	ldrb	r0, [r3, #12]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b299      	uxth	r1, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	b2dc      	uxtb	r4, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4623      	mov	r3, r4
 80027c8:	f000 fa34 	bl	8002c34 <ws2812b_set_pixel>
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}

080027d4 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 80027da:	4b72      	ldr	r3, [pc, #456]	; (80029a4 <WS2812_sendbuf+0x1d0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	741a      	strb	r2, [r3, #16]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	e019      	b.n	800281a <WS2812_sendbuf+0x46>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 80027e6:	4a6f      	ldr	r2, [pc, #444]	; (80029a4 <WS2812_sendbuf+0x1d0>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	4413      	add	r3, r2
 80027ee:	3308      	adds	r3, #8
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	4a6a      	ldr	r2, [pc, #424]	; (80029a4 <WS2812_sendbuf+0x1d0>)
 80027fa:	4413      	add	r3, r2
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ffaa 	bl	8002758 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <WS2812_sendbuf+0x1d0>)
 800280a:	4413      	add	r3, r2
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ffa2 	bl	8002758 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3301      	adds	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0e2      	beq.n	80027e6 <WS2812_sendbuf+0x12>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8002820:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <WS2812_sendbuf+0x1d4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <WS2812_sendbuf+0x1d8>)
 8002828:	429a      	cmp	r2, r3
 800282a:	d904      	bls.n	8002836 <WS2812_sendbuf+0x62>
 800282c:	4b60      	ldr	r3, [pc, #384]	; (80029b0 <WS2812_sendbuf+0x1dc>)
 800282e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	e019      	b.n	800286a <WS2812_sendbuf+0x96>
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <WS2812_sendbuf+0x1d4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <WS2812_sendbuf+0x1e0>)
 800283e:	429a      	cmp	r2, r3
 8002840:	d904      	bls.n	800284c <WS2812_sendbuf+0x78>
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <WS2812_sendbuf+0x1dc>)
 8002844:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	e00e      	b.n	800286a <WS2812_sendbuf+0x96>
 800284c:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <WS2812_sendbuf+0x1d4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <WS2812_sendbuf+0x1e4>)
 8002854:	429a      	cmp	r2, r3
 8002856:	d904      	bls.n	8002862 <WS2812_sendbuf+0x8e>
 8002858:	4b58      	ldr	r3, [pc, #352]	; (80029bc <WS2812_sendbuf+0x1e8>)
 800285a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	e003      	b.n	800286a <WS2812_sendbuf+0x96>
 8002862:	4b56      	ldr	r3, [pc, #344]	; (80029bc <WS2812_sendbuf+0x1e8>)
 8002864:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002868:	609a      	str	r2, [r3, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 800286a:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <WS2812_sendbuf+0x1ec>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4b4e      	ldr	r3, [pc, #312]	; (80029ac <WS2812_sendbuf+0x1d8>)
 8002872:	429a      	cmp	r2, r3
 8002874:	d904      	bls.n	8002880 <WS2812_sendbuf+0xac>
 8002876:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <WS2812_sendbuf+0x1dc>)
 8002878:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	e019      	b.n	80028b4 <WS2812_sendbuf+0xe0>
 8002880:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <WS2812_sendbuf+0x1ec>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <WS2812_sendbuf+0x1e0>)
 8002888:	429a      	cmp	r2, r3
 800288a:	d904      	bls.n	8002896 <WS2812_sendbuf+0xc2>
 800288c:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <WS2812_sendbuf+0x1dc>)
 800288e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e00e      	b.n	80028b4 <WS2812_sendbuf+0xe0>
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <WS2812_sendbuf+0x1ec>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <WS2812_sendbuf+0x1e4>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d904      	bls.n	80028ac <WS2812_sendbuf+0xd8>
 80028a2:	4b46      	ldr	r3, [pc, #280]	; (80029bc <WS2812_sendbuf+0x1e8>)
 80028a4:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e003      	b.n	80028b4 <WS2812_sendbuf+0xe0>
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <WS2812_sendbuf+0x1e8>)
 80028ae:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80028b2:	609a      	str	r2, [r3, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <WS2812_sendbuf+0x1f0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <WS2812_sendbuf+0x1d8>)
 80028bc:	429a      	cmp	r2, r3
 80028be:	d904      	bls.n	80028ca <WS2812_sendbuf+0xf6>
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <WS2812_sendbuf+0x1dc>)
 80028c2:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	e019      	b.n	80028fe <WS2812_sendbuf+0x12a>
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <WS2812_sendbuf+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b38      	ldr	r3, [pc, #224]	; (80029b4 <WS2812_sendbuf+0x1e0>)
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d904      	bls.n	80028e0 <WS2812_sendbuf+0x10c>
 80028d6:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <WS2812_sendbuf+0x1dc>)
 80028d8:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	e00e      	b.n	80028fe <WS2812_sendbuf+0x12a>
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <WS2812_sendbuf+0x1f0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <WS2812_sendbuf+0x1e4>)
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d904      	bls.n	80028f6 <WS2812_sendbuf+0x122>
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <WS2812_sendbuf+0x1e8>)
 80028ee:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	e003      	b.n	80028fe <WS2812_sendbuf+0x12a>
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <WS2812_sendbuf+0x1e8>)
 80028f8:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80028fc:	609a      	str	r2, [r3, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <WS2812_sendbuf+0x1d4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2230      	movs	r2, #48	; 0x30
 8002904:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <WS2812_sendbuf+0x1ec>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2230      	movs	r2, #48	; 0x30
 800290c:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <WS2812_sendbuf+0x1f0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2230      	movs	r2, #48	; 0x30
 8002914:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 021f 	mvn.w	r2, #31
 800291e:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <WS2812_sendbuf+0x1d4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <WS2812_sendbuf+0x1d4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <WS2812_sendbuf+0x1ec>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <WS2812_sendbuf+0x1ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <WS2812_sendbuf+0x1f0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <WS2812_sendbuf+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800297e:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <WS2812_sendbuf+0x1f8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <WS2812_sendbuf+0x1fc>)
 8002986:	3b01      	subs	r3, #1
 8002988:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <WS2812_sendbuf+0x1f4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000032c 	.word	0x2000032c
 80029a8:	20000510 	.word	0x20000510
 80029ac:	40026458 	.word	0x40026458
 80029b0:	40026400 	.word	0x40026400
 80029b4:	400260b8 	.word	0x400260b8
 80029b8:	40026058 	.word	0x40026058
 80029bc:	40026000 	.word	0x40026000
 80029c0:	2000044c 	.word	0x2000044c
 80029c4:	2000038c 	.word	0x2000038c
 80029c8:	20000408 	.word	0x20000408
 80029cc:	20000448 	.word	0x20000448
 80029d0:	40010000 	.word	0x40010000

080029d4 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
	i++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <DMA_TransferHalfHandler+0x58>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d108      	bne.n	8002a16 <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8002a04:	2300      	movs	r3, #0
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 f910 	bl	8002c34 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 8002a14:	e015      	b.n	8002a42 <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e00a      	b.n	8002a32 <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <DMA_TransferHalfHandler+0x58>)
 8002a22:	4413      	add	r3, r2
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe96 	bl	8002758 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f1      	beq.n	8002a1c <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <DMA_TransferHalfHandler+0x58>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <DMA_TransferHalfHandler+0x58>)
 8002a40:	6193      	str	r3, [r2, #24]
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000032c 	.word	0x2000032c

08002a50 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002a58:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <DMA_TransferCompleteHandler+0x10c>)
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002a60:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <DMA_TransferCompleteHandler+0x110>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d15a      	bne.n	8002b1e <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 8002a68:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <DMA_TransferCompleteHandler+0x110>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a3c      	ldr	r2, [pc, #240]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <DMA_TransferCompleteHandler+0x118>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <DMA_TransferCompleteHandler+0x118>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <DMA_TransferCompleteHandler+0x11c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <DMA_TransferCompleteHandler+0x11c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <DMA_TransferCompleteHandler+0x120>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <DMA_TransferCompleteHandler+0x120>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002aaa:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab8:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002aba:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ac8:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad8:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8002ada:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <DMA_TransferCompleteHandler+0x128>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8002aee:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0201 	mvn.w	r2, #1
 8002af6:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <DMA_TransferCompleteHandler+0x124>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <DMA_TransferCompleteHandler+0x114>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <DMA_TransferCompleteHandler+0x12c>)
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <DMA_TransferCompleteHandler+0x130>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	e015      	b.n	8002b4a <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e00a      	b.n	8002b3a <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <DMA_TransferCompleteHandler+0x110>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fe12 	bl	8002758 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f1      	beq.n	8002b24 <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <DMA_TransferCompleteHandler+0x110>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <DMA_TransferCompleteHandler+0x110>)
 8002b48:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <DMA_TransferCompleteHandler+0x10c>)
 8002b4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b50:	619a      	str	r2, [r3, #24]
	#endif

}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	2000032c 	.word	0x2000032c
 8002b64:	40010000 	.word	0x40010000
 8002b68:	20000510 	.word	0x20000510
 8002b6c:	2000044c 	.word	0x2000044c
 8002b70:	2000038c 	.word	0x2000038c
 8002b74:	20000408 	.word	0x20000408
 8002b78:	20000388 	.word	0x20000388
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	2000003c 	.word	0x2000003c

08002b84 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <DMA2_Stream2_IRQHandler+0x20>)
 8002b8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b8e:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <DMA2_Stream2_IRQHandler+0x24>)
 8002b92:	f000 fdbb 	bl	800370c <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 8002b96:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <DMA2_Stream2_IRQHandler+0x20>)
 8002b98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b9c:	619a      	str	r2, [r3, #24]
	#endif
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	2000038c 	.word	0x2000038c

08002bac <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bb6:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002bba:	f001 fec7 	bl	800494c <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002bbe:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002bc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bc4:	619a      	str	r2, [r3, #24]
	#endif
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	20000408 	.word	0x20000408

08002bd4 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0201 	mvn.w	r2, #1
 8002c0e:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	741a      	strb	r2, [r3, #16]

}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000032c 	.word	0x2000032c
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	20000408 	.word	0x20000408
 8002c30:	20000448 	.word	0x20000448

08002c34 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8002c34:	b490      	push	{r4, r7}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4623      	mov	r3, r4
 8002c44:	71fb      	strb	r3, [r7, #7]
 8002c46:	4603      	mov	r3, r0
 8002c48:	80bb      	strh	r3, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	71bb      	strb	r3, [r7, #6]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	4a68      	ldr	r2, [pc, #416]	; (8002df8 <ws2812b_set_pixel+0x1c4>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	4a66      	ldr	r2, [pc, #408]	; (8002df8 <ws2812b_set_pixel+0x1c4>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 8002c62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c66:	4a64      	ldr	r2, [pc, #400]	; (8002df8 <ws2812b_set_pixel+0x1c4>)
 8002c68:	5cd3      	ldrb	r3, [r2, r3]
 8002c6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 8002c6e:	88ba      	ldrh	r2, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 8002c7a:	79bb      	ldrb	r3, [r7, #6]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 8002c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <ws2812b_set_pixel+0x1c8>)
 8002c94:	4413      	add	r3, r2
 8002c96:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
 8002c9a:	015b      	lsls	r3, r3, #5
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	09da      	lsrs	r2, r3, #7
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3340      	adds	r3, #64	; 0x40
 8002cb0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	099a      	lsrs	r2, r3, #6
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3340      	adds	r3, #64	; 0x40
 8002cbe:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	095a      	lsrs	r2, r3, #5
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3340      	adds	r3, #64	; 0x40
 8002ccc:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	091a      	lsrs	r2, r3, #4
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3340      	adds	r3, #64	; 0x40
 8002cda:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3340      	adds	r3, #64	; 0x40
 8002ce8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	089a      	lsrs	r2, r3, #2
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3340      	adds	r3, #64	; 0x40
 8002cf6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	085a      	lsrs	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3340      	adds	r3, #64	; 0x40
 8002d04:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3340      	adds	r3, #64	; 0x40
 8002d10:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	09da      	lsrs	r2, r3, #7
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3340      	adds	r3, #64	; 0x40
 8002d1e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	099a      	lsrs	r2, r3, #6
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3340      	adds	r3, #64	; 0x40
 8002d2c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	095a      	lsrs	r2, r3, #5
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3340      	adds	r3, #64	; 0x40
 8002d3a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	091a      	lsrs	r2, r3, #4
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3340      	adds	r3, #64	; 0x40
 8002d48:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3340      	adds	r3, #64	; 0x40
 8002d56:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	089a      	lsrs	r2, r3, #2
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3340      	adds	r3, #64	; 0x40
 8002d64:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	085a      	lsrs	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3340      	adds	r3, #64	; 0x40
 8002d72:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3340      	adds	r3, #64	; 0x40
 8002d7e:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	09da      	lsrs	r2, r3, #7
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3340      	adds	r3, #64	; 0x40
 8002d8c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	099a      	lsrs	r2, r3, #6
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3340      	adds	r3, #64	; 0x40
 8002d9a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	095a      	lsrs	r2, r3, #5
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3340      	adds	r3, #64	; 0x40
 8002da8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	091a      	lsrs	r2, r3, #4
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3340      	adds	r3, #64	; 0x40
 8002db6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	08da      	lsrs	r2, r3, #3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3340      	adds	r3, #64	; 0x40
 8002dc4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	089a      	lsrs	r2, r3, #2
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3340      	adds	r3, #64	; 0x40
 8002dd2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	085a      	lsrs	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3340      	adds	r3, #64	; 0x40
 8002de0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3340      	adds	r3, #64	; 0x40
 8002dec:	60fb      	str	r3, [r7, #12]

#endif
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc90      	pop	{r4, r7}
 8002df6:	4770      	bx	lr
 8002df8:	080087d0 	.word	0x080087d0
 8002dfc:	200004b0 	.word	0x200004b0

08002e00 <ws2812b_init>:


void ws2812b_init()
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8002e04:	f7ff faa8 	bl	8002358 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8002e08:	f7ff fbb8 	bl	800257c <DMA2_init>
	TIM1_init();
 8002e0c:	f7ff faf4 	bl	80023f8 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8002e10:	4b02      	ldr	r3, [pc, #8]	; (8002e1c <ws2812b_init+0x1c>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	741a      	strb	r2, [r3, #16]
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000032c 	.word	0x2000032c

08002e20 <ws2812b_handle>:


void ws2812b_handle()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <ws2812b_handle+0x1c>)
 8002e26:	7c5b      	ldrb	r3, [r3, #17]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <ws2812b_handle+0x16>
		ws2812b.startTransfer = 0;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <ws2812b_handle+0x1c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	745a      	strb	r2, [r3, #17]
		WS2812_sendbuf();
 8002e32:	f7ff fccf 	bl	80027d4 <WS2812_sendbuf>
	}

}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000032c 	.word	0x2000032c

08002e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002e44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e46:	e003      	b.n	8002e50 <LoopCopyDataInit>

08002e48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e4e:	3104      	adds	r1, #4

08002e50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e50:	480b      	ldr	r0, [pc, #44]	; (8002e80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e58:	d3f6      	bcc.n	8002e48 <CopyDataInit>
  ldr  r2, =_sbss
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e5c:	e002      	b.n	8002e64 <LoopFillZerobss>

08002e5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002e5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e60:	f842 3b04 	str.w	r3, [r2], #4

08002e64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e68:	d3f9      	bcc.n	8002e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e6a:	f7ff f907 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6e:	f003 fb1b 	bl	80064a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e72:	f7fe fbf3 	bl	800165c <main>
  bx  lr    
 8002e76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e78:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002e7c:	08008b48 	.word	0x08008b48
  ldr  r0, =_sdata
 8002e80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e84:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 8002e88:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 8002e8c:	20000578 	.word	0x20000578

08002e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC_IRQHandler>
	...

08002e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_Init+0x40>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_Init+0x40>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_Init+0x40>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f000 f94d 	bl	800315c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f000 f808 	bl	8002ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec8:	f7fe febe 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_InitTick+0x54>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_InitTick+0x58>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f965 	bl	80031c6 <HAL_SYSTICK_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00e      	b.n	8002f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	d80a      	bhi.n	8002f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f14:	f000 f92d 	bl	8003172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <HAL_InitTick+0x5c>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000034 	.word	0x20000034
 8002f30:	20000044 	.word	0x20000044
 8002f34:	20000040 	.word	0x20000040

08002f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_IncTick+0x20>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_IncTick+0x24>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <HAL_IncTick+0x24>)
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000044 	.word	0x20000044
 8002f5c:	20000570 	.word	0x20000570

08002f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return uwTick;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_GetTick+0x14>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000570 	.word	0x20000570

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff ffee 	bl	8002f60 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f90:	d005      	beq.n	8002f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_Delay+0x40>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f9e:	bf00      	nop
 8002fa0:	f7ff ffde 	bl	8002f60 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8f7      	bhi.n	8002fa0 <HAL_Delay+0x28>
  {
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000044 	.word	0x20000044

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <__NVIC_EnableIRQ+0x38>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003128:	d301      	bcc.n	800312e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312a:	2301      	movs	r3, #1
 800312c:	e00f      	b.n	800314e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <SysTick_Config+0x40>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003136:	210f      	movs	r1, #15
 8003138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800313c:	f7ff ff8e 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SysTick_Config+0x40>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SysTick_Config+0x40>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000e010 	.word	0xe000e010

0800315c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff29 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003184:	f7ff ff3e 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f7ff ff8e 	bl	80030b0 <NVIC_EncodePriority>
 8003194:	4602      	mov	r2, r0
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff5d 	bl	800305c <__NVIC_SetPriority>
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff31 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffa2 	bl	8003118 <SysTick_Config>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e014      	b.n	800321a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	791b      	ldrb	r3, [r3, #4]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fe fd49 	bl	8001c98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	795b      	ldrb	r3, [r3, #5]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_DAC_Start+0x1e>
 800323c:	2302      	movs	r3, #2
 800323e:	e050      	b.n	80032e2 <HAL_DAC_Start+0xc0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	409a      	lsls	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11a      	bne.n	800329c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d127      	bne.n	80032d4 <HAL_DAC_Start+0xb2>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b38      	cmp	r3, #56	; 0x38
 8003288:	d124      	bne.n	80032d4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e01b      	b.n	80032d4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80032b2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ba:	d10b      	bne.n	80032d4 <HAL_DAC_Start+0xb2>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80032c2:	d107      	bne.n	80032d4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0202 	orr.w	r2, r2, #2
 80032d2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b087      	sub	sp, #28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	795b      	ldrb	r3, [r3, #5]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_DAC_ConfigChannel+0x20>
 800330a:	2302      	movs	r3, #2
 800330c:	e036      	b.n	800337c <HAL_DAC_ConfigChannel+0x8e>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2202      	movs	r2, #2
 8003318:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003322:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	22c0      	movs	r2, #192	; 0xc0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43da      	mvns	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	400a      	ands	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003394:	f7ff fde4 	bl	8002f60 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e099      	b.n	80034d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c4:	e00f      	b.n	80033e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c6:	f7ff fdcb 	bl	8002f60 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d908      	bls.n	80033e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2203      	movs	r2, #3
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e078      	b.n	80034d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e8      	bne.n	80033c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_DMA_Init+0x158>)
 8003400:	4013      	ands	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	2b04      	cmp	r3, #4
 800343e:	d107      	bne.n	8003450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b04      	cmp	r3, #4
 8003478:	d117      	bne.n	80034aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb2b 	bl	8003ae8 <DMA_CheckFifoParam>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2240      	movs	r2, #64	; 0x40
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034a6:	2301      	movs	r3, #1
 80034a8:	e016      	b.n	80034d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fae2 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	223f      	movs	r2, #63	; 0x3f
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	e010803f 	.word	0xe010803f

080034e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e050      	b.n	8003598 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d101      	bne.n	8003506 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	e048      	b.n	8003598 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa98 	bl	8003a7c <DMA_CalcBaseAndBitshift>
 800354c:	4603      	mov	r3, r0
 800354e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	223f      	movs	r2, #63	; 0x3f
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Start+0x20>
 80035bc:	2302      	movs	r3, #2
 80035be:	e026      	b.n	800360e <HAL_DMA_Start+0x6e>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d115      	bne.n	8003600 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fa19 	bl	8003a20 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e005      	b.n	800360c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800360c:	7dfb      	ldrb	r3, [r7, #23]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_DMA_Start_IT+0x26>
 8003638:	2302      	movs	r3, #2
 800363a:	e040      	b.n	80036be <HAL_DMA_Start_IT+0xa8>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d12f      	bne.n	80036b0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f9db 	bl	8003a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	223f      	movs	r2, #63	; 0x3f
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0216 	orr.w	r2, r2, #22
 8003684:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0208 	orr.w	r2, r2, #8
 800369c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e005      	b.n	80036bc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e00c      	b.n	80036fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2205      	movs	r2, #5
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003718:	4b92      	ldr	r3, [pc, #584]	; (8003964 <HAL_DMA_IRQHandler+0x258>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a92      	ldr	r2, [pc, #584]	; (8003968 <HAL_DMA_IRQHandler+0x25c>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0a9b      	lsrs	r3, r3, #10
 8003724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	2208      	movs	r2, #8
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01a      	beq.n	8003778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0204 	bic.w	r2, r2, #4
 800375e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003764:	2208      	movs	r2, #8
 8003766:	409a      	lsls	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f043 0201 	orr.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	2201      	movs	r2, #1
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d012      	beq.n	80037ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	2201      	movs	r2, #1
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	2204      	movs	r2, #4
 80037b4:	409a      	lsls	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d012      	beq.n	80037e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	2204      	movs	r2, #4
 80037d2:	409a      	lsls	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2210      	movs	r2, #16
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d043      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03c      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2210      	movs	r2, #16
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d108      	bne.n	800383c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d024      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	e01f      	b.n	800387c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
 800384c:	e016      	b.n	800387c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0208 	bic.w	r2, r2, #8
 800386a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	2220      	movs	r2, #32
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 808e 	beq.w	80039aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8086 	beq.w	80039aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	2220      	movs	r2, #32
 80038a4:	409a      	lsls	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d136      	bne.n	8003924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0216 	bic.w	r2, r2, #22
 80038c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_DMA_IRQHandler+0x1da>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0208 	bic.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	223f      	movs	r2, #63	; 0x3f
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	2b00      	cmp	r3, #0
 8003918:	d07d      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
        }
        return;
 8003922:	e078      	b.n	8003a16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01c      	beq.n	800396c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	2b00      	cmp	r3, #0
 8003946:	d030      	beq.n	80039aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
 8003950:	e02b      	b.n	80039aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d027      	beq.n	80039aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
 8003962:	e022      	b.n	80039aa <HAL_DMA_IRQHandler+0x29e>
 8003964:	20000034 	.word	0x20000034
 8003968:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0210 	bic.w	r2, r2, #16
 8003988:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d032      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d022      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2205      	movs	r2, #5
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3301      	adds	r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d307      	bcc.n	80039f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f2      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x2ca>
 80039f0:	e000      	b.n	80039f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e000      	b.n	8003a18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a16:	bf00      	nop
    }
  }
}
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop

08003a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d108      	bne.n	8003a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a5e:	e007      	b.n	8003a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b10      	subs	r3, #16
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d909      	bls.n	8003abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	1d1a      	adds	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	659a      	str	r2, [r3, #88]	; 0x58
 8003abc:	e007      	b.n	8003ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	aaaaaaab 	.word	0xaaaaaaab
 8003ae4:	080088d0 	.word	0x080088d0

08003ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d855      	bhi.n	8003bb4 <DMA_CheckFifoParam+0xcc>
 8003b08:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <DMA_CheckFifoParam+0x28>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003bb5 	.word	0x08003bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d045      	beq.n	8003bb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e042      	b.n	8003bb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3a:	d13f      	bne.n	8003bbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e03c      	b.n	8003bbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	d121      	bne.n	8003b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d836      	bhi.n	8003bc0 <DMA_CheckFifoParam+0xd8>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <DMA_CheckFifoParam+0x70>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b6f 	.word	0x08003b6f
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003b81 	.word	0x08003b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e02f      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d024      	beq.n	8003bc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7e:	e021      	b.n	8003bc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b88:	d11e      	bne.n	8003bc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b8e:	e01b      	b.n	8003bc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <DMA_CheckFifoParam+0xb4>
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d003      	beq.n	8003ba2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b9a:	e018      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e015      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb2:	e00b      	b.n	8003bcc <DMA_CheckFifoParam+0xe4>
      break;
 8003bb4:	bf00      	nop
 8003bb6:	e00a      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e008      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e006      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bc0:	bf00      	nop
 8003bc2:	e004      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;   
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
      break;
 8003bcc:	bf00      	nop
    }
  } 
  
  return status; 
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e165      	b.n	8003ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	f040 8154 	bne.w	8003ebe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d00b      	beq.n	8003c36 <HAL_GPIO_Init+0x5a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d007      	beq.n	8003c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c2a:	2b11      	cmp	r3, #17
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b12      	cmp	r3, #18
 8003c34:	d130      	bne.n	8003c98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 0201 	and.w	r2, r3, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0xfc>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b12      	cmp	r3, #18
 8003cd6:	d123      	bne.n	8003d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	220f      	movs	r2, #15
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	08da      	lsrs	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3208      	adds	r2, #8
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0203 	and.w	r2, r3, #3
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80ae 	beq.w	8003ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <HAL_GPIO_Init+0x2fc>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <HAL_GPIO_Init+0x2fc>)
 8003d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d70:	6453      	str	r3, [r2, #68]	; 0x44
 8003d72:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <HAL_GPIO_Init+0x2fc>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7e:	4a57      	ldr	r2, [pc, #348]	; (8003edc <HAL_GPIO_Init+0x300>)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4e      	ldr	r2, [pc, #312]	; (8003ee0 <HAL_GPIO_Init+0x304>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d025      	beq.n	8003df6 <HAL_GPIO_Init+0x21a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4d      	ldr	r2, [pc, #308]	; (8003ee4 <HAL_GPIO_Init+0x308>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <HAL_GPIO_Init+0x216>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4c      	ldr	r2, [pc, #304]	; (8003ee8 <HAL_GPIO_Init+0x30c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d019      	beq.n	8003dee <HAL_GPIO_Init+0x212>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4b      	ldr	r2, [pc, #300]	; (8003eec <HAL_GPIO_Init+0x310>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_GPIO_Init+0x20e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4a      	ldr	r2, [pc, #296]	; (8003ef0 <HAL_GPIO_Init+0x314>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00d      	beq.n	8003de6 <HAL_GPIO_Init+0x20a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a49      	ldr	r2, [pc, #292]	; (8003ef4 <HAL_GPIO_Init+0x318>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <HAL_GPIO_Init+0x206>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_GPIO_Init+0x31c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_GPIO_Init+0x202>
 8003dda:	2306      	movs	r3, #6
 8003ddc:	e00c      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e00a      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003de2:	2305      	movs	r3, #5
 8003de4:	e008      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003de6:	2304      	movs	r3, #4
 8003de8:	e006      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003dea:	2303      	movs	r3, #3
 8003dec:	e004      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e002      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_GPIO_Init+0x21c>
 8003df6:	2300      	movs	r3, #0
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	f002 0203 	and.w	r2, r2, #3
 8003dfe:	0092      	lsls	r2, r2, #2
 8003e00:	4093      	lsls	r3, r2
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e08:	4934      	ldr	r1, [pc, #208]	; (8003edc <HAL_GPIO_Init+0x300>)
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	3302      	adds	r3, #2
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e3a:	4a30      	ldr	r2, [pc, #192]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e40:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e64:	4a25      	ldr	r2, [pc, #148]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e8e:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb8:	4a10      	ldr	r2, [pc, #64]	; (8003efc <HAL_GPIO_Init+0x320>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	f67f ae96 	bls.w	8003bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3724      	adds	r7, #36	; 0x24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	40020400 	.word	0x40020400
 8003ee8:	40020800 	.word	0x40020800
 8003eec:	40020c00 	.word	0x40020c00
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40021400 	.word	0x40021400
 8003ef8:	40021800 	.word	0x40021800
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e001      	b.n	8003f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f4c:	e003      	b.n	8003f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f806 	bl	8003f94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013c00 	.word	0x40013c00

08003f94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0cc      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d119      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e067      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fe ff60 	bl	8002f60 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fe ff5c 	bl	8002f60 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e04f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20c      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4601      	mov	r1, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	fa21 f303 	lsr.w	r3, r1, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fec0 	bl	8002ed8 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	080087b8 	.word	0x080087b8
 8004170:	20000034 	.word	0x20000034
 8004174:	20000040 	.word	0x20000040

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418e:	4b50      	ldr	r3, [pc, #320]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b04      	cmp	r3, #4
 8004198:	d007      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x32>
 800419a:	2b08      	cmp	r3, #8
 800419c:	d008      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x38>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 808d 	bne.w	80042be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80041a6:	60bb      	str	r3, [r7, #8]
       break;
 80041a8:	e08c      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ac:	60bb      	str	r3, [r7, #8]
      break;
 80041ae:	e089      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d023      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	f04f 0400 	mov.w	r4, #0
 80041d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	ea03 0501 	and.w	r5, r3, r1
 80041dc:	ea04 0602 	and.w	r6, r4, r2
 80041e0:	4a3d      	ldr	r2, [pc, #244]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041e2:	fb02 f106 	mul.w	r1, r2, r6
 80041e6:	2200      	movs	r2, #0
 80041e8:	fb02 f205 	mul.w	r2, r2, r5
 80041ec:	440a      	add	r2, r1
 80041ee:	493a      	ldr	r1, [pc, #232]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041f0:	fba5 0101 	umull	r0, r1, r5, r1
 80041f4:	1853      	adds	r3, r2, r1
 80041f6:	4619      	mov	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f04f 0400 	mov.w	r4, #0
 80041fe:	461a      	mov	r2, r3
 8004200:	4623      	mov	r3, r4
 8004202:	f7fc fcf9 	bl	8000bf8 <__aeabi_uldivmod>
 8004206:	4603      	mov	r3, r0
 8004208:	460c      	mov	r4, r1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e049      	b.n	80042a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	099b      	lsrs	r3, r3, #6
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	f240 11ff 	movw	r1, #511	; 0x1ff
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	ea03 0501 	and.w	r5, r3, r1
 8004224:	ea04 0602 	and.w	r6, r4, r2
 8004228:	4629      	mov	r1, r5
 800422a:	4632      	mov	r2, r6
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	f04f 0400 	mov.w	r4, #0
 8004234:	0154      	lsls	r4, r2, #5
 8004236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800423a:	014b      	lsls	r3, r1, #5
 800423c:	4619      	mov	r1, r3
 800423e:	4622      	mov	r2, r4
 8004240:	1b49      	subs	r1, r1, r5
 8004242:	eb62 0206 	sbc.w	r2, r2, r6
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	f04f 0400 	mov.w	r4, #0
 800424e:	0194      	lsls	r4, r2, #6
 8004250:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004254:	018b      	lsls	r3, r1, #6
 8004256:	1a5b      	subs	r3, r3, r1
 8004258:	eb64 0402 	sbc.w	r4, r4, r2
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	00e2      	lsls	r2, r4, #3
 8004266:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800426a:	00d9      	lsls	r1, r3, #3
 800426c:	460b      	mov	r3, r1
 800426e:	4614      	mov	r4, r2
 8004270:	195b      	adds	r3, r3, r5
 8004272:	eb44 0406 	adc.w	r4, r4, r6
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	02a2      	lsls	r2, r4, #10
 8004280:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004284:	0299      	lsls	r1, r3, #10
 8004286:	460b      	mov	r3, r1
 8004288:	4614      	mov	r4, r2
 800428a:	4618      	mov	r0, r3
 800428c:	4621      	mov	r1, r4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f04f 0400 	mov.w	r4, #0
 8004294:	461a      	mov	r2, r3
 8004296:	4623      	mov	r3, r4
 8004298:	f7fc fcae 	bl	8000bf8 <__aeabi_uldivmod>
 800429c:	4603      	mov	r3, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	3301      	adds	r3, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	60bb      	str	r3, [r7, #8]
      break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042c0:	60bb      	str	r3, [r7, #8]
      break;
 80042c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c4:	68bb      	ldr	r3, [r7, #8]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800
 80042d4:	00f42400 	.word	0x00f42400
 80042d8:	017d7840 	.word	0x017d7840

080042dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000034 	.word	0x20000034

080042f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f8:	f7ff fff0 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 80042fc:	4601      	mov	r1, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0a9b      	lsrs	r3, r3, #10
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4a03      	ldr	r2, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800430a:	5cd3      	ldrb	r3, [r2, r3]
 800430c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	080087c8 	.word	0x080087c8

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004320:	f7ff ffdc 	bl	80042dc <HAL_RCC_GetHCLKFreq>
 8004324:	4601      	mov	r1, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0b5b      	lsrs	r3, r3, #13
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	080087c8 	.word	0x080087c8

08004344 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d075      	beq.n	8004448 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800435c:	4ba2      	ldr	r3, [pc, #648]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b04      	cmp	r3, #4
 8004366:	d00c      	beq.n	8004382 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004368:	4b9f      	ldr	r3, [pc, #636]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004370:	2b08      	cmp	r3, #8
 8004372:	d112      	bne.n	800439a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004374:	4b9c      	ldr	r3, [pc, #624]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004380:	d10b      	bne.n	800439a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004382:	4b99      	ldr	r3, [pc, #612]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d05b      	beq.n	8004446 <HAL_RCC_OscConfig+0x102>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d157      	bne.n	8004446 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e20b      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x6e>
 80043a4:	4b90      	ldr	r3, [pc, #576]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a8f      	ldr	r2, [pc, #572]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e01d      	b.n	80043ee <HAL_RCC_OscConfig+0xaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCC_OscConfig+0x92>
 80043bc:	4b8a      	ldr	r3, [pc, #552]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a89      	ldr	r2, [pc, #548]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b87      	ldr	r3, [pc, #540]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a86      	ldr	r2, [pc, #536]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e00b      	b.n	80043ee <HAL_RCC_OscConfig+0xaa>
 80043d6:	4b84      	ldr	r3, [pc, #528]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a83      	ldr	r2, [pc, #524]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a80      	ldr	r2, [pc, #512]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80043e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d013      	beq.n	800441e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe fdb3 	bl	8002f60 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fe:	f7fe fdaf 	bl	8002f60 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	; 0x64
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1d0      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004410:	4b75      	ldr	r3, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0xba>
 800441c:	e014      	b.n	8004448 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fe fd9f 	bl	8002f60 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004426:	f7fe fd9b 	bl	8002f60 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b64      	cmp	r3, #100	; 0x64
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1bc      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004438:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0xe2>
 8004444:	e000      	b.n	8004448 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004446:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d063      	beq.n	800451c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004454:	4b64      	ldr	r3, [pc, #400]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00b      	beq.n	8004478 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004460:	4b61      	ldr	r3, [pc, #388]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004468:	2b08      	cmp	r3, #8
 800446a:	d11c      	bne.n	80044a6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446c:	4b5e      	ldr	r3, [pc, #376]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004478:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_OscConfig+0x14c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d001      	beq.n	8004490 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e190      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004490:	4b55      	ldr	r3, [pc, #340]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4952      	ldr	r1, [pc, #328]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a4:	e03a      	b.n	800451c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d020      	beq.n	80044f0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ae:	4b4f      	ldr	r3, [pc, #316]	; (80045ec <HAL_RCC_OscConfig+0x2a8>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fe fd54 	bl	8002f60 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fe fd50 	bl	8002f60 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e171      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ce:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	493f      	ldr	r1, [pc, #252]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
 80044ee:	e015      	b.n	800451c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f0:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <HAL_RCC_OscConfig+0x2a8>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fe fd33 	bl	8002f60 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044fe:	f7fe fd2f 	bl	8002f60 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e150      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004510:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d030      	beq.n	800458a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004530:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fe fd13 	bl	8002f60 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453e:	f7fe fd0f 	bl	8002f60 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e130      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x1fa>
 800455c:	e015      	b.n	800458a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe fcfc 	bl	8002f60 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fe fcf8 	bl	8002f60 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e119      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 809f 	beq.w	80046d6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004598:	2300      	movs	r3, #0
 800459a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10f      	bne.n	80045c8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	6413      	str	r3, [r2, #64]	; 0x40
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x2a4>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_OscConfig+0x2b0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d120      	bne.n	8004616 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_RCC_OscConfig+0x2b0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <HAL_RCC_OscConfig+0x2b0>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e0:	f7fe fcbe 	bl	8002f60 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	e010      	b.n	800460a <HAL_RCC_OscConfig+0x2c6>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
 80045f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fe fcb2 	bl	8002f60 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0d3      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <HAL_RCC_OscConfig+0x478>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d106      	bne.n	800462c <HAL_RCC_OscConfig+0x2e8>
 800461e:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e01c      	b.n	8004666 <HAL_RCC_OscConfig+0x322>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10c      	bne.n	800464e <HAL_RCC_OscConfig+0x30a>
 8004634:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a61      	ldr	r2, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a5e      	ldr	r2, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	e00b      	b.n	8004666 <HAL_RCC_OscConfig+0x322>
 800464e:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5b      	ldr	r2, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fe fc77 	bl	8002f60 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fe fc73 	bl	8002f60 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e092      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ee      	beq.n	8004676 <HAL_RCC_OscConfig+0x332>
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fe fc61 	bl	8002f60 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fe fc5d 	bl	8002f60 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e07c      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ee      	bne.n	80046a2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d105      	bne.n	80046d6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d068      	beq.n	80047b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046de:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d060      	beq.n	80047ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d145      	bne.n	800477e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <HAL_RCC_OscConfig+0x480>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fe fc32 	bl	8002f60 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fe fc2e 	bl	8002f60 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	491d      	ldr	r1, [pc, #116]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <HAL_RCC_OscConfig+0x480>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fe fc03 	bl	8002f60 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475e:	f7fe fbff 	bl	8002f60 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e020      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x41a>
 800477c:	e018      	b.n	80047b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_RCC_OscConfig+0x480>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe fbec 	bl	8002f60 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478c:	f7fe fbe8 	bl	8002f60 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e009      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_RCC_OscConfig+0x47c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x448>
 80047aa:	e001      	b.n	80047b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40007000 	.word	0x40007000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	42470060 	.word	0x42470060

080047c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e01d      	b.n	8004816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd fa96 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 fb4e 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d007      	beq.n	8004850 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e01d      	b.n	80048b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d106      	bne.n	8004892 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f815 	bl	80048bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 faff 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fdca 	bl	800547c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIM_PWM_Start+0x74>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIM_PWM_Start+0x2c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a14      	ldr	r2, [pc, #80]	; (8004948 <HAL_TIM_PWM_Start+0x78>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_TIM_PWM_Start+0x30>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_TIM_PWM_Start+0x32>
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b06      	cmp	r3, #6
 8004926:	d007      	beq.n	8004938 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400

0800494c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0202 	mvn.w	r2, #2
 8004978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa6b 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa5d 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa6e 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0204 	mvn.w	r2, #4
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa41 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa33 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa44 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d122      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d11b      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0208 	mvn.w	r2, #8
 8004a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa17 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 8004a3c:	e005      	b.n	8004a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa09 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa1a 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9ed 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f9df 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9f0 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0201 	mvn.w	r2, #1
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fe f882 	bl	8002bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fdbe 	bl	8005678 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9b5 	bl	8004e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0220 	mvn.w	r2, #32
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fd88 	bl	8005664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0b4      	b.n	8004ce0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	f200 809f 	bhi.w	8004ccc <HAL_TIM_PWM_ConfigChannel+0x170>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004ccd 	.word	0x08004ccd
 8004b9c:	08004ccd 	.word	0x08004ccd
 8004ba0:	08004ccd 	.word	0x08004ccd
 8004ba4:	08004c09 	.word	0x08004c09
 8004ba8:	08004ccd 	.word	0x08004ccd
 8004bac:	08004ccd 	.word	0x08004ccd
 8004bb0:	08004ccd 	.word	0x08004ccd
 8004bb4:	08004c4b 	.word	0x08004c4b
 8004bb8:	08004ccd 	.word	0x08004ccd
 8004bbc:	08004ccd 	.word	0x08004ccd
 8004bc0:	08004ccd 	.word	0x08004ccd
 8004bc4:	08004c8b 	.word	0x08004c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa0a 	bl	8004fe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0204 	bic.w	r2, r2, #4
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	619a      	str	r2, [r3, #24]
      break;
 8004c06:	e062      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fa5a 	bl	80050c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6999      	ldr	r1, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	619a      	str	r2, [r3, #24]
      break;
 8004c48:	e041      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 faaf 	bl	80051b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0208 	orr.w	r2, r2, #8
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0204 	bic.w	r2, r2, #4
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	61da      	str	r2, [r3, #28]
      break;
 8004c88:	e021      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fb03 	bl	800529c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	61da      	str	r2, [r3, #28]
      break;
 8004cca:	e000      	b.n	8004cce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ccc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_ConfigClockSource+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e0a6      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x166>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d067      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0x120>
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d80b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x6c>
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d073      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x140>
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d802      	bhi.n	8004d4a <HAL_TIM_ConfigClockSource+0x62>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d06f      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004d48:	e078      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d06c      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x140>
 8004d4e:	2b30      	cmp	r3, #48	; 0x30
 8004d50:	d06a      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004d52:	e073      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d00d      	beq.n	8004d74 <HAL_TIM_ConfigClockSource+0x8c>
 8004d58:	2b70      	cmp	r3, #112	; 0x70
 8004d5a:	d804      	bhi.n	8004d66 <HAL_TIM_ConfigClockSource+0x7e>
 8004d5c:	2b50      	cmp	r3, #80	; 0x50
 8004d5e:	d033      	beq.n	8004dc8 <HAL_TIM_ConfigClockSource+0xe0>
 8004d60:	2b60      	cmp	r3, #96	; 0x60
 8004d62:	d041      	beq.n	8004de8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004d64:	e06a      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d066      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x152>
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d70:	d017      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004d72:	e063      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6899      	ldr	r1, [r3, #8]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f000 fb5a 	bl	800543c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
      break;
 8004da0:	e04c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f000 fb43 	bl	800543c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc4:	609a      	str	r2, [r3, #8]
      break;
 8004dc6:	e039      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f000 fab7 	bl	8005348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2150      	movs	r1, #80	; 0x50
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fb10 	bl	8005406 <TIM_ITRx_SetConfig>
      break;
 8004de6:	e029      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	461a      	mov	r2, r3
 8004df6:	f000 fad6 	bl	80053a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2160      	movs	r1, #96	; 0x60
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fb00 	bl	8005406 <TIM_ITRx_SetConfig>
      break;
 8004e06:	e019      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	461a      	mov	r2, r3
 8004e16:	f000 fa97 	bl	8005348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 faf0 	bl	8005406 <TIM_ITRx_SetConfig>
      break;
 8004e26:	e009      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f000 fae7 	bl	8005406 <TIM_ITRx_SetConfig>
      break;
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a40      	ldr	r2, [pc, #256]	; (8004fbc <TIM_Base_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d00f      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3d      	ldr	r2, [pc, #244]	; (8004fc0 <TIM_Base_SetConfig+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3c      	ldr	r2, [pc, #240]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3b      	ldr	r2, [pc, #236]	; (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3a      	ldr	r2, [pc, #232]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <TIM_Base_SetConfig+0x114>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02b      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d027      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <TIM_Base_SetConfig+0x118>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d023      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2b      	ldr	r2, [pc, #172]	; (8004fc4 <TIM_Base_SetConfig+0x11c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01f      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <TIM_Base_SetConfig+0x120>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01b      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d017      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <TIM_Base_SetConfig+0x128>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <TIM_Base_SetConfig+0x12c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <TIM_Base_SetConfig+0x130>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a25      	ldr	r2, [pc, #148]	; (8004fdc <TIM_Base_SetConfig+0x134>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <TIM_Base_SetConfig+0x138>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a23      	ldr	r2, [pc, #140]	; (8004fe4 <TIM_Base_SetConfig+0x13c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d108      	bne.n	8004f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <TIM_Base_SetConfig+0x114>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0xf8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <TIM_Base_SetConfig+0x124>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d103      	bne.n	8004fa8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	615a      	str	r2, [r3, #20]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40010400 	.word	0x40010400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800
 8004fdc:	40001800 	.word	0x40001800
 8004fe0:	40001c00 	.word	0x40001c00
 8004fe4:	40002000 	.word	0x40002000

08004fe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f023 0201 	bic.w	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 0302 	bic.w	r3, r3, #2
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <TIM_OC1_SetConfig+0xd8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_OC1_SetConfig+0x64>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <TIM_OC1_SetConfig+0xdc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10c      	bne.n	8005066 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0308 	bic.w	r3, r3, #8
 8005052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 0304 	bic.w	r3, r3, #4
 8005064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <TIM_OC1_SetConfig+0xd8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_OC1_SetConfig+0x8e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a14      	ldr	r2, [pc, #80]	; (80050c4 <TIM_OC1_SetConfig+0xdc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d111      	bne.n	800509a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400

080050c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0210 	bic.w	r2, r3, #16
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0320 	bic.w	r3, r3, #32
 8005112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a22      	ldr	r2, [pc, #136]	; (80051ac <TIM_OC2_SetConfig+0xe4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC2_SetConfig+0x68>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <TIM_OC2_SetConfig+0xe8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10d      	bne.n	800514c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a17      	ldr	r2, [pc, #92]	; (80051ac <TIM_OC2_SetConfig+0xe4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_OC2_SetConfig+0x94>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a16      	ldr	r2, [pc, #88]	; (80051b0 <TIM_OC2_SetConfig+0xe8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d113      	bne.n	8005184 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800516a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40010400 	.word	0x40010400

080051b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a21      	ldr	r2, [pc, #132]	; (8005294 <TIM_OC3_SetConfig+0xe0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_OC3_SetConfig+0x66>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <TIM_OC3_SetConfig+0xe4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10d      	bne.n	8005236 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a16      	ldr	r2, [pc, #88]	; (8005294 <TIM_OC3_SetConfig+0xe0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_OC3_SetConfig+0x92>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a15      	ldr	r2, [pc, #84]	; (8005298 <TIM_OC3_SetConfig+0xe4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d113      	bne.n	800526e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800524c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	031b      	lsls	r3, r3, #12
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <TIM_OC4_SetConfig+0xa4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC4_SetConfig+0x68>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a11      	ldr	r2, [pc, #68]	; (8005344 <TIM_OC4_SetConfig+0xa8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40010400 	.word	0x40010400

08005348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 030a 	bic.w	r3, r3, #10
 8005384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f023 0210 	bic.w	r2, r3, #16
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	f043 0307 	orr.w	r3, r3, #7
 8005428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	021a      	lsls	r2, r3, #8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	431a      	orrs	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2201      	movs	r2, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1a      	ldr	r2, [r3, #32]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	fa01 f303 	lsl.w	r3, r1, r3
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054dc:	2302      	movs	r3, #2
 80054de:	e05a      	b.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d01d      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1b      	ldr	r2, [pc, #108]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d10c      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40010400 	.word	0x40010400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40001800 	.word	0x40001800

080055c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055d8:	2302      	movs	r3, #2
 80055da:	e03d      	b.n	8005658 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e03f      	b.n	800571e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc fb90 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fb4b 	bl	8005d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b088      	sub	sp, #32
 800572a:	af02      	add	r7, sp, #8
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	f040 8083 	bne.w	800584e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_UART_Transmit+0x2e>
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e07b      	b.n	8005850 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_UART_Transmit+0x40>
 8005762:	2302      	movs	r3, #2
 8005764:	e074      	b.n	8005850 <HAL_UART_Transmit+0x12a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2221      	movs	r2, #33	; 0x21
 8005778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800577c:	f7fd fbf0 	bl	8002f60 <HAL_GetTick>
 8005780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005796:	e042      	b.n	800581e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d122      	bne.n	80057f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f96a 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e042      	b.n	8005850 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3302      	adds	r3, #2
 80057ea:	60bb      	str	r3, [r7, #8]
 80057ec:	e017      	b.n	800581e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	3301      	adds	r3, #1
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	e013      	b.n	800581e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f947 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e01f      	b.n	8005850 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	60ba      	str	r2, [r7, #8]
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1b7      	bne.n	8005798 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	2140      	movs	r1, #64	; 0x40
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f92e 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e006      	b.n	8005850 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e000      	b.n	8005850 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800584e:	2302      	movs	r3, #2
  }
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10d      	bne.n	80058aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_UART_IRQHandler+0x52>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9e0 	bl	8005c68 <UART_Receive_IT>
      return;
 80058a8:	e0d1      	b.n	8005a4e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80b0 	beq.w	8005a12 <HAL_UART_IRQHandler+0x1ba>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_UART_IRQHandler+0x70>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80a5 	beq.w	8005a12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_UART_IRQHandler+0x90>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	f043 0201 	orr.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_UART_IRQHandler+0xb0>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	f043 0202 	orr.w	r2, r3, #2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_UART_IRQHandler+0xd0>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005920:	f043 0204 	orr.w	r2, r3, #4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <HAL_UART_IRQHandler+0xfa>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <HAL_UART_IRQHandler+0xee>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	f043 0208 	orr.w	r2, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d078      	beq.n	8005a4c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_UART_IRQHandler+0x11c>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f97a 	bl	8005c68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	bf0c      	ite	eq
 8005982:	2301      	moveq	r3, #1
 8005984:	2300      	movne	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <HAL_UART_IRQHandler+0x144>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d031      	beq.n	8005a00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8c3 	bl	8005b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d123      	bne.n	80059f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <HAL_UART_IRQHandler+0x1fc>)
 80059ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd fe76 	bl	80036c6 <HAL_DMA_Abort_IT>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d016      	beq.n	8005a0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059ea:	4610      	mov	r0, r2
 80059ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ee:	e00e      	b.n	8005a0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f845 	bl	8005a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f6:	e00a      	b.n	8005a0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f841 	bl	8005a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fe:	e006      	b.n	8005a0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f83d 	bl	8005a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a0c:	e01e      	b.n	8005a4c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0e:	bf00      	nop
    return;
 8005a10:	e01c      	b.n	8005a4c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1d6>
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f8b0 	bl	8005b8c <UART_Transmit_IT>
    return;
 8005a2c:	e00f      	b.n	8005a4e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1f6>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8f8 	bl	8005c38 <UART_EndTransmit_IT>
    return;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005a4c:	bf00      	nop
  }
}
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	08005b65 	.word	0x08005b65

08005a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	e02c      	b.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aac:	d028      	beq.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ab4:	f7fd fa54 	bl	8002f60 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d21d      	bcs.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ad2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e00f      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d0c3      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff ff7e 	bl	8005a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b21      	cmp	r3, #33	; 0x21
 8005b9e:	d144      	bne.n	8005c2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba8:	d11a      	bne.n	8005be0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bbe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]
 8005bd2:	e00e      	b.n	8005bf2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]
 8005bde:	e008      	b.n	8005bf2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6211      	str	r1, [r2, #32]
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
  }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fefd 	bl	8005a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	d171      	bne.n	8005d60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c84:	d123      	bne.n	8005cce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10e      	bne.n	8005cb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	1c9a      	adds	r2, r3, #2
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb0:	e029      	b.n	8005d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ccc:	e01b      	b.n	8005d06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6858      	ldr	r0, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	1c59      	adds	r1, r3, #1
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6291      	str	r1, [r2, #40]	; 0x28
 8005ce6:	b2c2      	uxtb	r2, r0
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e00c      	b.n	8005d06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	1c58      	adds	r0, r3, #1
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	6288      	str	r0, [r1, #40]	; 0x28
 8005cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4619      	mov	r1, r3
 8005d14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d120      	bne.n	8005d5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0220 	bic.w	r2, r2, #32
 8005d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fe8a 	bl	8005a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e002      	b.n	8005d62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005dae:	f023 030c 	bic.w	r3, r3, #12
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	430b      	orrs	r3, r1
 8005dba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dda:	f040 8199 	bne.w	8006110 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4ac6      	ldr	r2, [pc, #792]	; (80060fc <UART_SetConfig+0x390>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <UART_SetConfig+0x9c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4ac4      	ldr	r2, [pc, #784]	; (8006100 <UART_SetConfig+0x394>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00a      	beq.n	8005e08 <UART_SetConfig+0x9c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4ac3      	ldr	r2, [pc, #780]	; (8006104 <UART_SetConfig+0x398>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d005      	beq.n	8005e08 <UART_SetConfig+0x9c>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4ac1      	ldr	r2, [pc, #772]	; (8006108 <UART_SetConfig+0x39c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	f040 80bd 	bne.w	8005f82 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7fe fa88 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8005e0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	461d      	mov	r5, r3
 8005e12:	f04f 0600 	mov.w	r6, #0
 8005e16:	46a8      	mov	r8, r5
 8005e18:	46b1      	mov	r9, r6
 8005e1a:	eb18 0308 	adds.w	r3, r8, r8
 8005e1e:	eb49 0409 	adc.w	r4, r9, r9
 8005e22:	4698      	mov	r8, r3
 8005e24:	46a1      	mov	r9, r4
 8005e26:	eb18 0805 	adds.w	r8, r8, r5
 8005e2a:	eb49 0906 	adc.w	r9, r9, r6
 8005e2e:	f04f 0100 	mov.w	r1, #0
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e42:	4688      	mov	r8, r1
 8005e44:	4691      	mov	r9, r2
 8005e46:	eb18 0005 	adds.w	r0, r8, r5
 8005e4a:	eb49 0106 	adc.w	r1, r9, r6
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	461d      	mov	r5, r3
 8005e54:	f04f 0600 	mov.w	r6, #0
 8005e58:	196b      	adds	r3, r5, r5
 8005e5a:	eb46 0406 	adc.w	r4, r6, r6
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4623      	mov	r3, r4
 8005e62:	f7fa fec9 	bl	8000bf8 <__aeabi_uldivmod>
 8005e66:	4603      	mov	r3, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4ba7      	ldr	r3, [pc, #668]	; (800610c <UART_SetConfig+0x3a0>)
 8005e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	461d      	mov	r5, r3
 8005e7c:	f04f 0600 	mov.w	r6, #0
 8005e80:	46a9      	mov	r9, r5
 8005e82:	46b2      	mov	sl, r6
 8005e84:	eb19 0309 	adds.w	r3, r9, r9
 8005e88:	eb4a 040a 	adc.w	r4, sl, sl
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	46a2      	mov	sl, r4
 8005e90:	eb19 0905 	adds.w	r9, r9, r5
 8005e94:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e98:	f04f 0100 	mov.w	r1, #0
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ea8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eac:	4689      	mov	r9, r1
 8005eae:	4692      	mov	sl, r2
 8005eb0:	eb19 0005 	adds.w	r0, r9, r5
 8005eb4:	eb4a 0106 	adc.w	r1, sl, r6
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	461d      	mov	r5, r3
 8005ebe:	f04f 0600 	mov.w	r6, #0
 8005ec2:	196b      	adds	r3, r5, r5
 8005ec4:	eb46 0406 	adc.w	r4, r6, r6
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4623      	mov	r3, r4
 8005ecc:	f7fa fe94 	bl	8000bf8 <__aeabi_uldivmod>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4b8d      	ldr	r3, [pc, #564]	; (800610c <UART_SetConfig+0x3a0>)
 8005ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	2164      	movs	r1, #100	; 0x64
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	3332      	adds	r3, #50	; 0x32
 8005eea:	4a88      	ldr	r2, [pc, #544]	; (800610c <UART_SetConfig+0x3a0>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ef8:	4498      	add	r8, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	461d      	mov	r5, r3
 8005efe:	f04f 0600 	mov.w	r6, #0
 8005f02:	46a9      	mov	r9, r5
 8005f04:	46b2      	mov	sl, r6
 8005f06:	eb19 0309 	adds.w	r3, r9, r9
 8005f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0e:	4699      	mov	r9, r3
 8005f10:	46a2      	mov	sl, r4
 8005f12:	eb19 0905 	adds.w	r9, r9, r5
 8005f16:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4692      	mov	sl, r2
 8005f32:	eb19 0005 	adds.w	r0, r9, r5
 8005f36:	eb4a 0106 	adc.w	r1, sl, r6
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	461d      	mov	r5, r3
 8005f40:	f04f 0600 	mov.w	r6, #0
 8005f44:	196b      	adds	r3, r5, r5
 8005f46:	eb46 0406 	adc.w	r4, r6, r6
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	f7fa fe53 	bl	8000bf8 <__aeabi_uldivmod>
 8005f52:	4603      	mov	r3, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	461a      	mov	r2, r3
 8005f58:	4b6c      	ldr	r3, [pc, #432]	; (800610c <UART_SetConfig+0x3a0>)
 8005f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2164      	movs	r1, #100	; 0x64
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	3332      	adds	r3, #50	; 0x32
 8005f6c:	4a67      	ldr	r2, [pc, #412]	; (800610c <UART_SetConfig+0x3a0>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	f003 0207 	and.w	r2, r3, #7
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4442      	add	r2, r8
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	e27d      	b.n	800647e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f82:	f7fe f9b7 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 8005f86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	f04f 0600 	mov.w	r6, #0
 8005f90:	46a8      	mov	r8, r5
 8005f92:	46b1      	mov	r9, r6
 8005f94:	eb18 0308 	adds.w	r3, r8, r8
 8005f98:	eb49 0409 	adc.w	r4, r9, r9
 8005f9c:	4698      	mov	r8, r3
 8005f9e:	46a1      	mov	r9, r4
 8005fa0:	eb18 0805 	adds.w	r8, r8, r5
 8005fa4:	eb49 0906 	adc.w	r9, r9, r6
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fbc:	4688      	mov	r8, r1
 8005fbe:	4691      	mov	r9, r2
 8005fc0:	eb18 0005 	adds.w	r0, r8, r5
 8005fc4:	eb49 0106 	adc.w	r1, r9, r6
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	461d      	mov	r5, r3
 8005fce:	f04f 0600 	mov.w	r6, #0
 8005fd2:	196b      	adds	r3, r5, r5
 8005fd4:	eb46 0406 	adc.w	r4, r6, r6
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	f7fa fe0c 	bl	8000bf8 <__aeabi_uldivmod>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b49      	ldr	r3, [pc, #292]	; (800610c <UART_SetConfig+0x3a0>)
 8005fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	461d      	mov	r5, r3
 8005ff6:	f04f 0600 	mov.w	r6, #0
 8005ffa:	46a9      	mov	r9, r5
 8005ffc:	46b2      	mov	sl, r6
 8005ffe:	eb19 0309 	adds.w	r3, r9, r9
 8006002:	eb4a 040a 	adc.w	r4, sl, sl
 8006006:	4699      	mov	r9, r3
 8006008:	46a2      	mov	sl, r4
 800600a:	eb19 0905 	adds.w	r9, r9, r5
 800600e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800601e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006022:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006026:	4689      	mov	r9, r1
 8006028:	4692      	mov	sl, r2
 800602a:	eb19 0005 	adds.w	r0, r9, r5
 800602e:	eb4a 0106 	adc.w	r1, sl, r6
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	461d      	mov	r5, r3
 8006038:	f04f 0600 	mov.w	r6, #0
 800603c:	196b      	adds	r3, r5, r5
 800603e:	eb46 0406 	adc.w	r4, r6, r6
 8006042:	461a      	mov	r2, r3
 8006044:	4623      	mov	r3, r4
 8006046:	f7fa fdd7 	bl	8000bf8 <__aeabi_uldivmod>
 800604a:	4603      	mov	r3, r0
 800604c:	460c      	mov	r4, r1
 800604e:	461a      	mov	r2, r3
 8006050:	4b2e      	ldr	r3, [pc, #184]	; (800610c <UART_SetConfig+0x3a0>)
 8006052:	fba3 1302 	umull	r1, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	2164      	movs	r1, #100	; 0x64
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	3332      	adds	r3, #50	; 0x32
 8006064:	4a29      	ldr	r2, [pc, #164]	; (800610c <UART_SetConfig+0x3a0>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006072:	4498      	add	r8, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	461d      	mov	r5, r3
 8006078:	f04f 0600 	mov.w	r6, #0
 800607c:	46a9      	mov	r9, r5
 800607e:	46b2      	mov	sl, r6
 8006080:	eb19 0309 	adds.w	r3, r9, r9
 8006084:	eb4a 040a 	adc.w	r4, sl, sl
 8006088:	4699      	mov	r9, r3
 800608a:	46a2      	mov	sl, r4
 800608c:	eb19 0905 	adds.w	r9, r9, r5
 8006090:	eb4a 0a06 	adc.w	sl, sl, r6
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a8:	4689      	mov	r9, r1
 80060aa:	4692      	mov	sl, r2
 80060ac:	eb19 0005 	adds.w	r0, r9, r5
 80060b0:	eb4a 0106 	adc.w	r1, sl, r6
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	461d      	mov	r5, r3
 80060ba:	f04f 0600 	mov.w	r6, #0
 80060be:	196b      	adds	r3, r5, r5
 80060c0:	eb46 0406 	adc.w	r4, r6, r6
 80060c4:	461a      	mov	r2, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	f7fa fd96 	bl	8000bf8 <__aeabi_uldivmod>
 80060cc:	4603      	mov	r3, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	461a      	mov	r2, r3
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <UART_SetConfig+0x3a0>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	2164      	movs	r1, #100	; 0x64
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	3332      	adds	r3, #50	; 0x32
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <UART_SetConfig+0x3a0>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	f003 0207 	and.w	r2, r3, #7
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4442      	add	r2, r8
 80060f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060fa:	e1c0      	b.n	800647e <UART_SetConfig+0x712>
 80060fc:	40011000 	.word	0x40011000
 8006100:	40011400 	.word	0x40011400
 8006104:	40011800 	.word	0x40011800
 8006108:	40011c00 	.word	0x40011c00
 800610c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4adc      	ldr	r2, [pc, #880]	; (8006488 <UART_SetConfig+0x71c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00f      	beq.n	800613a <UART_SetConfig+0x3ce>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4adb      	ldr	r2, [pc, #876]	; (800648c <UART_SetConfig+0x720>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00a      	beq.n	800613a <UART_SetConfig+0x3ce>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4ad9      	ldr	r2, [pc, #868]	; (8006490 <UART_SetConfig+0x724>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d005      	beq.n	800613a <UART_SetConfig+0x3ce>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4ad8      	ldr	r2, [pc, #864]	; (8006494 <UART_SetConfig+0x728>)
 8006134:	4293      	cmp	r3, r2
 8006136:	f040 80d1 	bne.w	80062dc <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800613a:	f7fe f8ef 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 800613e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	469a      	mov	sl, r3
 8006144:	f04f 0b00 	mov.w	fp, #0
 8006148:	46d0      	mov	r8, sl
 800614a:	46d9      	mov	r9, fp
 800614c:	eb18 0308 	adds.w	r3, r8, r8
 8006150:	eb49 0409 	adc.w	r4, r9, r9
 8006154:	4698      	mov	r8, r3
 8006156:	46a1      	mov	r9, r4
 8006158:	eb18 080a 	adds.w	r8, r8, sl
 800615c:	eb49 090b 	adc.w	r9, r9, fp
 8006160:	f04f 0100 	mov.w	r1, #0
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800616c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006170:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006174:	4688      	mov	r8, r1
 8006176:	4691      	mov	r9, r2
 8006178:	eb1a 0508 	adds.w	r5, sl, r8
 800617c:	eb4b 0609 	adc.w	r6, fp, r9
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4619      	mov	r1, r3
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	f04f 0400 	mov.w	r4, #0
 8006192:	0094      	lsls	r4, r2, #2
 8006194:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006198:	008b      	lsls	r3, r1, #2
 800619a:	461a      	mov	r2, r3
 800619c:	4623      	mov	r3, r4
 800619e:	4628      	mov	r0, r5
 80061a0:	4631      	mov	r1, r6
 80061a2:	f7fa fd29 	bl	8000bf8 <__aeabi_uldivmod>
 80061a6:	4603      	mov	r3, r0
 80061a8:	460c      	mov	r4, r1
 80061aa:	461a      	mov	r2, r3
 80061ac:	4bba      	ldr	r3, [pc, #744]	; (8006498 <UART_SetConfig+0x72c>)
 80061ae:	fba3 2302 	umull	r2, r3, r3, r2
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	469b      	mov	fp, r3
 80061bc:	f04f 0c00 	mov.w	ip, #0
 80061c0:	46d9      	mov	r9, fp
 80061c2:	46e2      	mov	sl, ip
 80061c4:	eb19 0309 	adds.w	r3, r9, r9
 80061c8:	eb4a 040a 	adc.w	r4, sl, sl
 80061cc:	4699      	mov	r9, r3
 80061ce:	46a2      	mov	sl, r4
 80061d0:	eb19 090b 	adds.w	r9, r9, fp
 80061d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061d8:	f04f 0100 	mov.w	r1, #0
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ec:	4689      	mov	r9, r1
 80061ee:	4692      	mov	sl, r2
 80061f0:	eb1b 0509 	adds.w	r5, fp, r9
 80061f4:	eb4c 060a 	adc.w	r6, ip, sl
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	f04f 0400 	mov.w	r4, #0
 800620a:	0094      	lsls	r4, r2, #2
 800620c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006210:	008b      	lsls	r3, r1, #2
 8006212:	461a      	mov	r2, r3
 8006214:	4623      	mov	r3, r4
 8006216:	4628      	mov	r0, r5
 8006218:	4631      	mov	r1, r6
 800621a:	f7fa fced 	bl	8000bf8 <__aeabi_uldivmod>
 800621e:	4603      	mov	r3, r0
 8006220:	460c      	mov	r4, r1
 8006222:	461a      	mov	r2, r3
 8006224:	4b9c      	ldr	r3, [pc, #624]	; (8006498 <UART_SetConfig+0x72c>)
 8006226:	fba3 1302 	umull	r1, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2164      	movs	r1, #100	; 0x64
 800622e:	fb01 f303 	mul.w	r3, r1, r3
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	3332      	adds	r3, #50	; 0x32
 8006238:	4a97      	ldr	r2, [pc, #604]	; (8006498 <UART_SetConfig+0x72c>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006244:	4498      	add	r8, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	469b      	mov	fp, r3
 800624a:	f04f 0c00 	mov.w	ip, #0
 800624e:	46d9      	mov	r9, fp
 8006250:	46e2      	mov	sl, ip
 8006252:	eb19 0309 	adds.w	r3, r9, r9
 8006256:	eb4a 040a 	adc.w	r4, sl, sl
 800625a:	4699      	mov	r9, r3
 800625c:	46a2      	mov	sl, r4
 800625e:	eb19 090b 	adds.w	r9, r9, fp
 8006262:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800627a:	4689      	mov	r9, r1
 800627c:	4692      	mov	sl, r2
 800627e:	eb1b 0509 	adds.w	r5, fp, r9
 8006282:	eb4c 060a 	adc.w	r6, ip, sl
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4619      	mov	r1, r3
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	f04f 0400 	mov.w	r4, #0
 8006298:	0094      	lsls	r4, r2, #2
 800629a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629e:	008b      	lsls	r3, r1, #2
 80062a0:	461a      	mov	r2, r3
 80062a2:	4623      	mov	r3, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	4631      	mov	r1, r6
 80062a8:	f7fa fca6 	bl	8000bf8 <__aeabi_uldivmod>
 80062ac:	4603      	mov	r3, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b79      	ldr	r3, [pc, #484]	; (8006498 <UART_SetConfig+0x72c>)
 80062b4:	fba3 1302 	umull	r1, r3, r3, r2
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	2164      	movs	r1, #100	; 0x64
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	3332      	adds	r3, #50	; 0x32
 80062c6:	4a74      	ldr	r2, [pc, #464]	; (8006498 <UART_SetConfig+0x72c>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	f003 020f 	and.w	r2, r3, #15
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4442      	add	r2, r8
 80062d8:	609a      	str	r2, [r3, #8]
 80062da:	e0d0      	b.n	800647e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062dc:	f7fe f80a 	bl	80042f4 <HAL_RCC_GetPCLK1Freq>
 80062e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	469a      	mov	sl, r3
 80062e6:	f04f 0b00 	mov.w	fp, #0
 80062ea:	46d0      	mov	r8, sl
 80062ec:	46d9      	mov	r9, fp
 80062ee:	eb18 0308 	adds.w	r3, r8, r8
 80062f2:	eb49 0409 	adc.w	r4, r9, r9
 80062f6:	4698      	mov	r8, r3
 80062f8:	46a1      	mov	r9, r4
 80062fa:	eb18 080a 	adds.w	r8, r8, sl
 80062fe:	eb49 090b 	adc.w	r9, r9, fp
 8006302:	f04f 0100 	mov.w	r1, #0
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800630e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006312:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006316:	4688      	mov	r8, r1
 8006318:	4691      	mov	r9, r2
 800631a:	eb1a 0508 	adds.w	r5, sl, r8
 800631e:	eb4b 0609 	adc.w	r6, fp, r9
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	4619      	mov	r1, r3
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	f04f 0400 	mov.w	r4, #0
 8006334:	0094      	lsls	r4, r2, #2
 8006336:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800633a:	008b      	lsls	r3, r1, #2
 800633c:	461a      	mov	r2, r3
 800633e:	4623      	mov	r3, r4
 8006340:	4628      	mov	r0, r5
 8006342:	4631      	mov	r1, r6
 8006344:	f7fa fc58 	bl	8000bf8 <__aeabi_uldivmod>
 8006348:	4603      	mov	r3, r0
 800634a:	460c      	mov	r4, r1
 800634c:	461a      	mov	r2, r3
 800634e:	4b52      	ldr	r3, [pc, #328]	; (8006498 <UART_SetConfig+0x72c>)
 8006350:	fba3 2302 	umull	r2, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	469b      	mov	fp, r3
 800635e:	f04f 0c00 	mov.w	ip, #0
 8006362:	46d9      	mov	r9, fp
 8006364:	46e2      	mov	sl, ip
 8006366:	eb19 0309 	adds.w	r3, r9, r9
 800636a:	eb4a 040a 	adc.w	r4, sl, sl
 800636e:	4699      	mov	r9, r3
 8006370:	46a2      	mov	sl, r4
 8006372:	eb19 090b 	adds.w	r9, r9, fp
 8006376:	eb4a 0a0c 	adc.w	sl, sl, ip
 800637a:	f04f 0100 	mov.w	r1, #0
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006386:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800638a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800638e:	4689      	mov	r9, r1
 8006390:	4692      	mov	sl, r2
 8006392:	eb1b 0509 	adds.w	r5, fp, r9
 8006396:	eb4c 060a 	adc.w	r6, ip, sl
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4619      	mov	r1, r3
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	f04f 0400 	mov.w	r4, #0
 80063ac:	0094      	lsls	r4, r2, #2
 80063ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063b2:	008b      	lsls	r3, r1, #2
 80063b4:	461a      	mov	r2, r3
 80063b6:	4623      	mov	r3, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	4631      	mov	r1, r6
 80063bc:	f7fa fc1c 	bl	8000bf8 <__aeabi_uldivmod>
 80063c0:	4603      	mov	r3, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b34      	ldr	r3, [pc, #208]	; (8006498 <UART_SetConfig+0x72c>)
 80063c8:	fba3 1302 	umull	r1, r3, r3, r2
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	2164      	movs	r1, #100	; 0x64
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	3332      	adds	r3, #50	; 0x32
 80063da:	4a2f      	ldr	r2, [pc, #188]	; (8006498 <UART_SetConfig+0x72c>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e6:	4498      	add	r8, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	469b      	mov	fp, r3
 80063ec:	f04f 0c00 	mov.w	ip, #0
 80063f0:	46d9      	mov	r9, fp
 80063f2:	46e2      	mov	sl, ip
 80063f4:	eb19 0309 	adds.w	r3, r9, r9
 80063f8:	eb4a 040a 	adc.w	r4, sl, sl
 80063fc:	4699      	mov	r9, r3
 80063fe:	46a2      	mov	sl, r4
 8006400:	eb19 090b 	adds.w	r9, r9, fp
 8006404:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006408:	f04f 0100 	mov.w	r1, #0
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800641c:	4689      	mov	r9, r1
 800641e:	4692      	mov	sl, r2
 8006420:	eb1b 0509 	adds.w	r5, fp, r9
 8006424:	eb4c 060a 	adc.w	r6, ip, sl
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	4619      	mov	r1, r3
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	f04f 0400 	mov.w	r4, #0
 800643a:	0094      	lsls	r4, r2, #2
 800643c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006440:	008b      	lsls	r3, r1, #2
 8006442:	461a      	mov	r2, r3
 8006444:	4623      	mov	r3, r4
 8006446:	4628      	mov	r0, r5
 8006448:	4631      	mov	r1, r6
 800644a:	f7fa fbd5 	bl	8000bf8 <__aeabi_uldivmod>
 800644e:	4603      	mov	r3, r0
 8006450:	460c      	mov	r4, r1
 8006452:	461a      	mov	r2, r3
 8006454:	4b10      	ldr	r3, [pc, #64]	; (8006498 <UART_SetConfig+0x72c>)
 8006456:	fba3 1302 	umull	r1, r3, r3, r2
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2164      	movs	r1, #100	; 0x64
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	3332      	adds	r3, #50	; 0x32
 8006468:	4a0b      	ldr	r2, [pc, #44]	; (8006498 <UART_SetConfig+0x72c>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f003 020f 	and.w	r2, r3, #15
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4442      	add	r2, r8
 800647a:	609a      	str	r2, [r3, #8]
}
 800647c:	e7ff      	b.n	800647e <UART_SetConfig+0x712>
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006488:	40011000 	.word	0x40011000
 800648c:	40011400 	.word	0x40011400
 8006490:	40011800 	.word	0x40011800
 8006494:	40011c00 	.word	0x40011c00
 8006498:	51eb851f 	.word	0x51eb851f

0800649c <__errno>:
 800649c:	4b01      	ldr	r3, [pc, #4]	; (80064a4 <__errno+0x8>)
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000048 	.word	0x20000048

080064a8 <__libc_init_array>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4e0d      	ldr	r6, [pc, #52]	; (80064e0 <__libc_init_array+0x38>)
 80064ac:	4c0d      	ldr	r4, [pc, #52]	; (80064e4 <__libc_init_array+0x3c>)
 80064ae:	1ba4      	subs	r4, r4, r6
 80064b0:	10a4      	asrs	r4, r4, #2
 80064b2:	2500      	movs	r5, #0
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d109      	bne.n	80064cc <__libc_init_array+0x24>
 80064b8:	4e0b      	ldr	r6, [pc, #44]	; (80064e8 <__libc_init_array+0x40>)
 80064ba:	4c0c      	ldr	r4, [pc, #48]	; (80064ec <__libc_init_array+0x44>)
 80064bc:	f002 f85c 	bl	8008578 <_init>
 80064c0:	1ba4      	subs	r4, r4, r6
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	2500      	movs	r5, #0
 80064c6:	42a5      	cmp	r5, r4
 80064c8:	d105      	bne.n	80064d6 <__libc_init_array+0x2e>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064d0:	4798      	blx	r3
 80064d2:	3501      	adds	r5, #1
 80064d4:	e7ee      	b.n	80064b4 <__libc_init_array+0xc>
 80064d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064da:	4798      	blx	r3
 80064dc:	3501      	adds	r5, #1
 80064de:	e7f2      	b.n	80064c6 <__libc_init_array+0x1e>
 80064e0:	08008b40 	.word	0x08008b40
 80064e4:	08008b40 	.word	0x08008b40
 80064e8:	08008b40 	.word	0x08008b40
 80064ec:	08008b44 	.word	0x08008b44

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <__cvt>:
 8006500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	ec55 4b10 	vmov	r4, r5, d0
 8006508:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800650a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800650e:	2d00      	cmp	r5, #0
 8006510:	460e      	mov	r6, r1
 8006512:	4691      	mov	r9, r2
 8006514:	4619      	mov	r1, r3
 8006516:	bfb8      	it	lt
 8006518:	4622      	movlt	r2, r4
 800651a:	462b      	mov	r3, r5
 800651c:	f027 0720 	bic.w	r7, r7, #32
 8006520:	bfbb      	ittet	lt
 8006522:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006526:	461d      	movlt	r5, r3
 8006528:	2300      	movge	r3, #0
 800652a:	232d      	movlt	r3, #45	; 0x2d
 800652c:	bfb8      	it	lt
 800652e:	4614      	movlt	r4, r2
 8006530:	2f46      	cmp	r7, #70	; 0x46
 8006532:	700b      	strb	r3, [r1, #0]
 8006534:	d004      	beq.n	8006540 <__cvt+0x40>
 8006536:	2f45      	cmp	r7, #69	; 0x45
 8006538:	d100      	bne.n	800653c <__cvt+0x3c>
 800653a:	3601      	adds	r6, #1
 800653c:	2102      	movs	r1, #2
 800653e:	e000      	b.n	8006542 <__cvt+0x42>
 8006540:	2103      	movs	r1, #3
 8006542:	ab03      	add	r3, sp, #12
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	ab02      	add	r3, sp, #8
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4632      	mov	r2, r6
 800654c:	4653      	mov	r3, sl
 800654e:	ec45 4b10 	vmov	d0, r4, r5
 8006552:	f000 fcdd 	bl	8006f10 <_dtoa_r>
 8006556:	2f47      	cmp	r7, #71	; 0x47
 8006558:	4680      	mov	r8, r0
 800655a:	d102      	bne.n	8006562 <__cvt+0x62>
 800655c:	f019 0f01 	tst.w	r9, #1
 8006560:	d026      	beq.n	80065b0 <__cvt+0xb0>
 8006562:	2f46      	cmp	r7, #70	; 0x46
 8006564:	eb08 0906 	add.w	r9, r8, r6
 8006568:	d111      	bne.n	800658e <__cvt+0x8e>
 800656a:	f898 3000 	ldrb.w	r3, [r8]
 800656e:	2b30      	cmp	r3, #48	; 0x30
 8006570:	d10a      	bne.n	8006588 <__cvt+0x88>
 8006572:	2200      	movs	r2, #0
 8006574:	2300      	movs	r3, #0
 8006576:	4620      	mov	r0, r4
 8006578:	4629      	mov	r1, r5
 800657a:	f7fa facd 	bl	8000b18 <__aeabi_dcmpeq>
 800657e:	b918      	cbnz	r0, 8006588 <__cvt+0x88>
 8006580:	f1c6 0601 	rsb	r6, r6, #1
 8006584:	f8ca 6000 	str.w	r6, [sl]
 8006588:	f8da 3000 	ldr.w	r3, [sl]
 800658c:	4499      	add	r9, r3
 800658e:	2200      	movs	r2, #0
 8006590:	2300      	movs	r3, #0
 8006592:	4620      	mov	r0, r4
 8006594:	4629      	mov	r1, r5
 8006596:	f7fa fabf 	bl	8000b18 <__aeabi_dcmpeq>
 800659a:	b938      	cbnz	r0, 80065ac <__cvt+0xac>
 800659c:	2230      	movs	r2, #48	; 0x30
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	454b      	cmp	r3, r9
 80065a2:	d205      	bcs.n	80065b0 <__cvt+0xb0>
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	9103      	str	r1, [sp, #12]
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e7f8      	b.n	800659e <__cvt+0x9e>
 80065ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065b4:	eba3 0308 	sub.w	r3, r3, r8
 80065b8:	4640      	mov	r0, r8
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	b004      	add	sp, #16
 80065be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065c2 <__exponent>:
 80065c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c4:	2900      	cmp	r1, #0
 80065c6:	4604      	mov	r4, r0
 80065c8:	bfba      	itte	lt
 80065ca:	4249      	neglt	r1, r1
 80065cc:	232d      	movlt	r3, #45	; 0x2d
 80065ce:	232b      	movge	r3, #43	; 0x2b
 80065d0:	2909      	cmp	r1, #9
 80065d2:	f804 2b02 	strb.w	r2, [r4], #2
 80065d6:	7043      	strb	r3, [r0, #1]
 80065d8:	dd20      	ble.n	800661c <__exponent+0x5a>
 80065da:	f10d 0307 	add.w	r3, sp, #7
 80065de:	461f      	mov	r7, r3
 80065e0:	260a      	movs	r6, #10
 80065e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80065e6:	fb06 1115 	mls	r1, r6, r5, r1
 80065ea:	3130      	adds	r1, #48	; 0x30
 80065ec:	2d09      	cmp	r5, #9
 80065ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065f2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80065f6:	4629      	mov	r1, r5
 80065f8:	dc09      	bgt.n	800660e <__exponent+0x4c>
 80065fa:	3130      	adds	r1, #48	; 0x30
 80065fc:	3b02      	subs	r3, #2
 80065fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006602:	42bb      	cmp	r3, r7
 8006604:	4622      	mov	r2, r4
 8006606:	d304      	bcc.n	8006612 <__exponent+0x50>
 8006608:	1a10      	subs	r0, r2, r0
 800660a:	b003      	add	sp, #12
 800660c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660e:	4613      	mov	r3, r2
 8006610:	e7e7      	b.n	80065e2 <__exponent+0x20>
 8006612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006616:	f804 2b01 	strb.w	r2, [r4], #1
 800661a:	e7f2      	b.n	8006602 <__exponent+0x40>
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	4419      	add	r1, r3
 8006620:	7083      	strb	r3, [r0, #2]
 8006622:	1d02      	adds	r2, r0, #4
 8006624:	70c1      	strb	r1, [r0, #3]
 8006626:	e7ef      	b.n	8006608 <__exponent+0x46>

08006628 <_printf_float>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	b08d      	sub	sp, #52	; 0x34
 800662e:	460c      	mov	r4, r1
 8006630:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006634:	4616      	mov	r6, r2
 8006636:	461f      	mov	r7, r3
 8006638:	4605      	mov	r5, r0
 800663a:	f001 fa21 	bl	8007a80 <_localeconv_r>
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	4618      	mov	r0, r3
 8006644:	f7f9 fdec 	bl	8000220 <strlen>
 8006648:	2300      	movs	r3, #0
 800664a:	930a      	str	r3, [sp, #40]	; 0x28
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	9005      	str	r0, [sp, #20]
 8006652:	3307      	adds	r3, #7
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	f103 0208 	add.w	r2, r3, #8
 800665c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006660:	f8d4 b000 	ldr.w	fp, [r4]
 8006664:	f8c8 2000 	str.w	r2, [r8]
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006670:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006674:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006678:	9307      	str	r3, [sp, #28]
 800667a:	f8cd 8018 	str.w	r8, [sp, #24]
 800667e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006682:	4ba7      	ldr	r3, [pc, #668]	; (8006920 <_printf_float+0x2f8>)
 8006684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006688:	f7fa fa78 	bl	8000b7c <__aeabi_dcmpun>
 800668c:	bb70      	cbnz	r0, 80066ec <_printf_float+0xc4>
 800668e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006692:	4ba3      	ldr	r3, [pc, #652]	; (8006920 <_printf_float+0x2f8>)
 8006694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006698:	f7fa fa52 	bl	8000b40 <__aeabi_dcmple>
 800669c:	bb30      	cbnz	r0, 80066ec <_printf_float+0xc4>
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7fa fa41 	bl	8000b2c <__aeabi_dcmplt>
 80066aa:	b110      	cbz	r0, 80066b2 <_printf_float+0x8a>
 80066ac:	232d      	movs	r3, #45	; 0x2d
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b2:	4a9c      	ldr	r2, [pc, #624]	; (8006924 <_printf_float+0x2fc>)
 80066b4:	4b9c      	ldr	r3, [pc, #624]	; (8006928 <_printf_float+0x300>)
 80066b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066ba:	bf8c      	ite	hi
 80066bc:	4690      	movhi	r8, r2
 80066be:	4698      	movls	r8, r3
 80066c0:	2303      	movs	r3, #3
 80066c2:	f02b 0204 	bic.w	r2, fp, #4
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	6022      	str	r2, [r4, #0]
 80066ca:	f04f 0900 	mov.w	r9, #0
 80066ce:	9700      	str	r7, [sp, #0]
 80066d0:	4633      	mov	r3, r6
 80066d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f9e6 	bl	8006aa8 <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	f040 808d 	bne.w	80067fc <_printf_float+0x1d4>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e6:	b00d      	add	sp, #52	; 0x34
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa42 	bl	8000b7c <__aeabi_dcmpun>
 80066f8:	b110      	cbz	r0, 8006700 <_printf_float+0xd8>
 80066fa:	4a8c      	ldr	r2, [pc, #560]	; (800692c <_printf_float+0x304>)
 80066fc:	4b8c      	ldr	r3, [pc, #560]	; (8006930 <_printf_float+0x308>)
 80066fe:	e7da      	b.n	80066b6 <_printf_float+0x8e>
 8006700:	6861      	ldr	r1, [r4, #4]
 8006702:	1c4b      	adds	r3, r1, #1
 8006704:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006708:	a80a      	add	r0, sp, #40	; 0x28
 800670a:	d13e      	bne.n	800678a <_printf_float+0x162>
 800670c:	2306      	movs	r3, #6
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	2300      	movs	r3, #0
 8006712:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006716:	ab09      	add	r3, sp, #36	; 0x24
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	ec49 8b10 	vmov	d0, r8, r9
 800671e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	f8cd a004 	str.w	sl, [sp, #4]
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4628      	mov	r0, r5
 800672c:	f7ff fee8 	bl	8006500 <__cvt>
 8006730:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006734:	2b47      	cmp	r3, #71	; 0x47
 8006736:	4680      	mov	r8, r0
 8006738:	d109      	bne.n	800674e <_printf_float+0x126>
 800673a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673c:	1cd8      	adds	r0, r3, #3
 800673e:	db02      	blt.n	8006746 <_printf_float+0x11e>
 8006740:	6862      	ldr	r2, [r4, #4]
 8006742:	4293      	cmp	r3, r2
 8006744:	dd47      	ble.n	80067d6 <_printf_float+0x1ae>
 8006746:	f1aa 0a02 	sub.w	sl, sl, #2
 800674a:	fa5f fa8a 	uxtb.w	sl, sl
 800674e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006754:	d824      	bhi.n	80067a0 <_printf_float+0x178>
 8006756:	3901      	subs	r1, #1
 8006758:	4652      	mov	r2, sl
 800675a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800675e:	9109      	str	r1, [sp, #36]	; 0x24
 8006760:	f7ff ff2f 	bl	80065c2 <__exponent>
 8006764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006766:	1813      	adds	r3, r2, r0
 8006768:	2a01      	cmp	r2, #1
 800676a:	4681      	mov	r9, r0
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	dc02      	bgt.n	8006776 <_printf_float+0x14e>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	07d1      	lsls	r1, r2, #31
 8006774:	d501      	bpl.n	800677a <_printf_float+0x152>
 8006776:	3301      	adds	r3, #1
 8006778:	6123      	str	r3, [r4, #16]
 800677a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0a5      	beq.n	80066ce <_printf_float+0xa6>
 8006782:	232d      	movs	r3, #45	; 0x2d
 8006784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006788:	e7a1      	b.n	80066ce <_printf_float+0xa6>
 800678a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800678e:	f000 8177 	beq.w	8006a80 <_printf_float+0x458>
 8006792:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006796:	d1bb      	bne.n	8006710 <_printf_float+0xe8>
 8006798:	2900      	cmp	r1, #0
 800679a:	d1b9      	bne.n	8006710 <_printf_float+0xe8>
 800679c:	2301      	movs	r3, #1
 800679e:	e7b6      	b.n	800670e <_printf_float+0xe6>
 80067a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80067a4:	d119      	bne.n	80067da <_printf_float+0x1b2>
 80067a6:	2900      	cmp	r1, #0
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	dd0c      	ble.n	80067c6 <_printf_float+0x19e>
 80067ac:	6121      	str	r1, [r4, #16]
 80067ae:	b913      	cbnz	r3, 80067b6 <_printf_float+0x18e>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	07d2      	lsls	r2, r2, #31
 80067b4:	d502      	bpl.n	80067bc <_printf_float+0x194>
 80067b6:	3301      	adds	r3, #1
 80067b8:	440b      	add	r3, r1
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	65a3      	str	r3, [r4, #88]	; 0x58
 80067c0:	f04f 0900 	mov.w	r9, #0
 80067c4:	e7d9      	b.n	800677a <_printf_float+0x152>
 80067c6:	b913      	cbnz	r3, 80067ce <_printf_float+0x1a6>
 80067c8:	6822      	ldr	r2, [r4, #0]
 80067ca:	07d0      	lsls	r0, r2, #31
 80067cc:	d501      	bpl.n	80067d2 <_printf_float+0x1aa>
 80067ce:	3302      	adds	r3, #2
 80067d0:	e7f3      	b.n	80067ba <_printf_float+0x192>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7f1      	b.n	80067ba <_printf_float+0x192>
 80067d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80067da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067de:	4293      	cmp	r3, r2
 80067e0:	db05      	blt.n	80067ee <_printf_float+0x1c6>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	07d1      	lsls	r1, r2, #31
 80067e8:	d5e8      	bpl.n	80067bc <_printf_float+0x194>
 80067ea:	3301      	adds	r3, #1
 80067ec:	e7e5      	b.n	80067ba <_printf_float+0x192>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfd4      	ite	le
 80067f2:	f1c3 0302 	rsble	r3, r3, #2
 80067f6:	2301      	movgt	r3, #1
 80067f8:	4413      	add	r3, r2
 80067fa:	e7de      	b.n	80067ba <_printf_float+0x192>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	055a      	lsls	r2, r3, #21
 8006800:	d407      	bmi.n	8006812 <_printf_float+0x1ea>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	4642      	mov	r2, r8
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d12b      	bne.n	8006868 <_printf_float+0x240>
 8006810:	e767      	b.n	80066e2 <_printf_float+0xba>
 8006812:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006816:	f240 80dc 	bls.w	80069d2 <_printf_float+0x3aa>
 800681a:	2200      	movs	r2, #0
 800681c:	2300      	movs	r3, #0
 800681e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006822:	f7fa f979 	bl	8000b18 <__aeabi_dcmpeq>
 8006826:	2800      	cmp	r0, #0
 8006828:	d033      	beq.n	8006892 <_printf_float+0x26a>
 800682a:	2301      	movs	r3, #1
 800682c:	4a41      	ldr	r2, [pc, #260]	; (8006934 <_printf_float+0x30c>)
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f af54 	beq.w	80066e2 <_printf_float+0xba>
 800683a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800683e:	429a      	cmp	r2, r3
 8006840:	db02      	blt.n	8006848 <_printf_float+0x220>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	07d8      	lsls	r0, r3, #31
 8006846:	d50f      	bpl.n	8006868 <_printf_float+0x240>
 8006848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f af45 	beq.w	80066e2 <_printf_float+0xba>
 8006858:	f04f 0800 	mov.w	r8, #0
 800685c:	f104 091a 	add.w	r9, r4, #26
 8006860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006862:	3b01      	subs	r3, #1
 8006864:	4543      	cmp	r3, r8
 8006866:	dc09      	bgt.n	800687c <_printf_float+0x254>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	079b      	lsls	r3, r3, #30
 800686c:	f100 8103 	bmi.w	8006a76 <_printf_float+0x44e>
 8006870:	68e0      	ldr	r0, [r4, #12]
 8006872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006874:	4298      	cmp	r0, r3
 8006876:	bfb8      	it	lt
 8006878:	4618      	movlt	r0, r3
 800687a:	e734      	b.n	80066e6 <_printf_float+0xbe>
 800687c:	2301      	movs	r3, #1
 800687e:	464a      	mov	r2, r9
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af2b 	beq.w	80066e2 <_printf_float+0xba>
 800688c:	f108 0801 	add.w	r8, r8, #1
 8006890:	e7e6      	b.n	8006860 <_printf_float+0x238>
 8006892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	dc2b      	bgt.n	80068f0 <_printf_float+0x2c8>
 8006898:	2301      	movs	r3, #1
 800689a:	4a26      	ldr	r2, [pc, #152]	; (8006934 <_printf_float+0x30c>)
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f af1d 	beq.w	80066e2 <_printf_float+0xba>
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	b923      	cbnz	r3, 80068b6 <_printf_float+0x28e>
 80068ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ae:	b913      	cbnz	r3, 80068b6 <_printf_float+0x28e>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	07d9      	lsls	r1, r3, #31
 80068b4:	d5d8      	bpl.n	8006868 <_printf_float+0x240>
 80068b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f af0e 	beq.w	80066e2 <_printf_float+0xba>
 80068c6:	f04f 0900 	mov.w	r9, #0
 80068ca:	f104 0a1a 	add.w	sl, r4, #26
 80068ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d0:	425b      	negs	r3, r3
 80068d2:	454b      	cmp	r3, r9
 80068d4:	dc01      	bgt.n	80068da <_printf_float+0x2b2>
 80068d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d8:	e794      	b.n	8006804 <_printf_float+0x1dc>
 80068da:	2301      	movs	r3, #1
 80068dc:	4652      	mov	r2, sl
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f aefc 	beq.w	80066e2 <_printf_float+0xba>
 80068ea:	f109 0901 	add.w	r9, r9, #1
 80068ee:	e7ee      	b.n	80068ce <_printf_float+0x2a6>
 80068f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f4:	429a      	cmp	r2, r3
 80068f6:	bfa8      	it	ge
 80068f8:	461a      	movge	r2, r3
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	4691      	mov	r9, r2
 80068fe:	dd07      	ble.n	8006910 <_printf_float+0x2e8>
 8006900:	4613      	mov	r3, r2
 8006902:	4631      	mov	r1, r6
 8006904:	4642      	mov	r2, r8
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f aee9 	beq.w	80066e2 <_printf_float+0xba>
 8006910:	f104 031a 	add.w	r3, r4, #26
 8006914:	f04f 0b00 	mov.w	fp, #0
 8006918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800691c:	9306      	str	r3, [sp, #24]
 800691e:	e015      	b.n	800694c <_printf_float+0x324>
 8006920:	7fefffff 	.word	0x7fefffff
 8006924:	080088dc 	.word	0x080088dc
 8006928:	080088d8 	.word	0x080088d8
 800692c:	080088e4 	.word	0x080088e4
 8006930:	080088e0 	.word	0x080088e0
 8006934:	080088e8 	.word	0x080088e8
 8006938:	2301      	movs	r3, #1
 800693a:	9a06      	ldr	r2, [sp, #24]
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f aecd 	beq.w	80066e2 <_printf_float+0xba>
 8006948:	f10b 0b01 	add.w	fp, fp, #1
 800694c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006950:	ebaa 0309 	sub.w	r3, sl, r9
 8006954:	455b      	cmp	r3, fp
 8006956:	dcef      	bgt.n	8006938 <_printf_float+0x310>
 8006958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800695c:	429a      	cmp	r2, r3
 800695e:	44d0      	add	r8, sl
 8006960:	db15      	blt.n	800698e <_printf_float+0x366>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	07da      	lsls	r2, r3, #31
 8006966:	d412      	bmi.n	800698e <_printf_float+0x366>
 8006968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800696c:	eba3 020a 	sub.w	r2, r3, sl
 8006970:	eba3 0a01 	sub.w	sl, r3, r1
 8006974:	4592      	cmp	sl, r2
 8006976:	bfa8      	it	ge
 8006978:	4692      	movge	sl, r2
 800697a:	f1ba 0f00 	cmp.w	sl, #0
 800697e:	dc0e      	bgt.n	800699e <_printf_float+0x376>
 8006980:	f04f 0800 	mov.w	r8, #0
 8006984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006988:	f104 091a 	add.w	r9, r4, #26
 800698c:	e019      	b.n	80069c2 <_printf_float+0x39a>
 800698e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1e5      	bne.n	8006968 <_printf_float+0x340>
 800699c:	e6a1      	b.n	80066e2 <_printf_float+0xba>
 800699e:	4653      	mov	r3, sl
 80069a0:	4642      	mov	r2, r8
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	d1e9      	bne.n	8006980 <_printf_float+0x358>
 80069ac:	e699      	b.n	80066e2 <_printf_float+0xba>
 80069ae:	2301      	movs	r3, #1
 80069b0:	464a      	mov	r2, r9
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae92 	beq.w	80066e2 <_printf_float+0xba>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	eba3 030a 	sub.w	r3, r3, sl
 80069cc:	4543      	cmp	r3, r8
 80069ce:	dcee      	bgt.n	80069ae <_printf_float+0x386>
 80069d0:	e74a      	b.n	8006868 <_printf_float+0x240>
 80069d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d4:	2a01      	cmp	r2, #1
 80069d6:	dc01      	bgt.n	80069dc <_printf_float+0x3b4>
 80069d8:	07db      	lsls	r3, r3, #31
 80069da:	d53a      	bpl.n	8006a52 <_printf_float+0x42a>
 80069dc:	2301      	movs	r3, #1
 80069de:	4642      	mov	r2, r8
 80069e0:	4631      	mov	r1, r6
 80069e2:	4628      	mov	r0, r5
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	f43f ae7b 	beq.w	80066e2 <_printf_float+0xba>
 80069ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f0:	4631      	mov	r1, r6
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	f108 0801 	add.w	r8, r8, #1
 80069fc:	f43f ae71 	beq.w	80066e2 <_printf_float+0xba>
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	2200      	movs	r2, #0
 8006a04:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f7fa f883 	bl	8000b18 <__aeabi_dcmpeq>
 8006a12:	b9c8      	cbnz	r0, 8006a48 <_printf_float+0x420>
 8006a14:	4653      	mov	r3, sl
 8006a16:	4642      	mov	r2, r8
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d10e      	bne.n	8006a40 <_printf_float+0x418>
 8006a22:	e65e      	b.n	80066e2 <_printf_float+0xba>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4652      	mov	r2, sl
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae57 	beq.w	80066e2 <_printf_float+0xba>
 8006a34:	f108 0801 	add.w	r8, r8, #1
 8006a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	4543      	cmp	r3, r8
 8006a3e:	dcf1      	bgt.n	8006a24 <_printf_float+0x3fc>
 8006a40:	464b      	mov	r3, r9
 8006a42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a46:	e6de      	b.n	8006806 <_printf_float+0x1de>
 8006a48:	f04f 0800 	mov.w	r8, #0
 8006a4c:	f104 0a1a 	add.w	sl, r4, #26
 8006a50:	e7f2      	b.n	8006a38 <_printf_float+0x410>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7df      	b.n	8006a16 <_printf_float+0x3ee>
 8006a56:	2301      	movs	r3, #1
 8006a58:	464a      	mov	r2, r9
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f ae3e 	beq.w	80066e2 <_printf_float+0xba>
 8006a66:	f108 0801 	add.w	r8, r8, #1
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	4543      	cmp	r3, r8
 8006a72:	dcf0      	bgt.n	8006a56 <_printf_float+0x42e>
 8006a74:	e6fc      	b.n	8006870 <_printf_float+0x248>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	f104 0919 	add.w	r9, r4, #25
 8006a7e:	e7f4      	b.n	8006a6a <_printf_float+0x442>
 8006a80:	2900      	cmp	r1, #0
 8006a82:	f43f ae8b 	beq.w	800679c <_printf_float+0x174>
 8006a86:	2300      	movs	r3, #0
 8006a88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a8c:	ab09      	add	r3, sp, #36	; 0x24
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	ec49 8b10 	vmov	d0, r8, r9
 8006a94:	6022      	str	r2, [r4, #0]
 8006a96:	f8cd a004 	str.w	sl, [sp, #4]
 8006a9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7ff fd2e 	bl	8006500 <__cvt>
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	e648      	b.n	800673a <_printf_float+0x112>

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4691      	mov	r9, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	bfb8      	it	lt
 8006abc:	4613      	movlt	r3, r2
 8006abe:	f8c9 3000 	str.w	r3, [r9]
 8006ac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	b112      	cbz	r2, 8006ad2 <_printf_common+0x2a>
 8006acc:	3301      	adds	r3, #1
 8006ace:	f8c9 3000 	str.w	r3, [r9]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	0699      	lsls	r1, r3, #26
 8006ad6:	bf42      	ittt	mi
 8006ad8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006adc:	3302      	addmi	r3, #2
 8006ade:	f8c9 3000 	strmi.w	r3, [r9]
 8006ae2:	6825      	ldr	r5, [r4, #0]
 8006ae4:	f015 0506 	ands.w	r5, r5, #6
 8006ae8:	d107      	bne.n	8006afa <_printf_common+0x52>
 8006aea:	f104 0a19 	add.w	sl, r4, #25
 8006aee:	68e3      	ldr	r3, [r4, #12]
 8006af0:	f8d9 2000 	ldr.w	r2, [r9]
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	42ab      	cmp	r3, r5
 8006af8:	dc28      	bgt.n	8006b4c <_printf_common+0xa4>
 8006afa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	3300      	adds	r3, #0
 8006b02:	bf18      	it	ne
 8006b04:	2301      	movne	r3, #1
 8006b06:	0692      	lsls	r2, r2, #26
 8006b08:	d42d      	bmi.n	8006b66 <_printf_common+0xbe>
 8006b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b0e:	4639      	mov	r1, r7
 8006b10:	4630      	mov	r0, r6
 8006b12:	47c0      	blx	r8
 8006b14:	3001      	adds	r0, #1
 8006b16:	d020      	beq.n	8006b5a <_printf_common+0xb2>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	68e5      	ldr	r5, [r4, #12]
 8006b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b20:	f003 0306 	and.w	r3, r3, #6
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	bf08      	it	eq
 8006b28:	1aad      	subeq	r5, r5, r2
 8006b2a:	68a3      	ldr	r3, [r4, #8]
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	bf0c      	ite	eq
 8006b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b34:	2500      	movne	r5, #0
 8006b36:	4293      	cmp	r3, r2
 8006b38:	bfc4      	itt	gt
 8006b3a:	1a9b      	subgt	r3, r3, r2
 8006b3c:	18ed      	addgt	r5, r5, r3
 8006b3e:	f04f 0900 	mov.w	r9, #0
 8006b42:	341a      	adds	r4, #26
 8006b44:	454d      	cmp	r5, r9
 8006b46:	d11a      	bne.n	8006b7e <_printf_common+0xd6>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e008      	b.n	8006b5e <_printf_common+0xb6>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	4652      	mov	r2, sl
 8006b50:	4639      	mov	r1, r7
 8006b52:	4630      	mov	r0, r6
 8006b54:	47c0      	blx	r8
 8006b56:	3001      	adds	r0, #1
 8006b58:	d103      	bne.n	8006b62 <_printf_common+0xba>
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b62:	3501      	adds	r5, #1
 8006b64:	e7c3      	b.n	8006aee <_printf_common+0x46>
 8006b66:	18e1      	adds	r1, r4, r3
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	2030      	movs	r0, #48	; 0x30
 8006b6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b70:	4422      	add	r2, r4
 8006b72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	e7c5      	b.n	8006b0a <_printf_common+0x62>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4622      	mov	r2, r4
 8006b82:	4639      	mov	r1, r7
 8006b84:	4630      	mov	r0, r6
 8006b86:	47c0      	blx	r8
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d0e6      	beq.n	8006b5a <_printf_common+0xb2>
 8006b8c:	f109 0901 	add.w	r9, r9, #1
 8006b90:	e7d8      	b.n	8006b44 <_printf_common+0x9c>
	...

08006b94 <_printf_i>:
 8006b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	7e09      	ldrb	r1, [r1, #24]
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	296e      	cmp	r1, #110	; 0x6e
 8006ba4:	4617      	mov	r7, r2
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	4698      	mov	r8, r3
 8006baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bac:	f000 80b3 	beq.w	8006d16 <_printf_i+0x182>
 8006bb0:	d822      	bhi.n	8006bf8 <_printf_i+0x64>
 8006bb2:	2963      	cmp	r1, #99	; 0x63
 8006bb4:	d036      	beq.n	8006c24 <_printf_i+0x90>
 8006bb6:	d80a      	bhi.n	8006bce <_printf_i+0x3a>
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	f000 80b9 	beq.w	8006d30 <_printf_i+0x19c>
 8006bbe:	2958      	cmp	r1, #88	; 0x58
 8006bc0:	f000 8083 	beq.w	8006cca <_printf_i+0x136>
 8006bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bcc:	e032      	b.n	8006c34 <_printf_i+0xa0>
 8006bce:	2964      	cmp	r1, #100	; 0x64
 8006bd0:	d001      	beq.n	8006bd6 <_printf_i+0x42>
 8006bd2:	2969      	cmp	r1, #105	; 0x69
 8006bd4:	d1f6      	bne.n	8006bc4 <_printf_i+0x30>
 8006bd6:	6820      	ldr	r0, [r4, #0]
 8006bd8:	6813      	ldr	r3, [r2, #0]
 8006bda:	0605      	lsls	r5, r0, #24
 8006bdc:	f103 0104 	add.w	r1, r3, #4
 8006be0:	d52a      	bpl.n	8006c38 <_printf_i+0xa4>
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6011      	str	r1, [r2, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da03      	bge.n	8006bf2 <_printf_i+0x5e>
 8006bea:	222d      	movs	r2, #45	; 0x2d
 8006bec:	425b      	negs	r3, r3
 8006bee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bf2:	486f      	ldr	r0, [pc, #444]	; (8006db0 <_printf_i+0x21c>)
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	e039      	b.n	8006c6c <_printf_i+0xd8>
 8006bf8:	2973      	cmp	r1, #115	; 0x73
 8006bfa:	f000 809d 	beq.w	8006d38 <_printf_i+0x1a4>
 8006bfe:	d808      	bhi.n	8006c12 <_printf_i+0x7e>
 8006c00:	296f      	cmp	r1, #111	; 0x6f
 8006c02:	d020      	beq.n	8006c46 <_printf_i+0xb2>
 8006c04:	2970      	cmp	r1, #112	; 0x70
 8006c06:	d1dd      	bne.n	8006bc4 <_printf_i+0x30>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	f043 0320 	orr.w	r3, r3, #32
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	e003      	b.n	8006c1a <_printf_i+0x86>
 8006c12:	2975      	cmp	r1, #117	; 0x75
 8006c14:	d017      	beq.n	8006c46 <_printf_i+0xb2>
 8006c16:	2978      	cmp	r1, #120	; 0x78
 8006c18:	d1d4      	bne.n	8006bc4 <_printf_i+0x30>
 8006c1a:	2378      	movs	r3, #120	; 0x78
 8006c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c20:	4864      	ldr	r0, [pc, #400]	; (8006db4 <_printf_i+0x220>)
 8006c22:	e055      	b.n	8006cd0 <_printf_i+0x13c>
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	1d19      	adds	r1, r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6011      	str	r1, [r2, #0]
 8006c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c34:	2301      	movs	r3, #1
 8006c36:	e08c      	b.n	8006d52 <_printf_i+0x1be>
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6011      	str	r1, [r2, #0]
 8006c3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c40:	bf18      	it	ne
 8006c42:	b21b      	sxthne	r3, r3
 8006c44:	e7cf      	b.n	8006be6 <_printf_i+0x52>
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	1d18      	adds	r0, r3, #4
 8006c4c:	6010      	str	r0, [r2, #0]
 8006c4e:	0628      	lsls	r0, r5, #24
 8006c50:	d501      	bpl.n	8006c56 <_printf_i+0xc2>
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	e002      	b.n	8006c5c <_printf_i+0xc8>
 8006c56:	0668      	lsls	r0, r5, #25
 8006c58:	d5fb      	bpl.n	8006c52 <_printf_i+0xbe>
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	4854      	ldr	r0, [pc, #336]	; (8006db0 <_printf_i+0x21c>)
 8006c5e:	296f      	cmp	r1, #111	; 0x6f
 8006c60:	bf14      	ite	ne
 8006c62:	220a      	movne	r2, #10
 8006c64:	2208      	moveq	r2, #8
 8006c66:	2100      	movs	r1, #0
 8006c68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6c:	6865      	ldr	r5, [r4, #4]
 8006c6e:	60a5      	str	r5, [r4, #8]
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	f2c0 8095 	blt.w	8006da0 <_printf_i+0x20c>
 8006c76:	6821      	ldr	r1, [r4, #0]
 8006c78:	f021 0104 	bic.w	r1, r1, #4
 8006c7c:	6021      	str	r1, [r4, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d13d      	bne.n	8006cfe <_printf_i+0x16a>
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	f040 808e 	bne.w	8006da4 <_printf_i+0x210>
 8006c88:	4665      	mov	r5, ip
 8006c8a:	2a08      	cmp	r2, #8
 8006c8c:	d10b      	bne.n	8006ca6 <_printf_i+0x112>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	07db      	lsls	r3, r3, #31
 8006c92:	d508      	bpl.n	8006ca6 <_printf_i+0x112>
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	6862      	ldr	r2, [r4, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bfde      	ittt	le
 8006c9c:	2330      	movle	r3, #48	; 0x30
 8006c9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ca2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ca6:	ebac 0305 	sub.w	r3, ip, r5
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f8cd 8000 	str.w	r8, [sp]
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	aa03      	add	r2, sp, #12
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff fef6 	bl	8006aa8 <_printf_common>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d14d      	bne.n	8006d5c <_printf_i+0x1c8>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc4:	b005      	add	sp, #20
 8006cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cca:	4839      	ldr	r0, [pc, #228]	; (8006db0 <_printf_i+0x21c>)
 8006ccc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006cd0:	6813      	ldr	r3, [r2, #0]
 8006cd2:	6821      	ldr	r1, [r4, #0]
 8006cd4:	1d1d      	adds	r5, r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6015      	str	r5, [r2, #0]
 8006cda:	060a      	lsls	r2, r1, #24
 8006cdc:	d50b      	bpl.n	8006cf6 <_printf_i+0x162>
 8006cde:	07ca      	lsls	r2, r1, #31
 8006ce0:	bf44      	itt	mi
 8006ce2:	f041 0120 	orrmi.w	r1, r1, #32
 8006ce6:	6021      	strmi	r1, [r4, #0]
 8006ce8:	b91b      	cbnz	r3, 8006cf2 <_printf_i+0x15e>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	f022 0220 	bic.w	r2, r2, #32
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	2210      	movs	r2, #16
 8006cf4:	e7b7      	b.n	8006c66 <_printf_i+0xd2>
 8006cf6:	064d      	lsls	r5, r1, #25
 8006cf8:	bf48      	it	mi
 8006cfa:	b29b      	uxthmi	r3, r3
 8006cfc:	e7ef      	b.n	8006cde <_printf_i+0x14a>
 8006cfe:	4665      	mov	r5, ip
 8006d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d04:	fb02 3311 	mls	r3, r2, r1, r3
 8006d08:	5cc3      	ldrb	r3, [r0, r3]
 8006d0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d0e:	460b      	mov	r3, r1
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d1f5      	bne.n	8006d00 <_printf_i+0x16c>
 8006d14:	e7b9      	b.n	8006c8a <_printf_i+0xf6>
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	6825      	ldr	r5, [r4, #0]
 8006d1a:	6961      	ldr	r1, [r4, #20]
 8006d1c:	1d18      	adds	r0, r3, #4
 8006d1e:	6010      	str	r0, [r2, #0]
 8006d20:	0628      	lsls	r0, r5, #24
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	d501      	bpl.n	8006d2a <_printf_i+0x196>
 8006d26:	6019      	str	r1, [r3, #0]
 8006d28:	e002      	b.n	8006d30 <_printf_i+0x19c>
 8006d2a:	066a      	lsls	r2, r5, #25
 8006d2c:	d5fb      	bpl.n	8006d26 <_printf_i+0x192>
 8006d2e:	8019      	strh	r1, [r3, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	4665      	mov	r5, ip
 8006d36:	e7b9      	b.n	8006cac <_printf_i+0x118>
 8006d38:	6813      	ldr	r3, [r2, #0]
 8006d3a:	1d19      	adds	r1, r3, #4
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	681d      	ldr	r5, [r3, #0]
 8006d40:	6862      	ldr	r2, [r4, #4]
 8006d42:	2100      	movs	r1, #0
 8006d44:	4628      	mov	r0, r5
 8006d46:	f7f9 fa73 	bl	8000230 <memchr>
 8006d4a:	b108      	cbz	r0, 8006d50 <_printf_i+0x1bc>
 8006d4c:	1b40      	subs	r0, r0, r5
 8006d4e:	6060      	str	r0, [r4, #4]
 8006d50:	6863      	ldr	r3, [r4, #4]
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	2300      	movs	r3, #0
 8006d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d5a:	e7a7      	b.n	8006cac <_printf_i+0x118>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	462a      	mov	r2, r5
 8006d60:	4639      	mov	r1, r7
 8006d62:	4630      	mov	r0, r6
 8006d64:	47c0      	blx	r8
 8006d66:	3001      	adds	r0, #1
 8006d68:	d0aa      	beq.n	8006cc0 <_printf_i+0x12c>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	079b      	lsls	r3, r3, #30
 8006d6e:	d413      	bmi.n	8006d98 <_printf_i+0x204>
 8006d70:	68e0      	ldr	r0, [r4, #12]
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	4298      	cmp	r0, r3
 8006d76:	bfb8      	it	lt
 8006d78:	4618      	movlt	r0, r3
 8006d7a:	e7a3      	b.n	8006cc4 <_printf_i+0x130>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	464a      	mov	r2, r9
 8006d80:	4639      	mov	r1, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	47c0      	blx	r8
 8006d86:	3001      	adds	r0, #1
 8006d88:	d09a      	beq.n	8006cc0 <_printf_i+0x12c>
 8006d8a:	3501      	adds	r5, #1
 8006d8c:	68e3      	ldr	r3, [r4, #12]
 8006d8e:	9a03      	ldr	r2, [sp, #12]
 8006d90:	1a9b      	subs	r3, r3, r2
 8006d92:	42ab      	cmp	r3, r5
 8006d94:	dcf2      	bgt.n	8006d7c <_printf_i+0x1e8>
 8006d96:	e7eb      	b.n	8006d70 <_printf_i+0x1dc>
 8006d98:	2500      	movs	r5, #0
 8006d9a:	f104 0919 	add.w	r9, r4, #25
 8006d9e:	e7f5      	b.n	8006d8c <_printf_i+0x1f8>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ac      	bne.n	8006cfe <_printf_i+0x16a>
 8006da4:	7803      	ldrb	r3, [r0, #0]
 8006da6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006daa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dae:	e76c      	b.n	8006c8a <_printf_i+0xf6>
 8006db0:	080088ea 	.word	0x080088ea
 8006db4:	080088fb 	.word	0x080088fb

08006db8 <siprintf>:
 8006db8:	b40e      	push	{r1, r2, r3}
 8006dba:	b500      	push	{lr}
 8006dbc:	b09c      	sub	sp, #112	; 0x70
 8006dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8006dc0:	9002      	str	r0, [sp, #8]
 8006dc2:	9006      	str	r0, [sp, #24]
 8006dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dc8:	4809      	ldr	r0, [pc, #36]	; (8006df0 <siprintf+0x38>)
 8006dca:	9107      	str	r1, [sp, #28]
 8006dcc:	9104      	str	r1, [sp, #16]
 8006dce:	4909      	ldr	r1, [pc, #36]	; (8006df4 <siprintf+0x3c>)
 8006dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd4:	9105      	str	r1, [sp, #20]
 8006dd6:	6800      	ldr	r0, [r0, #0]
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	a902      	add	r1, sp, #8
 8006ddc:	f001 fa5c 	bl	8008298 <_svfiprintf_r>
 8006de0:	9b02      	ldr	r3, [sp, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	b01c      	add	sp, #112	; 0x70
 8006de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dec:	b003      	add	sp, #12
 8006dee:	4770      	bx	lr
 8006df0:	20000048 	.word	0x20000048
 8006df4:	ffff0208 	.word	0xffff0208

08006df8 <quorem>:
 8006df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	6903      	ldr	r3, [r0, #16]
 8006dfe:	690c      	ldr	r4, [r1, #16]
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	4680      	mov	r8, r0
 8006e04:	f2c0 8082 	blt.w	8006f0c <quorem+0x114>
 8006e08:	3c01      	subs	r4, #1
 8006e0a:	f101 0714 	add.w	r7, r1, #20
 8006e0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e12:	f100 0614 	add.w	r6, r0, #20
 8006e16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e1e:	eb06 030c 	add.w	r3, r6, ip
 8006e22:	3501      	adds	r5, #1
 8006e24:	eb07 090c 	add.w	r9, r7, ip
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e2e:	b395      	cbz	r5, 8006e96 <quorem+0x9e>
 8006e30:	f04f 0a00 	mov.w	sl, #0
 8006e34:	4638      	mov	r0, r7
 8006e36:	46b6      	mov	lr, r6
 8006e38:	46d3      	mov	fp, sl
 8006e3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e3e:	b293      	uxth	r3, r2
 8006e40:	fb05 a303 	mla	r3, r5, r3, sl
 8006e44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ebab 0303 	sub.w	r3, fp, r3
 8006e4e:	0c12      	lsrs	r2, r2, #16
 8006e50:	f8de b000 	ldr.w	fp, [lr]
 8006e54:	fb05 a202 	mla	r2, r5, r2, sl
 8006e58:	fa13 f38b 	uxtah	r3, r3, fp
 8006e5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006e60:	fa1f fb82 	uxth.w	fp, r2
 8006e64:	f8de 2000 	ldr.w	r2, [lr]
 8006e68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e76:	4581      	cmp	r9, r0
 8006e78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e7c:	f84e 3b04 	str.w	r3, [lr], #4
 8006e80:	d2db      	bcs.n	8006e3a <quorem+0x42>
 8006e82:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e86:	b933      	cbnz	r3, 8006e96 <quorem+0x9e>
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	3b04      	subs	r3, #4
 8006e8c:	429e      	cmp	r6, r3
 8006e8e:	461a      	mov	r2, r3
 8006e90:	d330      	bcc.n	8006ef4 <quorem+0xfc>
 8006e92:	f8c8 4010 	str.w	r4, [r8, #16]
 8006e96:	4640      	mov	r0, r8
 8006e98:	f001 f828 	bl	8007eec <__mcmp>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	db25      	blt.n	8006eec <quorem+0xf4>
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f04f 0c00 	mov.w	ip, #0
 8006ea8:	f857 2b04 	ldr.w	r2, [r7], #4
 8006eac:	f8d0 e000 	ldr.w	lr, [r0]
 8006eb0:	b293      	uxth	r3, r2
 8006eb2:	ebac 0303 	sub.w	r3, ip, r3
 8006eb6:	0c12      	lsrs	r2, r2, #16
 8006eb8:	fa13 f38e 	uxtah	r3, r3, lr
 8006ebc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ec0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eca:	45b9      	cmp	r9, r7
 8006ecc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ed0:	f840 3b04 	str.w	r3, [r0], #4
 8006ed4:	d2e8      	bcs.n	8006ea8 <quorem+0xb0>
 8006ed6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006eda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ede:	b92a      	cbnz	r2, 8006eec <quorem+0xf4>
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	d30b      	bcc.n	8006f00 <quorem+0x108>
 8006ee8:	f8c8 4010 	str.w	r4, [r8, #16]
 8006eec:	4628      	mov	r0, r5
 8006eee:	b003      	add	sp, #12
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	3b04      	subs	r3, #4
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	d1ca      	bne.n	8006e92 <quorem+0x9a>
 8006efc:	3c01      	subs	r4, #1
 8006efe:	e7c5      	b.n	8006e8c <quorem+0x94>
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	3b04      	subs	r3, #4
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	d1ef      	bne.n	8006ee8 <quorem+0xf0>
 8006f08:	3c01      	subs	r4, #1
 8006f0a:	e7ea      	b.n	8006ee2 <quorem+0xea>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e7ee      	b.n	8006eee <quorem+0xf6>

08006f10 <_dtoa_r>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	ec57 6b10 	vmov	r6, r7, d0
 8006f18:	b097      	sub	sp, #92	; 0x5c
 8006f1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f1c:	9106      	str	r1, [sp, #24]
 8006f1e:	4604      	mov	r4, r0
 8006f20:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f22:	9312      	str	r3, [sp, #72]	; 0x48
 8006f24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f28:	e9cd 6700 	strd	r6, r7, [sp]
 8006f2c:	b93d      	cbnz	r5, 8006f3e <_dtoa_r+0x2e>
 8006f2e:	2010      	movs	r0, #16
 8006f30:	f000 fdb4 	bl	8007a9c <malloc>
 8006f34:	6260      	str	r0, [r4, #36]	; 0x24
 8006f36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f3a:	6005      	str	r5, [r0, #0]
 8006f3c:	60c5      	str	r5, [r0, #12]
 8006f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	b151      	cbz	r1, 8006f5a <_dtoa_r+0x4a>
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	604a      	str	r2, [r1, #4]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4093      	lsls	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 fdeb 	bl	8007b2a <_Bfree>
 8006f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	1e3b      	subs	r3, r7, #0
 8006f5c:	bfbb      	ittet	lt
 8006f5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f62:	9301      	strlt	r3, [sp, #4]
 8006f64:	2300      	movge	r3, #0
 8006f66:	2201      	movlt	r2, #1
 8006f68:	bfac      	ite	ge
 8006f6a:	f8c8 3000 	strge.w	r3, [r8]
 8006f6e:	f8c8 2000 	strlt.w	r2, [r8]
 8006f72:	4baf      	ldr	r3, [pc, #700]	; (8007230 <_dtoa_r+0x320>)
 8006f74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f78:	ea33 0308 	bics.w	r3, r3, r8
 8006f7c:	d114      	bne.n	8006fa8 <_dtoa_r+0x98>
 8006f7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f80:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	b923      	cbnz	r3, 8006f94 <_dtoa_r+0x84>
 8006f8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f000 8542 	beq.w	8007a18 <_dtoa_r+0xb08>
 8006f94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007244 <_dtoa_r+0x334>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 8544 	beq.w	8007a28 <_dtoa_r+0xb18>
 8006fa0:	f10b 0303 	add.w	r3, fp, #3
 8006fa4:	f000 bd3e 	b.w	8007a24 <_dtoa_r+0xb14>
 8006fa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 8006fb8:	4681      	mov	r9, r0
 8006fba:	b168      	cbz	r0, 8006fd8 <_dtoa_r+0xc8>
 8006fbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8524 	beq.w	8007a12 <_dtoa_r+0xb02>
 8006fca:	4b9a      	ldr	r3, [pc, #616]	; (8007234 <_dtoa_r+0x324>)
 8006fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fce:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	f000 bd28 	b.w	8007a28 <_dtoa_r+0xb18>
 8006fd8:	aa14      	add	r2, sp, #80	; 0x50
 8006fda:	a915      	add	r1, sp, #84	; 0x54
 8006fdc:	ec47 6b10 	vmov	d0, r6, r7
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fffa 	bl	8007fda <__d2b>
 8006fe6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006fea:	9004      	str	r0, [sp, #16]
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	d07c      	beq.n	80070ea <_dtoa_r+0x1da>
 8006ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ff4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006ff8:	46b2      	mov	sl, r6
 8006ffa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007002:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007006:	2200      	movs	r2, #0
 8007008:	4b8b      	ldr	r3, [pc, #556]	; (8007238 <_dtoa_r+0x328>)
 800700a:	4650      	mov	r0, sl
 800700c:	4659      	mov	r1, fp
 800700e:	f7f9 f963 	bl	80002d8 <__aeabi_dsub>
 8007012:	a381      	add	r3, pc, #516	; (adr r3, 8007218 <_dtoa_r+0x308>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 fb16 	bl	8000648 <__aeabi_dmul>
 800701c:	a380      	add	r3, pc, #512	; (adr r3, 8007220 <_dtoa_r+0x310>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 f95b 	bl	80002dc <__adddf3>
 8007026:	4606      	mov	r6, r0
 8007028:	4628      	mov	r0, r5
 800702a:	460f      	mov	r7, r1
 800702c:	f7f9 faa2 	bl	8000574 <__aeabi_i2d>
 8007030:	a37d      	add	r3, pc, #500	; (adr r3, 8007228 <_dtoa_r+0x318>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f7f9 fb07 	bl	8000648 <__aeabi_dmul>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4630      	mov	r0, r6
 8007040:	4639      	mov	r1, r7
 8007042:	f7f9 f94b 	bl	80002dc <__adddf3>
 8007046:	4606      	mov	r6, r0
 8007048:	460f      	mov	r7, r1
 800704a:	f7f9 fdad 	bl	8000ba8 <__aeabi_d2iz>
 800704e:	2200      	movs	r2, #0
 8007050:	4682      	mov	sl, r0
 8007052:	2300      	movs	r3, #0
 8007054:	4630      	mov	r0, r6
 8007056:	4639      	mov	r1, r7
 8007058:	f7f9 fd68 	bl	8000b2c <__aeabi_dcmplt>
 800705c:	b148      	cbz	r0, 8007072 <_dtoa_r+0x162>
 800705e:	4650      	mov	r0, sl
 8007060:	f7f9 fa88 	bl	8000574 <__aeabi_i2d>
 8007064:	4632      	mov	r2, r6
 8007066:	463b      	mov	r3, r7
 8007068:	f7f9 fd56 	bl	8000b18 <__aeabi_dcmpeq>
 800706c:	b908      	cbnz	r0, 8007072 <_dtoa_r+0x162>
 800706e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007072:	f1ba 0f16 	cmp.w	sl, #22
 8007076:	d859      	bhi.n	800712c <_dtoa_r+0x21c>
 8007078:	4970      	ldr	r1, [pc, #448]	; (800723c <_dtoa_r+0x32c>)
 800707a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800707e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007086:	f7f9 fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 800708a:	2800      	cmp	r0, #0
 800708c:	d050      	beq.n	8007130 <_dtoa_r+0x220>
 800708e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007092:	2300      	movs	r3, #0
 8007094:	930f      	str	r3, [sp, #60]	; 0x3c
 8007096:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007098:	1b5d      	subs	r5, r3, r5
 800709a:	f1b5 0801 	subs.w	r8, r5, #1
 800709e:	bf49      	itett	mi
 80070a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80070a4:	2300      	movpl	r3, #0
 80070a6:	9305      	strmi	r3, [sp, #20]
 80070a8:	f04f 0800 	movmi.w	r8, #0
 80070ac:	bf58      	it	pl
 80070ae:	9305      	strpl	r3, [sp, #20]
 80070b0:	f1ba 0f00 	cmp.w	sl, #0
 80070b4:	db3e      	blt.n	8007134 <_dtoa_r+0x224>
 80070b6:	2300      	movs	r3, #0
 80070b8:	44d0      	add	r8, sl
 80070ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	9b06      	ldr	r3, [sp, #24]
 80070c2:	2b09      	cmp	r3, #9
 80070c4:	f200 8090 	bhi.w	80071e8 <_dtoa_r+0x2d8>
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	bfc4      	itt	gt
 80070cc:	3b04      	subgt	r3, #4
 80070ce:	9306      	strgt	r3, [sp, #24]
 80070d0:	9b06      	ldr	r3, [sp, #24]
 80070d2:	f1a3 0302 	sub.w	r3, r3, #2
 80070d6:	bfcc      	ite	gt
 80070d8:	2500      	movgt	r5, #0
 80070da:	2501      	movle	r5, #1
 80070dc:	2b03      	cmp	r3, #3
 80070de:	f200 808f 	bhi.w	8007200 <_dtoa_r+0x2f0>
 80070e2:	e8df f003 	tbb	[pc, r3]
 80070e6:	7f7d      	.short	0x7f7d
 80070e8:	7131      	.short	0x7131
 80070ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80070ee:	441d      	add	r5, r3
 80070f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80070f4:	2820      	cmp	r0, #32
 80070f6:	dd13      	ble.n	8007120 <_dtoa_r+0x210>
 80070f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	fa08 f800 	lsl.w	r8, r8, r0
 8007102:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007106:	fa23 f000 	lsr.w	r0, r3, r0
 800710a:	ea48 0000 	orr.w	r0, r8, r0
 800710e:	f7f9 fa21 	bl	8000554 <__aeabi_ui2d>
 8007112:	2301      	movs	r3, #1
 8007114:	4682      	mov	sl, r0
 8007116:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800711a:	3d01      	subs	r5, #1
 800711c:	9313      	str	r3, [sp, #76]	; 0x4c
 800711e:	e772      	b.n	8007006 <_dtoa_r+0xf6>
 8007120:	9b00      	ldr	r3, [sp, #0]
 8007122:	f1c0 0020 	rsb	r0, r0, #32
 8007126:	fa03 f000 	lsl.w	r0, r3, r0
 800712a:	e7f0      	b.n	800710e <_dtoa_r+0x1fe>
 800712c:	2301      	movs	r3, #1
 800712e:	e7b1      	b.n	8007094 <_dtoa_r+0x184>
 8007130:	900f      	str	r0, [sp, #60]	; 0x3c
 8007132:	e7b0      	b.n	8007096 <_dtoa_r+0x186>
 8007134:	9b05      	ldr	r3, [sp, #20]
 8007136:	eba3 030a 	sub.w	r3, r3, sl
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	f1ca 0300 	rsb	r3, sl, #0
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	2300      	movs	r3, #0
 8007144:	930e      	str	r3, [sp, #56]	; 0x38
 8007146:	e7bb      	b.n	80070c0 <_dtoa_r+0x1b0>
 8007148:	2301      	movs	r3, #1
 800714a:	930a      	str	r3, [sp, #40]	; 0x28
 800714c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	dd59      	ble.n	8007206 <_dtoa_r+0x2f6>
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	4699      	mov	r9, r3
 8007156:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007158:	2200      	movs	r2, #0
 800715a:	6072      	str	r2, [r6, #4]
 800715c:	2204      	movs	r2, #4
 800715e:	f102 0014 	add.w	r0, r2, #20
 8007162:	4298      	cmp	r0, r3
 8007164:	6871      	ldr	r1, [r6, #4]
 8007166:	d953      	bls.n	8007210 <_dtoa_r+0x300>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fcaa 	bl	8007ac2 <_Balloc>
 800716e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007170:	6030      	str	r0, [r6, #0]
 8007172:	f1b9 0f0e 	cmp.w	r9, #14
 8007176:	f8d3 b000 	ldr.w	fp, [r3]
 800717a:	f200 80e6 	bhi.w	800734a <_dtoa_r+0x43a>
 800717e:	2d00      	cmp	r5, #0
 8007180:	f000 80e3 	beq.w	800734a <_dtoa_r+0x43a>
 8007184:	ed9d 7b00 	vldr	d7, [sp]
 8007188:	f1ba 0f00 	cmp.w	sl, #0
 800718c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007190:	dd74      	ble.n	800727c <_dtoa_r+0x36c>
 8007192:	4a2a      	ldr	r2, [pc, #168]	; (800723c <_dtoa_r+0x32c>)
 8007194:	f00a 030f 	and.w	r3, sl, #15
 8007198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800719c:	ed93 7b00 	vldr	d7, [r3]
 80071a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80071a4:	06f0      	lsls	r0, r6, #27
 80071a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80071aa:	d565      	bpl.n	8007278 <_dtoa_r+0x368>
 80071ac:	4b24      	ldr	r3, [pc, #144]	; (8007240 <_dtoa_r+0x330>)
 80071ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071b6:	f7f9 fb71 	bl	800089c <__aeabi_ddiv>
 80071ba:	e9cd 0100 	strd	r0, r1, [sp]
 80071be:	f006 060f 	and.w	r6, r6, #15
 80071c2:	2503      	movs	r5, #3
 80071c4:	4f1e      	ldr	r7, [pc, #120]	; (8007240 <_dtoa_r+0x330>)
 80071c6:	e04c      	b.n	8007262 <_dtoa_r+0x352>
 80071c8:	2301      	movs	r3, #1
 80071ca:	930a      	str	r3, [sp, #40]	; 0x28
 80071cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ce:	4453      	add	r3, sl
 80071d0:	f103 0901 	add.w	r9, r3, #1
 80071d4:	9302      	str	r3, [sp, #8]
 80071d6:	464b      	mov	r3, r9
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bfb8      	it	lt
 80071dc:	2301      	movlt	r3, #1
 80071de:	e7ba      	b.n	8007156 <_dtoa_r+0x246>
 80071e0:	2300      	movs	r3, #0
 80071e2:	e7b2      	b.n	800714a <_dtoa_r+0x23a>
 80071e4:	2300      	movs	r3, #0
 80071e6:	e7f0      	b.n	80071ca <_dtoa_r+0x2ba>
 80071e8:	2501      	movs	r5, #1
 80071ea:	2300      	movs	r3, #0
 80071ec:	9306      	str	r3, [sp, #24]
 80071ee:	950a      	str	r5, [sp, #40]	; 0x28
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	4699      	mov	r9, r3
 80071f8:	2200      	movs	r2, #0
 80071fa:	2312      	movs	r3, #18
 80071fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80071fe:	e7aa      	b.n	8007156 <_dtoa_r+0x246>
 8007200:	2301      	movs	r3, #1
 8007202:	930a      	str	r3, [sp, #40]	; 0x28
 8007204:	e7f4      	b.n	80071f0 <_dtoa_r+0x2e0>
 8007206:	2301      	movs	r3, #1
 8007208:	9302      	str	r3, [sp, #8]
 800720a:	4699      	mov	r9, r3
 800720c:	461a      	mov	r2, r3
 800720e:	e7f5      	b.n	80071fc <_dtoa_r+0x2ec>
 8007210:	3101      	adds	r1, #1
 8007212:	6071      	str	r1, [r6, #4]
 8007214:	0052      	lsls	r2, r2, #1
 8007216:	e7a2      	b.n	800715e <_dtoa_r+0x24e>
 8007218:	636f4361 	.word	0x636f4361
 800721c:	3fd287a7 	.word	0x3fd287a7
 8007220:	8b60c8b3 	.word	0x8b60c8b3
 8007224:	3fc68a28 	.word	0x3fc68a28
 8007228:	509f79fb 	.word	0x509f79fb
 800722c:	3fd34413 	.word	0x3fd34413
 8007230:	7ff00000 	.word	0x7ff00000
 8007234:	080088e9 	.word	0x080088e9
 8007238:	3ff80000 	.word	0x3ff80000
 800723c:	08008948 	.word	0x08008948
 8007240:	08008920 	.word	0x08008920
 8007244:	08008915 	.word	0x08008915
 8007248:	07f1      	lsls	r1, r6, #31
 800724a:	d508      	bpl.n	800725e <_dtoa_r+0x34e>
 800724c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007254:	f7f9 f9f8 	bl	8000648 <__aeabi_dmul>
 8007258:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800725c:	3501      	adds	r5, #1
 800725e:	1076      	asrs	r6, r6, #1
 8007260:	3708      	adds	r7, #8
 8007262:	2e00      	cmp	r6, #0
 8007264:	d1f0      	bne.n	8007248 <_dtoa_r+0x338>
 8007266:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800726a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800726e:	f7f9 fb15 	bl	800089c <__aeabi_ddiv>
 8007272:	e9cd 0100 	strd	r0, r1, [sp]
 8007276:	e01a      	b.n	80072ae <_dtoa_r+0x39e>
 8007278:	2502      	movs	r5, #2
 800727a:	e7a3      	b.n	80071c4 <_dtoa_r+0x2b4>
 800727c:	f000 80a0 	beq.w	80073c0 <_dtoa_r+0x4b0>
 8007280:	f1ca 0600 	rsb	r6, sl, #0
 8007284:	4b9f      	ldr	r3, [pc, #636]	; (8007504 <_dtoa_r+0x5f4>)
 8007286:	4fa0      	ldr	r7, [pc, #640]	; (8007508 <_dtoa_r+0x5f8>)
 8007288:	f006 020f 	and.w	r2, r6, #15
 800728c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007298:	f7f9 f9d6 	bl	8000648 <__aeabi_dmul>
 800729c:	e9cd 0100 	strd	r0, r1, [sp]
 80072a0:	1136      	asrs	r6, r6, #4
 80072a2:	2300      	movs	r3, #0
 80072a4:	2502      	movs	r5, #2
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	d17f      	bne.n	80073aa <_dtoa_r+0x49a>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e1      	bne.n	8007272 <_dtoa_r+0x362>
 80072ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8087 	beq.w	80073c4 <_dtoa_r+0x4b4>
 80072b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b93      	ldr	r3, [pc, #588]	; (800750c <_dtoa_r+0x5fc>)
 80072be:	4630      	mov	r0, r6
 80072c0:	4639      	mov	r1, r7
 80072c2:	f7f9 fc33 	bl	8000b2c <__aeabi_dcmplt>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d07c      	beq.n	80073c4 <_dtoa_r+0x4b4>
 80072ca:	f1b9 0f00 	cmp.w	r9, #0
 80072ce:	d079      	beq.n	80073c4 <_dtoa_r+0x4b4>
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dd35      	ble.n	8007342 <_dtoa_r+0x432>
 80072d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80072da:	9308      	str	r3, [sp, #32]
 80072dc:	4639      	mov	r1, r7
 80072de:	2200      	movs	r2, #0
 80072e0:	4b8b      	ldr	r3, [pc, #556]	; (8007510 <_dtoa_r+0x600>)
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7f9 f9b0 	bl	8000648 <__aeabi_dmul>
 80072e8:	e9cd 0100 	strd	r0, r1, [sp]
 80072ec:	9f02      	ldr	r7, [sp, #8]
 80072ee:	3501      	adds	r5, #1
 80072f0:	4628      	mov	r0, r5
 80072f2:	f7f9 f93f 	bl	8000574 <__aeabi_i2d>
 80072f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072fa:	f7f9 f9a5 	bl	8000648 <__aeabi_dmul>
 80072fe:	2200      	movs	r2, #0
 8007300:	4b84      	ldr	r3, [pc, #528]	; (8007514 <_dtoa_r+0x604>)
 8007302:	f7f8 ffeb 	bl	80002dc <__adddf3>
 8007306:	4605      	mov	r5, r0
 8007308:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800730c:	2f00      	cmp	r7, #0
 800730e:	d15d      	bne.n	80073cc <_dtoa_r+0x4bc>
 8007310:	2200      	movs	r2, #0
 8007312:	4b81      	ldr	r3, [pc, #516]	; (8007518 <_dtoa_r+0x608>)
 8007314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007318:	f7f8 ffde 	bl	80002d8 <__aeabi_dsub>
 800731c:	462a      	mov	r2, r5
 800731e:	4633      	mov	r3, r6
 8007320:	e9cd 0100 	strd	r0, r1, [sp]
 8007324:	f7f9 fc20 	bl	8000b68 <__aeabi_dcmpgt>
 8007328:	2800      	cmp	r0, #0
 800732a:	f040 8288 	bne.w	800783e <_dtoa_r+0x92e>
 800732e:	462a      	mov	r2, r5
 8007330:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007334:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007338:	f7f9 fbf8 	bl	8000b2c <__aeabi_dcmplt>
 800733c:	2800      	cmp	r0, #0
 800733e:	f040 827c 	bne.w	800783a <_dtoa_r+0x92a>
 8007342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007346:	e9cd 2300 	strd	r2, r3, [sp]
 800734a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800734c:	2b00      	cmp	r3, #0
 800734e:	f2c0 8150 	blt.w	80075f2 <_dtoa_r+0x6e2>
 8007352:	f1ba 0f0e 	cmp.w	sl, #14
 8007356:	f300 814c 	bgt.w	80075f2 <_dtoa_r+0x6e2>
 800735a:	4b6a      	ldr	r3, [pc, #424]	; (8007504 <_dtoa_r+0x5f4>)
 800735c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007360:	ed93 7b00 	vldr	d7, [r3]
 8007364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007366:	2b00      	cmp	r3, #0
 8007368:	ed8d 7b02 	vstr	d7, [sp, #8]
 800736c:	f280 80d8 	bge.w	8007520 <_dtoa_r+0x610>
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	f300 80d4 	bgt.w	8007520 <_dtoa_r+0x610>
 8007378:	f040 825e 	bne.w	8007838 <_dtoa_r+0x928>
 800737c:	2200      	movs	r2, #0
 800737e:	4b66      	ldr	r3, [pc, #408]	; (8007518 <_dtoa_r+0x608>)
 8007380:	ec51 0b17 	vmov	r0, r1, d7
 8007384:	f7f9 f960 	bl	8000648 <__aeabi_dmul>
 8007388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738c:	f7f9 fbe2 	bl	8000b54 <__aeabi_dcmpge>
 8007390:	464f      	mov	r7, r9
 8007392:	464e      	mov	r6, r9
 8007394:	2800      	cmp	r0, #0
 8007396:	f040 8234 	bne.w	8007802 <_dtoa_r+0x8f2>
 800739a:	2331      	movs	r3, #49	; 0x31
 800739c:	f10b 0501 	add.w	r5, fp, #1
 80073a0:	f88b 3000 	strb.w	r3, [fp]
 80073a4:	f10a 0a01 	add.w	sl, sl, #1
 80073a8:	e22f      	b.n	800780a <_dtoa_r+0x8fa>
 80073aa:	07f2      	lsls	r2, r6, #31
 80073ac:	d505      	bpl.n	80073ba <_dtoa_r+0x4aa>
 80073ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b2:	f7f9 f949 	bl	8000648 <__aeabi_dmul>
 80073b6:	3501      	adds	r5, #1
 80073b8:	2301      	movs	r3, #1
 80073ba:	1076      	asrs	r6, r6, #1
 80073bc:	3708      	adds	r7, #8
 80073be:	e772      	b.n	80072a6 <_dtoa_r+0x396>
 80073c0:	2502      	movs	r5, #2
 80073c2:	e774      	b.n	80072ae <_dtoa_r+0x39e>
 80073c4:	f8cd a020 	str.w	sl, [sp, #32]
 80073c8:	464f      	mov	r7, r9
 80073ca:	e791      	b.n	80072f0 <_dtoa_r+0x3e0>
 80073cc:	4b4d      	ldr	r3, [pc, #308]	; (8007504 <_dtoa_r+0x5f4>)
 80073ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d047      	beq.n	800746c <_dtoa_r+0x55c>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	2000      	movs	r0, #0
 80073e2:	494e      	ldr	r1, [pc, #312]	; (800751c <_dtoa_r+0x60c>)
 80073e4:	f7f9 fa5a 	bl	800089c <__aeabi_ddiv>
 80073e8:	462a      	mov	r2, r5
 80073ea:	4633      	mov	r3, r6
 80073ec:	f7f8 ff74 	bl	80002d8 <__aeabi_dsub>
 80073f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073f4:	465d      	mov	r5, fp
 80073f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073fa:	f7f9 fbd5 	bl	8000ba8 <__aeabi_d2iz>
 80073fe:	4606      	mov	r6, r0
 8007400:	f7f9 f8b8 	bl	8000574 <__aeabi_i2d>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800740c:	f7f8 ff64 	bl	80002d8 <__aeabi_dsub>
 8007410:	3630      	adds	r6, #48	; 0x30
 8007412:	f805 6b01 	strb.w	r6, [r5], #1
 8007416:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800741a:	e9cd 0100 	strd	r0, r1, [sp]
 800741e:	f7f9 fb85 	bl	8000b2c <__aeabi_dcmplt>
 8007422:	2800      	cmp	r0, #0
 8007424:	d163      	bne.n	80074ee <_dtoa_r+0x5de>
 8007426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742a:	2000      	movs	r0, #0
 800742c:	4937      	ldr	r1, [pc, #220]	; (800750c <_dtoa_r+0x5fc>)
 800742e:	f7f8 ff53 	bl	80002d8 <__aeabi_dsub>
 8007432:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007436:	f7f9 fb79 	bl	8000b2c <__aeabi_dcmplt>
 800743a:	2800      	cmp	r0, #0
 800743c:	f040 80b7 	bne.w	80075ae <_dtoa_r+0x69e>
 8007440:	eba5 030b 	sub.w	r3, r5, fp
 8007444:	429f      	cmp	r7, r3
 8007446:	f77f af7c 	ble.w	8007342 <_dtoa_r+0x432>
 800744a:	2200      	movs	r2, #0
 800744c:	4b30      	ldr	r3, [pc, #192]	; (8007510 <_dtoa_r+0x600>)
 800744e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007452:	f7f9 f8f9 	bl	8000648 <__aeabi_dmul>
 8007456:	2200      	movs	r2, #0
 8007458:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800745c:	4b2c      	ldr	r3, [pc, #176]	; (8007510 <_dtoa_r+0x600>)
 800745e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007462:	f7f9 f8f1 	bl	8000648 <__aeabi_dmul>
 8007466:	e9cd 0100 	strd	r0, r1, [sp]
 800746a:	e7c4      	b.n	80073f6 <_dtoa_r+0x4e6>
 800746c:	462a      	mov	r2, r5
 800746e:	4633      	mov	r3, r6
 8007470:	f7f9 f8ea 	bl	8000648 <__aeabi_dmul>
 8007474:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007478:	eb0b 0507 	add.w	r5, fp, r7
 800747c:	465e      	mov	r6, fp
 800747e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007482:	f7f9 fb91 	bl	8000ba8 <__aeabi_d2iz>
 8007486:	4607      	mov	r7, r0
 8007488:	f7f9 f874 	bl	8000574 <__aeabi_i2d>
 800748c:	3730      	adds	r7, #48	; 0x30
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007496:	f7f8 ff1f 	bl	80002d8 <__aeabi_dsub>
 800749a:	f806 7b01 	strb.w	r7, [r6], #1
 800749e:	42ae      	cmp	r6, r5
 80074a0:	e9cd 0100 	strd	r0, r1, [sp]
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	d126      	bne.n	80074f8 <_dtoa_r+0x5e8>
 80074aa:	4b1c      	ldr	r3, [pc, #112]	; (800751c <_dtoa_r+0x60c>)
 80074ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074b0:	f7f8 ff14 	bl	80002dc <__adddf3>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074bc:	f7f9 fb54 	bl	8000b68 <__aeabi_dcmpgt>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d174      	bne.n	80075ae <_dtoa_r+0x69e>
 80074c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074c8:	2000      	movs	r0, #0
 80074ca:	4914      	ldr	r1, [pc, #80]	; (800751c <_dtoa_r+0x60c>)
 80074cc:	f7f8 ff04 	bl	80002d8 <__aeabi_dsub>
 80074d0:	4602      	mov	r2, r0
 80074d2:	460b      	mov	r3, r1
 80074d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074d8:	f7f9 fb28 	bl	8000b2c <__aeabi_dcmplt>
 80074dc:	2800      	cmp	r0, #0
 80074de:	f43f af30 	beq.w	8007342 <_dtoa_r+0x432>
 80074e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074e6:	2b30      	cmp	r3, #48	; 0x30
 80074e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80074ec:	d002      	beq.n	80074f4 <_dtoa_r+0x5e4>
 80074ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80074f2:	e04a      	b.n	800758a <_dtoa_r+0x67a>
 80074f4:	4615      	mov	r5, r2
 80074f6:	e7f4      	b.n	80074e2 <_dtoa_r+0x5d2>
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <_dtoa_r+0x600>)
 80074fa:	f7f9 f8a5 	bl	8000648 <__aeabi_dmul>
 80074fe:	e9cd 0100 	strd	r0, r1, [sp]
 8007502:	e7bc      	b.n	800747e <_dtoa_r+0x56e>
 8007504:	08008948 	.word	0x08008948
 8007508:	08008920 	.word	0x08008920
 800750c:	3ff00000 	.word	0x3ff00000
 8007510:	40240000 	.word	0x40240000
 8007514:	401c0000 	.word	0x401c0000
 8007518:	40140000 	.word	0x40140000
 800751c:	3fe00000 	.word	0x3fe00000
 8007520:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007524:	465d      	mov	r5, fp
 8007526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f9 f9b5 	bl	800089c <__aeabi_ddiv>
 8007532:	f7f9 fb39 	bl	8000ba8 <__aeabi_d2iz>
 8007536:	4680      	mov	r8, r0
 8007538:	f7f9 f81c 	bl	8000574 <__aeabi_i2d>
 800753c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007540:	f7f9 f882 	bl	8000648 <__aeabi_dmul>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007550:	f7f8 fec2 	bl	80002d8 <__aeabi_dsub>
 8007554:	f805 6b01 	strb.w	r6, [r5], #1
 8007558:	eba5 060b 	sub.w	r6, r5, fp
 800755c:	45b1      	cmp	r9, r6
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	d139      	bne.n	80075d8 <_dtoa_r+0x6c8>
 8007564:	f7f8 feba 	bl	80002dc <__adddf3>
 8007568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800756c:	4606      	mov	r6, r0
 800756e:	460f      	mov	r7, r1
 8007570:	f7f9 fafa 	bl	8000b68 <__aeabi_dcmpgt>
 8007574:	b9c8      	cbnz	r0, 80075aa <_dtoa_r+0x69a>
 8007576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f9 facb 	bl	8000b18 <__aeabi_dcmpeq>
 8007582:	b110      	cbz	r0, 800758a <_dtoa_r+0x67a>
 8007584:	f018 0f01 	tst.w	r8, #1
 8007588:	d10f      	bne.n	80075aa <_dtoa_r+0x69a>
 800758a:	9904      	ldr	r1, [sp, #16]
 800758c:	4620      	mov	r0, r4
 800758e:	f000 facc 	bl	8007b2a <_Bfree>
 8007592:	2300      	movs	r3, #0
 8007594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007596:	702b      	strb	r3, [r5, #0]
 8007598:	f10a 0301 	add.w	r3, sl, #1
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8241 	beq.w	8007a28 <_dtoa_r+0xb18>
 80075a6:	601d      	str	r5, [r3, #0]
 80075a8:	e23e      	b.n	8007a28 <_dtoa_r+0xb18>
 80075aa:	f8cd a020 	str.w	sl, [sp, #32]
 80075ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075b2:	2a39      	cmp	r2, #57	; 0x39
 80075b4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80075b8:	d108      	bne.n	80075cc <_dtoa_r+0x6bc>
 80075ba:	459b      	cmp	fp, r3
 80075bc:	d10a      	bne.n	80075d4 <_dtoa_r+0x6c4>
 80075be:	9b08      	ldr	r3, [sp, #32]
 80075c0:	3301      	adds	r3, #1
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	2330      	movs	r3, #48	; 0x30
 80075c6:	f88b 3000 	strb.w	r3, [fp]
 80075ca:	465b      	mov	r3, fp
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	3201      	adds	r2, #1
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e78c      	b.n	80074ee <_dtoa_r+0x5de>
 80075d4:	461d      	mov	r5, r3
 80075d6:	e7ea      	b.n	80075ae <_dtoa_r+0x69e>
 80075d8:	2200      	movs	r2, #0
 80075da:	4b9b      	ldr	r3, [pc, #620]	; (8007848 <_dtoa_r+0x938>)
 80075dc:	f7f9 f834 	bl	8000648 <__aeabi_dmul>
 80075e0:	2200      	movs	r2, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4606      	mov	r6, r0
 80075e6:	460f      	mov	r7, r1
 80075e8:	f7f9 fa96 	bl	8000b18 <__aeabi_dcmpeq>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d09a      	beq.n	8007526 <_dtoa_r+0x616>
 80075f0:	e7cb      	b.n	800758a <_dtoa_r+0x67a>
 80075f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	f000 808b 	beq.w	8007710 <_dtoa_r+0x800>
 80075fa:	9a06      	ldr	r2, [sp, #24]
 80075fc:	2a01      	cmp	r2, #1
 80075fe:	dc6e      	bgt.n	80076de <_dtoa_r+0x7ce>
 8007600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007602:	2a00      	cmp	r2, #0
 8007604:	d067      	beq.n	80076d6 <_dtoa_r+0x7c6>
 8007606:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800760a:	9f07      	ldr	r7, [sp, #28]
 800760c:	9d05      	ldr	r5, [sp, #20]
 800760e:	9a05      	ldr	r2, [sp, #20]
 8007610:	2101      	movs	r1, #1
 8007612:	441a      	add	r2, r3
 8007614:	4620      	mov	r0, r4
 8007616:	9205      	str	r2, [sp, #20]
 8007618:	4498      	add	r8, r3
 800761a:	f000 fb26 	bl	8007c6a <__i2b>
 800761e:	4606      	mov	r6, r0
 8007620:	2d00      	cmp	r5, #0
 8007622:	dd0c      	ble.n	800763e <_dtoa_r+0x72e>
 8007624:	f1b8 0f00 	cmp.w	r8, #0
 8007628:	dd09      	ble.n	800763e <_dtoa_r+0x72e>
 800762a:	4545      	cmp	r5, r8
 800762c:	9a05      	ldr	r2, [sp, #20]
 800762e:	462b      	mov	r3, r5
 8007630:	bfa8      	it	ge
 8007632:	4643      	movge	r3, r8
 8007634:	1ad2      	subs	r2, r2, r3
 8007636:	9205      	str	r2, [sp, #20]
 8007638:	1aed      	subs	r5, r5, r3
 800763a:	eba8 0803 	sub.w	r8, r8, r3
 800763e:	9b07      	ldr	r3, [sp, #28]
 8007640:	b1eb      	cbz	r3, 800767e <_dtoa_r+0x76e>
 8007642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d067      	beq.n	8007718 <_dtoa_r+0x808>
 8007648:	b18f      	cbz	r7, 800766e <_dtoa_r+0x75e>
 800764a:	4631      	mov	r1, r6
 800764c:	463a      	mov	r2, r7
 800764e:	4620      	mov	r0, r4
 8007650:	f000 fbaa 	bl	8007da8 <__pow5mult>
 8007654:	9a04      	ldr	r2, [sp, #16]
 8007656:	4601      	mov	r1, r0
 8007658:	4606      	mov	r6, r0
 800765a:	4620      	mov	r0, r4
 800765c:	f000 fb0e 	bl	8007c7c <__multiply>
 8007660:	9904      	ldr	r1, [sp, #16]
 8007662:	9008      	str	r0, [sp, #32]
 8007664:	4620      	mov	r0, r4
 8007666:	f000 fa60 	bl	8007b2a <_Bfree>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	9304      	str	r3, [sp, #16]
 800766e:	9b07      	ldr	r3, [sp, #28]
 8007670:	1bda      	subs	r2, r3, r7
 8007672:	d004      	beq.n	800767e <_dtoa_r+0x76e>
 8007674:	9904      	ldr	r1, [sp, #16]
 8007676:	4620      	mov	r0, r4
 8007678:	f000 fb96 	bl	8007da8 <__pow5mult>
 800767c:	9004      	str	r0, [sp, #16]
 800767e:	2101      	movs	r1, #1
 8007680:	4620      	mov	r0, r4
 8007682:	f000 faf2 	bl	8007c6a <__i2b>
 8007686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007688:	4607      	mov	r7, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 81d0 	beq.w	8007a30 <_dtoa_r+0xb20>
 8007690:	461a      	mov	r2, r3
 8007692:	4601      	mov	r1, r0
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fb87 	bl	8007da8 <__pow5mult>
 800769a:	9b06      	ldr	r3, [sp, #24]
 800769c:	2b01      	cmp	r3, #1
 800769e:	4607      	mov	r7, r0
 80076a0:	dc40      	bgt.n	8007724 <_dtoa_r+0x814>
 80076a2:	9b00      	ldr	r3, [sp, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d139      	bne.n	800771c <_dtoa_r+0x80c>
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d136      	bne.n	8007720 <_dtoa_r+0x810>
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076b8:	0d1b      	lsrs	r3, r3, #20
 80076ba:	051b      	lsls	r3, r3, #20
 80076bc:	b12b      	cbz	r3, 80076ca <_dtoa_r+0x7ba>
 80076be:	9b05      	ldr	r3, [sp, #20]
 80076c0:	3301      	adds	r3, #1
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	f108 0801 	add.w	r8, r8, #1
 80076c8:	2301      	movs	r3, #1
 80076ca:	9307      	str	r3, [sp, #28]
 80076cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d12a      	bne.n	8007728 <_dtoa_r+0x818>
 80076d2:	2001      	movs	r0, #1
 80076d4:	e030      	b.n	8007738 <_dtoa_r+0x828>
 80076d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076dc:	e795      	b.n	800760a <_dtoa_r+0x6fa>
 80076de:	9b07      	ldr	r3, [sp, #28]
 80076e0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80076e4:	42bb      	cmp	r3, r7
 80076e6:	bfbf      	itttt	lt
 80076e8:	9b07      	ldrlt	r3, [sp, #28]
 80076ea:	9707      	strlt	r7, [sp, #28]
 80076ec:	1afa      	sublt	r2, r7, r3
 80076ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80076f0:	bfbb      	ittet	lt
 80076f2:	189b      	addlt	r3, r3, r2
 80076f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80076f6:	1bdf      	subge	r7, r3, r7
 80076f8:	2700      	movlt	r7, #0
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	bfb5      	itete	lt
 8007700:	9b05      	ldrlt	r3, [sp, #20]
 8007702:	9d05      	ldrge	r5, [sp, #20]
 8007704:	eba3 0509 	sublt.w	r5, r3, r9
 8007708:	464b      	movge	r3, r9
 800770a:	bfb8      	it	lt
 800770c:	2300      	movlt	r3, #0
 800770e:	e77e      	b.n	800760e <_dtoa_r+0x6fe>
 8007710:	9f07      	ldr	r7, [sp, #28]
 8007712:	9d05      	ldr	r5, [sp, #20]
 8007714:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007716:	e783      	b.n	8007620 <_dtoa_r+0x710>
 8007718:	9a07      	ldr	r2, [sp, #28]
 800771a:	e7ab      	b.n	8007674 <_dtoa_r+0x764>
 800771c:	2300      	movs	r3, #0
 800771e:	e7d4      	b.n	80076ca <_dtoa_r+0x7ba>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	e7d2      	b.n	80076ca <_dtoa_r+0x7ba>
 8007724:	2300      	movs	r3, #0
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800772e:	6918      	ldr	r0, [r3, #16]
 8007730:	f000 fa4d 	bl	8007bce <__hi0bits>
 8007734:	f1c0 0020 	rsb	r0, r0, #32
 8007738:	4440      	add	r0, r8
 800773a:	f010 001f 	ands.w	r0, r0, #31
 800773e:	d047      	beq.n	80077d0 <_dtoa_r+0x8c0>
 8007740:	f1c0 0320 	rsb	r3, r0, #32
 8007744:	2b04      	cmp	r3, #4
 8007746:	dd3b      	ble.n	80077c0 <_dtoa_r+0x8b0>
 8007748:	9b05      	ldr	r3, [sp, #20]
 800774a:	f1c0 001c 	rsb	r0, r0, #28
 800774e:	4403      	add	r3, r0
 8007750:	9305      	str	r3, [sp, #20]
 8007752:	4405      	add	r5, r0
 8007754:	4480      	add	r8, r0
 8007756:	9b05      	ldr	r3, [sp, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	dd05      	ble.n	8007768 <_dtoa_r+0x858>
 800775c:	461a      	mov	r2, r3
 800775e:	9904      	ldr	r1, [sp, #16]
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fb6f 	bl	8007e44 <__lshift>
 8007766:	9004      	str	r0, [sp, #16]
 8007768:	f1b8 0f00 	cmp.w	r8, #0
 800776c:	dd05      	ble.n	800777a <_dtoa_r+0x86a>
 800776e:	4639      	mov	r1, r7
 8007770:	4642      	mov	r2, r8
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fb66 	bl	8007e44 <__lshift>
 8007778:	4607      	mov	r7, r0
 800777a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800777c:	b353      	cbz	r3, 80077d4 <_dtoa_r+0x8c4>
 800777e:	4639      	mov	r1, r7
 8007780:	9804      	ldr	r0, [sp, #16]
 8007782:	f000 fbb3 	bl	8007eec <__mcmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	da24      	bge.n	80077d4 <_dtoa_r+0x8c4>
 800778a:	2300      	movs	r3, #0
 800778c:	220a      	movs	r2, #10
 800778e:	9904      	ldr	r1, [sp, #16]
 8007790:	4620      	mov	r0, r4
 8007792:	f000 f9e1 	bl	8007b58 <__multadd>
 8007796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007798:	9004      	str	r0, [sp, #16]
 800779a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 814d 	beq.w	8007a3e <_dtoa_r+0xb2e>
 80077a4:	2300      	movs	r3, #0
 80077a6:	4631      	mov	r1, r6
 80077a8:	220a      	movs	r2, #10
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 f9d4 	bl	8007b58 <__multadd>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	4606      	mov	r6, r0
 80077b6:	dc4f      	bgt.n	8007858 <_dtoa_r+0x948>
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	dd4c      	ble.n	8007858 <_dtoa_r+0x948>
 80077be:	e011      	b.n	80077e4 <_dtoa_r+0x8d4>
 80077c0:	d0c9      	beq.n	8007756 <_dtoa_r+0x846>
 80077c2:	9a05      	ldr	r2, [sp, #20]
 80077c4:	331c      	adds	r3, #28
 80077c6:	441a      	add	r2, r3
 80077c8:	9205      	str	r2, [sp, #20]
 80077ca:	441d      	add	r5, r3
 80077cc:	4498      	add	r8, r3
 80077ce:	e7c2      	b.n	8007756 <_dtoa_r+0x846>
 80077d0:	4603      	mov	r3, r0
 80077d2:	e7f6      	b.n	80077c2 <_dtoa_r+0x8b2>
 80077d4:	f1b9 0f00 	cmp.w	r9, #0
 80077d8:	dc38      	bgt.n	800784c <_dtoa_r+0x93c>
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	dd35      	ble.n	800784c <_dtoa_r+0x93c>
 80077e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80077e4:	9b02      	ldr	r3, [sp, #8]
 80077e6:	b963      	cbnz	r3, 8007802 <_dtoa_r+0x8f2>
 80077e8:	4639      	mov	r1, r7
 80077ea:	2205      	movs	r2, #5
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 f9b3 	bl	8007b58 <__multadd>
 80077f2:	4601      	mov	r1, r0
 80077f4:	4607      	mov	r7, r0
 80077f6:	9804      	ldr	r0, [sp, #16]
 80077f8:	f000 fb78 	bl	8007eec <__mcmp>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f73f adcc 	bgt.w	800739a <_dtoa_r+0x48a>
 8007802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007804:	465d      	mov	r5, fp
 8007806:	ea6f 0a03 	mvn.w	sl, r3
 800780a:	f04f 0900 	mov.w	r9, #0
 800780e:	4639      	mov	r1, r7
 8007810:	4620      	mov	r0, r4
 8007812:	f000 f98a 	bl	8007b2a <_Bfree>
 8007816:	2e00      	cmp	r6, #0
 8007818:	f43f aeb7 	beq.w	800758a <_dtoa_r+0x67a>
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	d005      	beq.n	800782e <_dtoa_r+0x91e>
 8007822:	45b1      	cmp	r9, r6
 8007824:	d003      	beq.n	800782e <_dtoa_r+0x91e>
 8007826:	4649      	mov	r1, r9
 8007828:	4620      	mov	r0, r4
 800782a:	f000 f97e 	bl	8007b2a <_Bfree>
 800782e:	4631      	mov	r1, r6
 8007830:	4620      	mov	r0, r4
 8007832:	f000 f97a 	bl	8007b2a <_Bfree>
 8007836:	e6a8      	b.n	800758a <_dtoa_r+0x67a>
 8007838:	2700      	movs	r7, #0
 800783a:	463e      	mov	r6, r7
 800783c:	e7e1      	b.n	8007802 <_dtoa_r+0x8f2>
 800783e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007842:	463e      	mov	r6, r7
 8007844:	e5a9      	b.n	800739a <_dtoa_r+0x48a>
 8007846:	bf00      	nop
 8007848:	40240000 	.word	0x40240000
 800784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 80fa 	beq.w	8007a4c <_dtoa_r+0xb3c>
 8007858:	2d00      	cmp	r5, #0
 800785a:	dd05      	ble.n	8007868 <_dtoa_r+0x958>
 800785c:	4631      	mov	r1, r6
 800785e:	462a      	mov	r2, r5
 8007860:	4620      	mov	r0, r4
 8007862:	f000 faef 	bl	8007e44 <__lshift>
 8007866:	4606      	mov	r6, r0
 8007868:	9b07      	ldr	r3, [sp, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d04c      	beq.n	8007908 <_dtoa_r+0x9f8>
 800786e:	6871      	ldr	r1, [r6, #4]
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f926 	bl	8007ac2 <_Balloc>
 8007876:	6932      	ldr	r2, [r6, #16]
 8007878:	3202      	adds	r2, #2
 800787a:	4605      	mov	r5, r0
 800787c:	0092      	lsls	r2, r2, #2
 800787e:	f106 010c 	add.w	r1, r6, #12
 8007882:	300c      	adds	r0, #12
 8007884:	f000 f912 	bl	8007aac <memcpy>
 8007888:	2201      	movs	r2, #1
 800788a:	4629      	mov	r1, r5
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fad9 	bl	8007e44 <__lshift>
 8007892:	9b00      	ldr	r3, [sp, #0]
 8007894:	f8cd b014 	str.w	fp, [sp, #20]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	46b1      	mov	r9, r6
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	4606      	mov	r6, r0
 80078a2:	4639      	mov	r1, r7
 80078a4:	9804      	ldr	r0, [sp, #16]
 80078a6:	f7ff faa7 	bl	8006df8 <quorem>
 80078aa:	4649      	mov	r1, r9
 80078ac:	4605      	mov	r5, r0
 80078ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80078b2:	9804      	ldr	r0, [sp, #16]
 80078b4:	f000 fb1a 	bl	8007eec <__mcmp>
 80078b8:	4632      	mov	r2, r6
 80078ba:	9000      	str	r0, [sp, #0]
 80078bc:	4639      	mov	r1, r7
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 fb2e 	bl	8007f20 <__mdiff>
 80078c4:	68c3      	ldr	r3, [r0, #12]
 80078c6:	4602      	mov	r2, r0
 80078c8:	bb03      	cbnz	r3, 800790c <_dtoa_r+0x9fc>
 80078ca:	4601      	mov	r1, r0
 80078cc:	9008      	str	r0, [sp, #32]
 80078ce:	9804      	ldr	r0, [sp, #16]
 80078d0:	f000 fb0c 	bl	8007eec <__mcmp>
 80078d4:	9a08      	ldr	r2, [sp, #32]
 80078d6:	4603      	mov	r3, r0
 80078d8:	4611      	mov	r1, r2
 80078da:	4620      	mov	r0, r4
 80078dc:	9308      	str	r3, [sp, #32]
 80078de:	f000 f924 	bl	8007b2a <_Bfree>
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	b9a3      	cbnz	r3, 8007910 <_dtoa_r+0xa00>
 80078e6:	9a06      	ldr	r2, [sp, #24]
 80078e8:	b992      	cbnz	r2, 8007910 <_dtoa_r+0xa00>
 80078ea:	9a07      	ldr	r2, [sp, #28]
 80078ec:	b982      	cbnz	r2, 8007910 <_dtoa_r+0xa00>
 80078ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80078f2:	d029      	beq.n	8007948 <_dtoa_r+0xa38>
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	dd01      	ble.n	80078fe <_dtoa_r+0x9ee>
 80078fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80078fe:	9b05      	ldr	r3, [sp, #20]
 8007900:	1c5d      	adds	r5, r3, #1
 8007902:	f883 8000 	strb.w	r8, [r3]
 8007906:	e782      	b.n	800780e <_dtoa_r+0x8fe>
 8007908:	4630      	mov	r0, r6
 800790a:	e7c2      	b.n	8007892 <_dtoa_r+0x982>
 800790c:	2301      	movs	r3, #1
 800790e:	e7e3      	b.n	80078d8 <_dtoa_r+0x9c8>
 8007910:	9a00      	ldr	r2, [sp, #0]
 8007912:	2a00      	cmp	r2, #0
 8007914:	db04      	blt.n	8007920 <_dtoa_r+0xa10>
 8007916:	d125      	bne.n	8007964 <_dtoa_r+0xa54>
 8007918:	9a06      	ldr	r2, [sp, #24]
 800791a:	bb1a      	cbnz	r2, 8007964 <_dtoa_r+0xa54>
 800791c:	9a07      	ldr	r2, [sp, #28]
 800791e:	bb0a      	cbnz	r2, 8007964 <_dtoa_r+0xa54>
 8007920:	2b00      	cmp	r3, #0
 8007922:	ddec      	ble.n	80078fe <_dtoa_r+0x9ee>
 8007924:	2201      	movs	r2, #1
 8007926:	9904      	ldr	r1, [sp, #16]
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fa8b 	bl	8007e44 <__lshift>
 800792e:	4639      	mov	r1, r7
 8007930:	9004      	str	r0, [sp, #16]
 8007932:	f000 fadb 	bl	8007eec <__mcmp>
 8007936:	2800      	cmp	r0, #0
 8007938:	dc03      	bgt.n	8007942 <_dtoa_r+0xa32>
 800793a:	d1e0      	bne.n	80078fe <_dtoa_r+0x9ee>
 800793c:	f018 0f01 	tst.w	r8, #1
 8007940:	d0dd      	beq.n	80078fe <_dtoa_r+0x9ee>
 8007942:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007946:	d1d8      	bne.n	80078fa <_dtoa_r+0x9ea>
 8007948:	9b05      	ldr	r3, [sp, #20]
 800794a:	9a05      	ldr	r2, [sp, #20]
 800794c:	1c5d      	adds	r5, r3, #1
 800794e:	2339      	movs	r3, #57	; 0x39
 8007950:	7013      	strb	r3, [r2, #0]
 8007952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007956:	2b39      	cmp	r3, #57	; 0x39
 8007958:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800795c:	d04f      	beq.n	80079fe <_dtoa_r+0xaee>
 800795e:	3301      	adds	r3, #1
 8007960:	7013      	strb	r3, [r2, #0]
 8007962:	e754      	b.n	800780e <_dtoa_r+0x8fe>
 8007964:	9a05      	ldr	r2, [sp, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f102 0501 	add.w	r5, r2, #1
 800796c:	dd06      	ble.n	800797c <_dtoa_r+0xa6c>
 800796e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007972:	d0e9      	beq.n	8007948 <_dtoa_r+0xa38>
 8007974:	f108 0801 	add.w	r8, r8, #1
 8007978:	9b05      	ldr	r3, [sp, #20]
 800797a:	e7c2      	b.n	8007902 <_dtoa_r+0x9f2>
 800797c:	9a02      	ldr	r2, [sp, #8]
 800797e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007982:	eba5 030b 	sub.w	r3, r5, fp
 8007986:	4293      	cmp	r3, r2
 8007988:	d021      	beq.n	80079ce <_dtoa_r+0xabe>
 800798a:	2300      	movs	r3, #0
 800798c:	220a      	movs	r2, #10
 800798e:	9904      	ldr	r1, [sp, #16]
 8007990:	4620      	mov	r0, r4
 8007992:	f000 f8e1 	bl	8007b58 <__multadd>
 8007996:	45b1      	cmp	r9, r6
 8007998:	9004      	str	r0, [sp, #16]
 800799a:	f04f 0300 	mov.w	r3, #0
 800799e:	f04f 020a 	mov.w	r2, #10
 80079a2:	4649      	mov	r1, r9
 80079a4:	4620      	mov	r0, r4
 80079a6:	d105      	bne.n	80079b4 <_dtoa_r+0xaa4>
 80079a8:	f000 f8d6 	bl	8007b58 <__multadd>
 80079ac:	4681      	mov	r9, r0
 80079ae:	4606      	mov	r6, r0
 80079b0:	9505      	str	r5, [sp, #20]
 80079b2:	e776      	b.n	80078a2 <_dtoa_r+0x992>
 80079b4:	f000 f8d0 	bl	8007b58 <__multadd>
 80079b8:	4631      	mov	r1, r6
 80079ba:	4681      	mov	r9, r0
 80079bc:	2300      	movs	r3, #0
 80079be:	220a      	movs	r2, #10
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 f8c9 	bl	8007b58 <__multadd>
 80079c6:	4606      	mov	r6, r0
 80079c8:	e7f2      	b.n	80079b0 <_dtoa_r+0xaa0>
 80079ca:	f04f 0900 	mov.w	r9, #0
 80079ce:	2201      	movs	r2, #1
 80079d0:	9904      	ldr	r1, [sp, #16]
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fa36 	bl	8007e44 <__lshift>
 80079d8:	4639      	mov	r1, r7
 80079da:	9004      	str	r0, [sp, #16]
 80079dc:	f000 fa86 	bl	8007eec <__mcmp>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	dcb6      	bgt.n	8007952 <_dtoa_r+0xa42>
 80079e4:	d102      	bne.n	80079ec <_dtoa_r+0xadc>
 80079e6:	f018 0f01 	tst.w	r8, #1
 80079ea:	d1b2      	bne.n	8007952 <_dtoa_r+0xa42>
 80079ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079f0:	2b30      	cmp	r3, #48	; 0x30
 80079f2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079f6:	f47f af0a 	bne.w	800780e <_dtoa_r+0x8fe>
 80079fa:	4615      	mov	r5, r2
 80079fc:	e7f6      	b.n	80079ec <_dtoa_r+0xadc>
 80079fe:	4593      	cmp	fp, r2
 8007a00:	d105      	bne.n	8007a0e <_dtoa_r+0xafe>
 8007a02:	2331      	movs	r3, #49	; 0x31
 8007a04:	f10a 0a01 	add.w	sl, sl, #1
 8007a08:	f88b 3000 	strb.w	r3, [fp]
 8007a0c:	e6ff      	b.n	800780e <_dtoa_r+0x8fe>
 8007a0e:	4615      	mov	r5, r2
 8007a10:	e79f      	b.n	8007952 <_dtoa_r+0xa42>
 8007a12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007a78 <_dtoa_r+0xb68>
 8007a16:	e007      	b.n	8007a28 <_dtoa_r+0xb18>
 8007a18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007a7c <_dtoa_r+0xb6c>
 8007a1e:	b11b      	cbz	r3, 8007a28 <_dtoa_r+0xb18>
 8007a20:	f10b 0308 	add.w	r3, fp, #8
 8007a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	4658      	mov	r0, fp
 8007a2a:	b017      	add	sp, #92	; 0x5c
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	9b06      	ldr	r3, [sp, #24]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	f77f ae35 	ble.w	80076a2 <_dtoa_r+0x792>
 8007a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a3a:	9307      	str	r3, [sp, #28]
 8007a3c:	e649      	b.n	80076d2 <_dtoa_r+0x7c2>
 8007a3e:	9b02      	ldr	r3, [sp, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dc03      	bgt.n	8007a4c <_dtoa_r+0xb3c>
 8007a44:	9b06      	ldr	r3, [sp, #24]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	f73f aecc 	bgt.w	80077e4 <_dtoa_r+0x8d4>
 8007a4c:	465d      	mov	r5, fp
 8007a4e:	4639      	mov	r1, r7
 8007a50:	9804      	ldr	r0, [sp, #16]
 8007a52:	f7ff f9d1 	bl	8006df8 <quorem>
 8007a56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a5a:	f805 8b01 	strb.w	r8, [r5], #1
 8007a5e:	9a02      	ldr	r2, [sp, #8]
 8007a60:	eba5 030b 	sub.w	r3, r5, fp
 8007a64:	429a      	cmp	r2, r3
 8007a66:	ddb0      	ble.n	80079ca <_dtoa_r+0xaba>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	9904      	ldr	r1, [sp, #16]
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 f872 	bl	8007b58 <__multadd>
 8007a74:	9004      	str	r0, [sp, #16]
 8007a76:	e7ea      	b.n	8007a4e <_dtoa_r+0xb3e>
 8007a78:	080088e8 	.word	0x080088e8
 8007a7c:	0800890c 	.word	0x0800890c

08007a80 <_localeconv_r>:
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <_localeconv_r+0x14>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6a18      	ldr	r0, [r3, #32]
 8007a86:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <_localeconv_r+0x18>)
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	bf08      	it	eq
 8007a8c:	4618      	moveq	r0, r3
 8007a8e:	30f0      	adds	r0, #240	; 0xf0
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000048 	.word	0x20000048
 8007a98:	200000ac 	.word	0x200000ac

08007a9c <malloc>:
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <malloc+0xc>)
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	f000 bb45 	b.w	8008130 <_malloc_r>
 8007aa6:	bf00      	nop
 8007aa8:	20000048 	.word	0x20000048

08007aac <memcpy>:
 8007aac:	b510      	push	{r4, lr}
 8007aae:	1e43      	subs	r3, r0, #1
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	d100      	bne.n	8007ab8 <memcpy+0xc>
 8007ab6:	bd10      	pop	{r4, pc}
 8007ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007abc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac0:	e7f7      	b.n	8007ab2 <memcpy+0x6>

08007ac2 <_Balloc>:
 8007ac2:	b570      	push	{r4, r5, r6, lr}
 8007ac4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460e      	mov	r6, r1
 8007aca:	b93d      	cbnz	r5, 8007adc <_Balloc+0x1a>
 8007acc:	2010      	movs	r0, #16
 8007ace:	f7ff ffe5 	bl	8007a9c <malloc>
 8007ad2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ad4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ad8:	6005      	str	r5, [r0, #0]
 8007ada:	60c5      	str	r5, [r0, #12]
 8007adc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ade:	68eb      	ldr	r3, [r5, #12]
 8007ae0:	b183      	cbz	r3, 8007b04 <_Balloc+0x42>
 8007ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007aea:	b9b8      	cbnz	r0, 8007b1c <_Balloc+0x5a>
 8007aec:	2101      	movs	r1, #1
 8007aee:	fa01 f506 	lsl.w	r5, r1, r6
 8007af2:	1d6a      	adds	r2, r5, #5
 8007af4:	0092      	lsls	r2, r2, #2
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 fabe 	bl	8008078 <_calloc_r>
 8007afc:	b160      	cbz	r0, 8007b18 <_Balloc+0x56>
 8007afe:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b02:	e00e      	b.n	8007b22 <_Balloc+0x60>
 8007b04:	2221      	movs	r2, #33	; 0x21
 8007b06:	2104      	movs	r1, #4
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fab5 	bl	8008078 <_calloc_r>
 8007b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b10:	60e8      	str	r0, [r5, #12]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e4      	bne.n	8007ae2 <_Balloc+0x20>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	6802      	ldr	r2, [r0, #0]
 8007b1e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b22:	2300      	movs	r3, #0
 8007b24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b28:	e7f7      	b.n	8007b1a <_Balloc+0x58>

08007b2a <_Bfree>:
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460d      	mov	r5, r1
 8007b32:	b93c      	cbnz	r4, 8007b44 <_Bfree+0x1a>
 8007b34:	2010      	movs	r0, #16
 8007b36:	f7ff ffb1 	bl	8007a9c <malloc>
 8007b3a:	6270      	str	r0, [r6, #36]	; 0x24
 8007b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b40:	6004      	str	r4, [r0, #0]
 8007b42:	60c4      	str	r4, [r0, #12]
 8007b44:	b13d      	cbz	r5, 8007b56 <_Bfree+0x2c>
 8007b46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b48:	686a      	ldr	r2, [r5, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b50:	6029      	str	r1, [r5, #0]
 8007b52:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b56:	bd70      	pop	{r4, r5, r6, pc}

08007b58 <__multadd>:
 8007b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5c:	690d      	ldr	r5, [r1, #16]
 8007b5e:	461f      	mov	r7, r3
 8007b60:	4606      	mov	r6, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	f101 0c14 	add.w	ip, r1, #20
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f8dc 0000 	ldr.w	r0, [ip]
 8007b6e:	b281      	uxth	r1, r0
 8007b70:	fb02 7101 	mla	r1, r2, r1, r7
 8007b74:	0c0f      	lsrs	r7, r1, #16
 8007b76:	0c00      	lsrs	r0, r0, #16
 8007b78:	fb02 7000 	mla	r0, r2, r0, r7
 8007b7c:	b289      	uxth	r1, r1
 8007b7e:	3301      	adds	r3, #1
 8007b80:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007b84:	429d      	cmp	r5, r3
 8007b86:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b8e:	dcec      	bgt.n	8007b6a <__multadd+0x12>
 8007b90:	b1d7      	cbz	r7, 8007bc8 <__multadd+0x70>
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	42ab      	cmp	r3, r5
 8007b96:	dc12      	bgt.n	8007bbe <__multadd+0x66>
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	f7ff ff90 	bl	8007ac2 <_Balloc>
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	3202      	adds	r2, #2
 8007ba6:	f104 010c 	add.w	r1, r4, #12
 8007baa:	4680      	mov	r8, r0
 8007bac:	0092      	lsls	r2, r2, #2
 8007bae:	300c      	adds	r0, #12
 8007bb0:	f7ff ff7c 	bl	8007aac <memcpy>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff ffb7 	bl	8007b2a <_Bfree>
 8007bbc:	4644      	mov	r4, r8
 8007bbe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bc2:	3501      	adds	r5, #1
 8007bc4:	615f      	str	r7, [r3, #20]
 8007bc6:	6125      	str	r5, [r4, #16]
 8007bc8:	4620      	mov	r0, r4
 8007bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007bce <__hi0bits>:
 8007bce:	0c02      	lsrs	r2, r0, #16
 8007bd0:	0412      	lsls	r2, r2, #16
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	b9b2      	cbnz	r2, 8007c04 <__hi0bits+0x36>
 8007bd6:	0403      	lsls	r3, r0, #16
 8007bd8:	2010      	movs	r0, #16
 8007bda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007bde:	bf04      	itt	eq
 8007be0:	021b      	lsleq	r3, r3, #8
 8007be2:	3008      	addeq	r0, #8
 8007be4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007be8:	bf04      	itt	eq
 8007bea:	011b      	lsleq	r3, r3, #4
 8007bec:	3004      	addeq	r0, #4
 8007bee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bf2:	bf04      	itt	eq
 8007bf4:	009b      	lsleq	r3, r3, #2
 8007bf6:	3002      	addeq	r0, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db06      	blt.n	8007c0a <__hi0bits+0x3c>
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	d503      	bpl.n	8007c08 <__hi0bits+0x3a>
 8007c00:	3001      	adds	r0, #1
 8007c02:	4770      	bx	lr
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7e8      	b.n	8007bda <__hi0bits+0xc>
 8007c08:	2020      	movs	r0, #32
 8007c0a:	4770      	bx	lr

08007c0c <__lo0bits>:
 8007c0c:	6803      	ldr	r3, [r0, #0]
 8007c0e:	f013 0207 	ands.w	r2, r3, #7
 8007c12:	4601      	mov	r1, r0
 8007c14:	d00b      	beq.n	8007c2e <__lo0bits+0x22>
 8007c16:	07da      	lsls	r2, r3, #31
 8007c18:	d423      	bmi.n	8007c62 <__lo0bits+0x56>
 8007c1a:	0798      	lsls	r0, r3, #30
 8007c1c:	bf49      	itett	mi
 8007c1e:	085b      	lsrmi	r3, r3, #1
 8007c20:	089b      	lsrpl	r3, r3, #2
 8007c22:	2001      	movmi	r0, #1
 8007c24:	600b      	strmi	r3, [r1, #0]
 8007c26:	bf5c      	itt	pl
 8007c28:	600b      	strpl	r3, [r1, #0]
 8007c2a:	2002      	movpl	r0, #2
 8007c2c:	4770      	bx	lr
 8007c2e:	b298      	uxth	r0, r3
 8007c30:	b9a8      	cbnz	r0, 8007c5e <__lo0bits+0x52>
 8007c32:	0c1b      	lsrs	r3, r3, #16
 8007c34:	2010      	movs	r0, #16
 8007c36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c3a:	bf04      	itt	eq
 8007c3c:	0a1b      	lsreq	r3, r3, #8
 8007c3e:	3008      	addeq	r0, #8
 8007c40:	071a      	lsls	r2, r3, #28
 8007c42:	bf04      	itt	eq
 8007c44:	091b      	lsreq	r3, r3, #4
 8007c46:	3004      	addeq	r0, #4
 8007c48:	079a      	lsls	r2, r3, #30
 8007c4a:	bf04      	itt	eq
 8007c4c:	089b      	lsreq	r3, r3, #2
 8007c4e:	3002      	addeq	r0, #2
 8007c50:	07da      	lsls	r2, r3, #31
 8007c52:	d402      	bmi.n	8007c5a <__lo0bits+0x4e>
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	d006      	beq.n	8007c66 <__lo0bits+0x5a>
 8007c58:	3001      	adds	r0, #1
 8007c5a:	600b      	str	r3, [r1, #0]
 8007c5c:	4770      	bx	lr
 8007c5e:	4610      	mov	r0, r2
 8007c60:	e7e9      	b.n	8007c36 <__lo0bits+0x2a>
 8007c62:	2000      	movs	r0, #0
 8007c64:	4770      	bx	lr
 8007c66:	2020      	movs	r0, #32
 8007c68:	4770      	bx	lr

08007c6a <__i2b>:
 8007c6a:	b510      	push	{r4, lr}
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	2101      	movs	r1, #1
 8007c70:	f7ff ff27 	bl	8007ac2 <_Balloc>
 8007c74:	2201      	movs	r2, #1
 8007c76:	6144      	str	r4, [r0, #20]
 8007c78:	6102      	str	r2, [r0, #16]
 8007c7a:	bd10      	pop	{r4, pc}

08007c7c <__multiply>:
 8007c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	4614      	mov	r4, r2
 8007c82:	690a      	ldr	r2, [r1, #16]
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	bfb8      	it	lt
 8007c8a:	460b      	movlt	r3, r1
 8007c8c:	4688      	mov	r8, r1
 8007c8e:	bfbc      	itt	lt
 8007c90:	46a0      	movlt	r8, r4
 8007c92:	461c      	movlt	r4, r3
 8007c94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ca0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ca4:	eb07 0609 	add.w	r6, r7, r9
 8007ca8:	42b3      	cmp	r3, r6
 8007caa:	bfb8      	it	lt
 8007cac:	3101      	addlt	r1, #1
 8007cae:	f7ff ff08 	bl	8007ac2 <_Balloc>
 8007cb2:	f100 0514 	add.w	r5, r0, #20
 8007cb6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007cba:	462b      	mov	r3, r5
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4573      	cmp	r3, lr
 8007cc0:	d316      	bcc.n	8007cf0 <__multiply+0x74>
 8007cc2:	f104 0214 	add.w	r2, r4, #20
 8007cc6:	f108 0114 	add.w	r1, r8, #20
 8007cca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007cce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	9b00      	ldr	r3, [sp, #0]
 8007cd6:	9201      	str	r2, [sp, #4]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d80c      	bhi.n	8007cf6 <__multiply+0x7a>
 8007cdc:	2e00      	cmp	r6, #0
 8007cde:	dd03      	ble.n	8007ce8 <__multiply+0x6c>
 8007ce0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d05d      	beq.n	8007da4 <__multiply+0x128>
 8007ce8:	6106      	str	r6, [r0, #16]
 8007cea:	b003      	add	sp, #12
 8007cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	f843 2b04 	str.w	r2, [r3], #4
 8007cf4:	e7e3      	b.n	8007cbe <__multiply+0x42>
 8007cf6:	f8b2 b000 	ldrh.w	fp, [r2]
 8007cfa:	f1bb 0f00 	cmp.w	fp, #0
 8007cfe:	d023      	beq.n	8007d48 <__multiply+0xcc>
 8007d00:	4689      	mov	r9, r1
 8007d02:	46ac      	mov	ip, r5
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d0c:	f8dc a000 	ldr.w	sl, [ip]
 8007d10:	b2a3      	uxth	r3, r4
 8007d12:	fa1f fa8a 	uxth.w	sl, sl
 8007d16:	fb0b a303 	mla	r3, fp, r3, sl
 8007d1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d1e:	f8dc 4000 	ldr.w	r4, [ip]
 8007d22:	4443      	add	r3, r8
 8007d24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d28:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d2c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d30:	46e2      	mov	sl, ip
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d38:	454f      	cmp	r7, r9
 8007d3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d3e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d42:	d82b      	bhi.n	8007d9c <__multiply+0x120>
 8007d44:	f8cc 8004 	str.w	r8, [ip, #4]
 8007d48:	9b01      	ldr	r3, [sp, #4]
 8007d4a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007d4e:	3204      	adds	r2, #4
 8007d50:	f1ba 0f00 	cmp.w	sl, #0
 8007d54:	d020      	beq.n	8007d98 <__multiply+0x11c>
 8007d56:	682b      	ldr	r3, [r5, #0]
 8007d58:	4689      	mov	r9, r1
 8007d5a:	46a8      	mov	r8, r5
 8007d5c:	f04f 0b00 	mov.w	fp, #0
 8007d60:	f8b9 c000 	ldrh.w	ip, [r9]
 8007d64:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007d68:	fb0a 440c 	mla	r4, sl, ip, r4
 8007d6c:	445c      	add	r4, fp
 8007d6e:	46c4      	mov	ip, r8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d76:	f84c 3b04 	str.w	r3, [ip], #4
 8007d7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d7e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	fb0a b303 	mla	r3, sl, r3, fp
 8007d88:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007d8c:	454f      	cmp	r7, r9
 8007d8e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007d92:	d805      	bhi.n	8007da0 <__multiply+0x124>
 8007d94:	f8c8 3004 	str.w	r3, [r8, #4]
 8007d98:	3504      	adds	r5, #4
 8007d9a:	e79b      	b.n	8007cd4 <__multiply+0x58>
 8007d9c:	46d4      	mov	ip, sl
 8007d9e:	e7b3      	b.n	8007d08 <__multiply+0x8c>
 8007da0:	46e0      	mov	r8, ip
 8007da2:	e7dd      	b.n	8007d60 <__multiply+0xe4>
 8007da4:	3e01      	subs	r6, #1
 8007da6:	e799      	b.n	8007cdc <__multiply+0x60>

08007da8 <__pow5mult>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	4615      	mov	r5, r2
 8007dae:	f012 0203 	ands.w	r2, r2, #3
 8007db2:	4606      	mov	r6, r0
 8007db4:	460f      	mov	r7, r1
 8007db6:	d007      	beq.n	8007dc8 <__pow5mult+0x20>
 8007db8:	3a01      	subs	r2, #1
 8007dba:	4c21      	ldr	r4, [pc, #132]	; (8007e40 <__pow5mult+0x98>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dc2:	f7ff fec9 	bl	8007b58 <__multadd>
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	10ad      	asrs	r5, r5, #2
 8007dca:	d035      	beq.n	8007e38 <__pow5mult+0x90>
 8007dcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dce:	b93c      	cbnz	r4, 8007de0 <__pow5mult+0x38>
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	f7ff fe63 	bl	8007a9c <malloc>
 8007dd6:	6270      	str	r0, [r6, #36]	; 0x24
 8007dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ddc:	6004      	str	r4, [r0, #0]
 8007dde:	60c4      	str	r4, [r0, #12]
 8007de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de8:	b94c      	cbnz	r4, 8007dfe <__pow5mult+0x56>
 8007dea:	f240 2171 	movw	r1, #625	; 0x271
 8007dee:	4630      	mov	r0, r6
 8007df0:	f7ff ff3b 	bl	8007c6a <__i2b>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	6003      	str	r3, [r0, #0]
 8007dfe:	f04f 0800 	mov.w	r8, #0
 8007e02:	07eb      	lsls	r3, r5, #31
 8007e04:	d50a      	bpl.n	8007e1c <__pow5mult+0x74>
 8007e06:	4639      	mov	r1, r7
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ff36 	bl	8007c7c <__multiply>
 8007e10:	4639      	mov	r1, r7
 8007e12:	4681      	mov	r9, r0
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff fe88 	bl	8007b2a <_Bfree>
 8007e1a:	464f      	mov	r7, r9
 8007e1c:	106d      	asrs	r5, r5, #1
 8007e1e:	d00b      	beq.n	8007e38 <__pow5mult+0x90>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	b938      	cbnz	r0, 8007e34 <__pow5mult+0x8c>
 8007e24:	4622      	mov	r2, r4
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff ff27 	bl	8007c7c <__multiply>
 8007e2e:	6020      	str	r0, [r4, #0]
 8007e30:	f8c0 8000 	str.w	r8, [r0]
 8007e34:	4604      	mov	r4, r0
 8007e36:	e7e4      	b.n	8007e02 <__pow5mult+0x5a>
 8007e38:	4638      	mov	r0, r7
 8007e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	bf00      	nop
 8007e40:	08008a10 	.word	0x08008a10

08007e44 <__lshift>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	460c      	mov	r4, r1
 8007e4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	6849      	ldr	r1, [r1, #4]
 8007e52:	eb0a 0903 	add.w	r9, sl, r3
 8007e56:	68a3      	ldr	r3, [r4, #8]
 8007e58:	4607      	mov	r7, r0
 8007e5a:	4616      	mov	r6, r2
 8007e5c:	f109 0501 	add.w	r5, r9, #1
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	db32      	blt.n	8007eca <__lshift+0x86>
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff fe2c 	bl	8007ac2 <_Balloc>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	f100 0114 	add.w	r1, r0, #20
 8007e72:	461a      	mov	r2, r3
 8007e74:	4553      	cmp	r3, sl
 8007e76:	db2b      	blt.n	8007ed0 <__lshift+0x8c>
 8007e78:	6920      	ldr	r0, [r4, #16]
 8007e7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e7e:	f104 0314 	add.w	r3, r4, #20
 8007e82:	f016 021f 	ands.w	r2, r6, #31
 8007e86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e8e:	d025      	beq.n	8007edc <__lshift+0x98>
 8007e90:	f1c2 0e20 	rsb	lr, r2, #32
 8007e94:	2000      	movs	r0, #0
 8007e96:	681e      	ldr	r6, [r3, #0]
 8007e98:	468a      	mov	sl, r1
 8007e9a:	4096      	lsls	r6, r2
 8007e9c:	4330      	orrs	r0, r6
 8007e9e:	f84a 0b04 	str.w	r0, [sl], #4
 8007ea2:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ea6:	459c      	cmp	ip, r3
 8007ea8:	fa20 f00e 	lsr.w	r0, r0, lr
 8007eac:	d814      	bhi.n	8007ed8 <__lshift+0x94>
 8007eae:	6048      	str	r0, [r1, #4]
 8007eb0:	b108      	cbz	r0, 8007eb6 <__lshift+0x72>
 8007eb2:	f109 0502 	add.w	r5, r9, #2
 8007eb6:	3d01      	subs	r5, #1
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f8c8 5010 	str.w	r5, [r8, #16]
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	f7ff fe33 	bl	8007b2a <_Bfree>
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eca:	3101      	adds	r1, #1
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	e7c7      	b.n	8007e60 <__lshift+0x1c>
 8007ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	e7cd      	b.n	8007e74 <__lshift+0x30>
 8007ed8:	4651      	mov	r1, sl
 8007eda:	e7dc      	b.n	8007e96 <__lshift+0x52>
 8007edc:	3904      	subs	r1, #4
 8007ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee2:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ee6:	459c      	cmp	ip, r3
 8007ee8:	d8f9      	bhi.n	8007ede <__lshift+0x9a>
 8007eea:	e7e4      	b.n	8007eb6 <__lshift+0x72>

08007eec <__mcmp>:
 8007eec:	6903      	ldr	r3, [r0, #16]
 8007eee:	690a      	ldr	r2, [r1, #16]
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	b530      	push	{r4, r5, lr}
 8007ef4:	d10c      	bne.n	8007f10 <__mcmp+0x24>
 8007ef6:	0092      	lsls	r2, r2, #2
 8007ef8:	3014      	adds	r0, #20
 8007efa:	3114      	adds	r1, #20
 8007efc:	1884      	adds	r4, r0, r2
 8007efe:	4411      	add	r1, r2
 8007f00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f08:	4295      	cmp	r5, r2
 8007f0a:	d003      	beq.n	8007f14 <__mcmp+0x28>
 8007f0c:	d305      	bcc.n	8007f1a <__mcmp+0x2e>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd30      	pop	{r4, r5, pc}
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d3f3      	bcc.n	8007f00 <__mcmp+0x14>
 8007f18:	e7fa      	b.n	8007f10 <__mcmp+0x24>
 8007f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f1e:	e7f7      	b.n	8007f10 <__mcmp+0x24>

08007f20 <__mdiff>:
 8007f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	460d      	mov	r5, r1
 8007f26:	4607      	mov	r7, r0
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	f7ff ffdd 	bl	8007eec <__mcmp>
 8007f32:	1e06      	subs	r6, r0, #0
 8007f34:	d108      	bne.n	8007f48 <__mdiff+0x28>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff fdc2 	bl	8007ac2 <_Balloc>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f48:	bfa4      	itt	ge
 8007f4a:	4623      	movge	r3, r4
 8007f4c:	462c      	movge	r4, r5
 8007f4e:	4638      	mov	r0, r7
 8007f50:	6861      	ldr	r1, [r4, #4]
 8007f52:	bfa6      	itte	ge
 8007f54:	461d      	movge	r5, r3
 8007f56:	2600      	movge	r6, #0
 8007f58:	2601      	movlt	r6, #1
 8007f5a:	f7ff fdb2 	bl	8007ac2 <_Balloc>
 8007f5e:	692b      	ldr	r3, [r5, #16]
 8007f60:	60c6      	str	r6, [r0, #12]
 8007f62:	6926      	ldr	r6, [r4, #16]
 8007f64:	f105 0914 	add.w	r9, r5, #20
 8007f68:	f104 0214 	add.w	r2, r4, #20
 8007f6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007f70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007f74:	f100 0514 	add.w	r5, r0, #20
 8007f78:	f04f 0e00 	mov.w	lr, #0
 8007f7c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007f80:	f859 4b04 	ldr.w	r4, [r9], #4
 8007f84:	fa1e f18a 	uxtah	r1, lr, sl
 8007f88:	b2a3      	uxth	r3, r4
 8007f8a:	1ac9      	subs	r1, r1, r3
 8007f8c:	0c23      	lsrs	r3, r4, #16
 8007f8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007f92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f96:	b289      	uxth	r1, r1
 8007f98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007f9c:	45c8      	cmp	r8, r9
 8007f9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007fa2:	4694      	mov	ip, r2
 8007fa4:	f845 3b04 	str.w	r3, [r5], #4
 8007fa8:	d8e8      	bhi.n	8007f7c <__mdiff+0x5c>
 8007faa:	45bc      	cmp	ip, r7
 8007fac:	d304      	bcc.n	8007fb8 <__mdiff+0x98>
 8007fae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007fb2:	b183      	cbz	r3, 8007fd6 <__mdiff+0xb6>
 8007fb4:	6106      	str	r6, [r0, #16]
 8007fb6:	e7c5      	b.n	8007f44 <__mdiff+0x24>
 8007fb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007fbc:	fa1e f381 	uxtah	r3, lr, r1
 8007fc0:	141a      	asrs	r2, r3, #16
 8007fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fcc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007fd0:	f845 3b04 	str.w	r3, [r5], #4
 8007fd4:	e7e9      	b.n	8007faa <__mdiff+0x8a>
 8007fd6:	3e01      	subs	r6, #1
 8007fd8:	e7e9      	b.n	8007fae <__mdiff+0x8e>

08007fda <__d2b>:
 8007fda:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fde:	460e      	mov	r6, r1
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	ec59 8b10 	vmov	r8, r9, d0
 8007fe6:	4615      	mov	r5, r2
 8007fe8:	f7ff fd6b 	bl	8007ac2 <_Balloc>
 8007fec:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ff6:	bb34      	cbnz	r4, 8008046 <__d2b+0x6c>
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	f1b8 0300 	subs.w	r3, r8, #0
 8007ffe:	d027      	beq.n	8008050 <__d2b+0x76>
 8008000:	a802      	add	r0, sp, #8
 8008002:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008006:	f7ff fe01 	bl	8007c0c <__lo0bits>
 800800a:	9900      	ldr	r1, [sp, #0]
 800800c:	b1f0      	cbz	r0, 800804c <__d2b+0x72>
 800800e:	9a01      	ldr	r2, [sp, #4]
 8008010:	f1c0 0320 	rsb	r3, r0, #32
 8008014:	fa02 f303 	lsl.w	r3, r2, r3
 8008018:	430b      	orrs	r3, r1
 800801a:	40c2      	lsrs	r2, r0
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	9201      	str	r2, [sp, #4]
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	bf14      	ite	ne
 8008028:	2102      	movne	r1, #2
 800802a:	2101      	moveq	r1, #1
 800802c:	6139      	str	r1, [r7, #16]
 800802e:	b1c4      	cbz	r4, 8008062 <__d2b+0x88>
 8008030:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008034:	4404      	add	r4, r0
 8008036:	6034      	str	r4, [r6, #0]
 8008038:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800803c:	6028      	str	r0, [r5, #0]
 800803e:	4638      	mov	r0, r7
 8008040:	b003      	add	sp, #12
 8008042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800804a:	e7d5      	b.n	8007ff8 <__d2b+0x1e>
 800804c:	6179      	str	r1, [r7, #20]
 800804e:	e7e7      	b.n	8008020 <__d2b+0x46>
 8008050:	a801      	add	r0, sp, #4
 8008052:	f7ff fddb 	bl	8007c0c <__lo0bits>
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	617b      	str	r3, [r7, #20]
 800805a:	2101      	movs	r1, #1
 800805c:	6139      	str	r1, [r7, #16]
 800805e:	3020      	adds	r0, #32
 8008060:	e7e5      	b.n	800802e <__d2b+0x54>
 8008062:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008066:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800806a:	6030      	str	r0, [r6, #0]
 800806c:	6918      	ldr	r0, [r3, #16]
 800806e:	f7ff fdae 	bl	8007bce <__hi0bits>
 8008072:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008076:	e7e1      	b.n	800803c <__d2b+0x62>

08008078 <_calloc_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	fb02 f401 	mul.w	r4, r2, r1
 800807e:	4621      	mov	r1, r4
 8008080:	f000 f856 	bl	8008130 <_malloc_r>
 8008084:	4605      	mov	r5, r0
 8008086:	b118      	cbz	r0, 8008090 <_calloc_r+0x18>
 8008088:	4622      	mov	r2, r4
 800808a:	2100      	movs	r1, #0
 800808c:	f7fe fa30 	bl	80064f0 <memset>
 8008090:	4628      	mov	r0, r5
 8008092:	bd38      	pop	{r3, r4, r5, pc}

08008094 <_free_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4605      	mov	r5, r0
 8008098:	2900      	cmp	r1, #0
 800809a:	d045      	beq.n	8008128 <_free_r+0x94>
 800809c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a0:	1f0c      	subs	r4, r1, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfb8      	it	lt
 80080a6:	18e4      	addlt	r4, r4, r3
 80080a8:	f000 fa29 	bl	80084fe <__malloc_lock>
 80080ac:	4a1f      	ldr	r2, [pc, #124]	; (800812c <_free_r+0x98>)
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	4610      	mov	r0, r2
 80080b2:	b933      	cbnz	r3, 80080c2 <_free_r+0x2e>
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	6014      	str	r4, [r2, #0]
 80080b8:	4628      	mov	r0, r5
 80080ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080be:	f000 ba1f 	b.w	8008500 <__malloc_unlock>
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	d90c      	bls.n	80080e0 <_free_r+0x4c>
 80080c6:	6821      	ldr	r1, [r4, #0]
 80080c8:	1862      	adds	r2, r4, r1
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bf04      	itt	eq
 80080ce:	681a      	ldreq	r2, [r3, #0]
 80080d0:	685b      	ldreq	r3, [r3, #4]
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	bf04      	itt	eq
 80080d6:	1852      	addeq	r2, r2, r1
 80080d8:	6022      	streq	r2, [r4, #0]
 80080da:	6004      	str	r4, [r0, #0]
 80080dc:	e7ec      	b.n	80080b8 <_free_r+0x24>
 80080de:	4613      	mov	r3, r2
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	b10a      	cbz	r2, 80080e8 <_free_r+0x54>
 80080e4:	42a2      	cmp	r2, r4
 80080e6:	d9fa      	bls.n	80080de <_free_r+0x4a>
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	1858      	adds	r0, r3, r1
 80080ec:	42a0      	cmp	r0, r4
 80080ee:	d10b      	bne.n	8008108 <_free_r+0x74>
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	4401      	add	r1, r0
 80080f4:	1858      	adds	r0, r3, r1
 80080f6:	4282      	cmp	r2, r0
 80080f8:	6019      	str	r1, [r3, #0]
 80080fa:	d1dd      	bne.n	80080b8 <_free_r+0x24>
 80080fc:	6810      	ldr	r0, [r2, #0]
 80080fe:	6852      	ldr	r2, [r2, #4]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	4401      	add	r1, r0
 8008104:	6019      	str	r1, [r3, #0]
 8008106:	e7d7      	b.n	80080b8 <_free_r+0x24>
 8008108:	d902      	bls.n	8008110 <_free_r+0x7c>
 800810a:	230c      	movs	r3, #12
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	e7d3      	b.n	80080b8 <_free_r+0x24>
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	1821      	adds	r1, r4, r0
 8008114:	428a      	cmp	r2, r1
 8008116:	bf04      	itt	eq
 8008118:	6811      	ldreq	r1, [r2, #0]
 800811a:	6852      	ldreq	r2, [r2, #4]
 800811c:	6062      	str	r2, [r4, #4]
 800811e:	bf04      	itt	eq
 8008120:	1809      	addeq	r1, r1, r0
 8008122:	6021      	streq	r1, [r4, #0]
 8008124:	605c      	str	r4, [r3, #4]
 8008126:	e7c7      	b.n	80080b8 <_free_r+0x24>
 8008128:	bd38      	pop	{r3, r4, r5, pc}
 800812a:	bf00      	nop
 800812c:	20000250 	.word	0x20000250

08008130 <_malloc_r>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	1ccd      	adds	r5, r1, #3
 8008134:	f025 0503 	bic.w	r5, r5, #3
 8008138:	3508      	adds	r5, #8
 800813a:	2d0c      	cmp	r5, #12
 800813c:	bf38      	it	cc
 800813e:	250c      	movcc	r5, #12
 8008140:	2d00      	cmp	r5, #0
 8008142:	4606      	mov	r6, r0
 8008144:	db01      	blt.n	800814a <_malloc_r+0x1a>
 8008146:	42a9      	cmp	r1, r5
 8008148:	d903      	bls.n	8008152 <_malloc_r+0x22>
 800814a:	230c      	movs	r3, #12
 800814c:	6033      	str	r3, [r6, #0]
 800814e:	2000      	movs	r0, #0
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	f000 f9d4 	bl	80084fe <__malloc_lock>
 8008156:	4a21      	ldr	r2, [pc, #132]	; (80081dc <_malloc_r+0xac>)
 8008158:	6814      	ldr	r4, [r2, #0]
 800815a:	4621      	mov	r1, r4
 800815c:	b991      	cbnz	r1, 8008184 <_malloc_r+0x54>
 800815e:	4c20      	ldr	r4, [pc, #128]	; (80081e0 <_malloc_r+0xb0>)
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	b91b      	cbnz	r3, 800816c <_malloc_r+0x3c>
 8008164:	4630      	mov	r0, r6
 8008166:	f000 f98f 	bl	8008488 <_sbrk_r>
 800816a:	6020      	str	r0, [r4, #0]
 800816c:	4629      	mov	r1, r5
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f98a 	bl	8008488 <_sbrk_r>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d124      	bne.n	80081c2 <_malloc_r+0x92>
 8008178:	230c      	movs	r3, #12
 800817a:	6033      	str	r3, [r6, #0]
 800817c:	4630      	mov	r0, r6
 800817e:	f000 f9bf 	bl	8008500 <__malloc_unlock>
 8008182:	e7e4      	b.n	800814e <_malloc_r+0x1e>
 8008184:	680b      	ldr	r3, [r1, #0]
 8008186:	1b5b      	subs	r3, r3, r5
 8008188:	d418      	bmi.n	80081bc <_malloc_r+0x8c>
 800818a:	2b0b      	cmp	r3, #11
 800818c:	d90f      	bls.n	80081ae <_malloc_r+0x7e>
 800818e:	600b      	str	r3, [r1, #0]
 8008190:	50cd      	str	r5, [r1, r3]
 8008192:	18cc      	adds	r4, r1, r3
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f9b3 	bl	8008500 <__malloc_unlock>
 800819a:	f104 000b 	add.w	r0, r4, #11
 800819e:	1d23      	adds	r3, r4, #4
 80081a0:	f020 0007 	bic.w	r0, r0, #7
 80081a4:	1ac3      	subs	r3, r0, r3
 80081a6:	d0d3      	beq.n	8008150 <_malloc_r+0x20>
 80081a8:	425a      	negs	r2, r3
 80081aa:	50e2      	str	r2, [r4, r3]
 80081ac:	e7d0      	b.n	8008150 <_malloc_r+0x20>
 80081ae:	428c      	cmp	r4, r1
 80081b0:	684b      	ldr	r3, [r1, #4]
 80081b2:	bf16      	itet	ne
 80081b4:	6063      	strne	r3, [r4, #4]
 80081b6:	6013      	streq	r3, [r2, #0]
 80081b8:	460c      	movne	r4, r1
 80081ba:	e7eb      	b.n	8008194 <_malloc_r+0x64>
 80081bc:	460c      	mov	r4, r1
 80081be:	6849      	ldr	r1, [r1, #4]
 80081c0:	e7cc      	b.n	800815c <_malloc_r+0x2c>
 80081c2:	1cc4      	adds	r4, r0, #3
 80081c4:	f024 0403 	bic.w	r4, r4, #3
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d005      	beq.n	80081d8 <_malloc_r+0xa8>
 80081cc:	1a21      	subs	r1, r4, r0
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 f95a 	bl	8008488 <_sbrk_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d0cf      	beq.n	8008178 <_malloc_r+0x48>
 80081d8:	6025      	str	r5, [r4, #0]
 80081da:	e7db      	b.n	8008194 <_malloc_r+0x64>
 80081dc:	20000250 	.word	0x20000250
 80081e0:	20000254 	.word	0x20000254

080081e4 <__ssputs_r>:
 80081e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	688e      	ldr	r6, [r1, #8]
 80081ea:	429e      	cmp	r6, r3
 80081ec:	4682      	mov	sl, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	4690      	mov	r8, r2
 80081f2:	4699      	mov	r9, r3
 80081f4:	d837      	bhi.n	8008266 <__ssputs_r+0x82>
 80081f6:	898a      	ldrh	r2, [r1, #12]
 80081f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081fc:	d031      	beq.n	8008262 <__ssputs_r+0x7e>
 80081fe:	6825      	ldr	r5, [r4, #0]
 8008200:	6909      	ldr	r1, [r1, #16]
 8008202:	1a6f      	subs	r7, r5, r1
 8008204:	6965      	ldr	r5, [r4, #20]
 8008206:	2302      	movs	r3, #2
 8008208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800820c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008210:	f109 0301 	add.w	r3, r9, #1
 8008214:	443b      	add	r3, r7
 8008216:	429d      	cmp	r5, r3
 8008218:	bf38      	it	cc
 800821a:	461d      	movcc	r5, r3
 800821c:	0553      	lsls	r3, r2, #21
 800821e:	d530      	bpl.n	8008282 <__ssputs_r+0x9e>
 8008220:	4629      	mov	r1, r5
 8008222:	f7ff ff85 	bl	8008130 <_malloc_r>
 8008226:	4606      	mov	r6, r0
 8008228:	b950      	cbnz	r0, 8008240 <__ssputs_r+0x5c>
 800822a:	230c      	movs	r3, #12
 800822c:	f8ca 3000 	str.w	r3, [sl]
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008240:	463a      	mov	r2, r7
 8008242:	6921      	ldr	r1, [r4, #16]
 8008244:	f7ff fc32 	bl	8007aac <memcpy>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800824e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	6126      	str	r6, [r4, #16]
 8008256:	6165      	str	r5, [r4, #20]
 8008258:	443e      	add	r6, r7
 800825a:	1bed      	subs	r5, r5, r7
 800825c:	6026      	str	r6, [r4, #0]
 800825e:	60a5      	str	r5, [r4, #8]
 8008260:	464e      	mov	r6, r9
 8008262:	454e      	cmp	r6, r9
 8008264:	d900      	bls.n	8008268 <__ssputs_r+0x84>
 8008266:	464e      	mov	r6, r9
 8008268:	4632      	mov	r2, r6
 800826a:	4641      	mov	r1, r8
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	f000 f92d 	bl	80084cc <memmove>
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	1b9b      	subs	r3, r3, r6
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	441e      	add	r6, r3
 800827c:	6026      	str	r6, [r4, #0]
 800827e:	2000      	movs	r0, #0
 8008280:	e7dc      	b.n	800823c <__ssputs_r+0x58>
 8008282:	462a      	mov	r2, r5
 8008284:	f000 f93d 	bl	8008502 <_realloc_r>
 8008288:	4606      	mov	r6, r0
 800828a:	2800      	cmp	r0, #0
 800828c:	d1e2      	bne.n	8008254 <__ssputs_r+0x70>
 800828e:	6921      	ldr	r1, [r4, #16]
 8008290:	4650      	mov	r0, sl
 8008292:	f7ff feff 	bl	8008094 <_free_r>
 8008296:	e7c8      	b.n	800822a <__ssputs_r+0x46>

08008298 <_svfiprintf_r>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	461d      	mov	r5, r3
 800829e:	898b      	ldrh	r3, [r1, #12]
 80082a0:	061f      	lsls	r7, r3, #24
 80082a2:	b09d      	sub	sp, #116	; 0x74
 80082a4:	4680      	mov	r8, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	4616      	mov	r6, r2
 80082aa:	d50f      	bpl.n	80082cc <_svfiprintf_r+0x34>
 80082ac:	690b      	ldr	r3, [r1, #16]
 80082ae:	b96b      	cbnz	r3, 80082cc <_svfiprintf_r+0x34>
 80082b0:	2140      	movs	r1, #64	; 0x40
 80082b2:	f7ff ff3d 	bl	8008130 <_malloc_r>
 80082b6:	6020      	str	r0, [r4, #0]
 80082b8:	6120      	str	r0, [r4, #16]
 80082ba:	b928      	cbnz	r0, 80082c8 <_svfiprintf_r+0x30>
 80082bc:	230c      	movs	r3, #12
 80082be:	f8c8 3000 	str.w	r3, [r8]
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082c6:	e0c8      	b.n	800845a <_svfiprintf_r+0x1c2>
 80082c8:	2340      	movs	r3, #64	; 0x40
 80082ca:	6163      	str	r3, [r4, #20]
 80082cc:	2300      	movs	r3, #0
 80082ce:	9309      	str	r3, [sp, #36]	; 0x24
 80082d0:	2320      	movs	r3, #32
 80082d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082d6:	2330      	movs	r3, #48	; 0x30
 80082d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082dc:	9503      	str	r5, [sp, #12]
 80082de:	f04f 0b01 	mov.w	fp, #1
 80082e2:	4637      	mov	r7, r6
 80082e4:	463d      	mov	r5, r7
 80082e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082ea:	b10b      	cbz	r3, 80082f0 <_svfiprintf_r+0x58>
 80082ec:	2b25      	cmp	r3, #37	; 0x25
 80082ee:	d13e      	bne.n	800836e <_svfiprintf_r+0xd6>
 80082f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80082f4:	d00b      	beq.n	800830e <_svfiprintf_r+0x76>
 80082f6:	4653      	mov	r3, sl
 80082f8:	4632      	mov	r2, r6
 80082fa:	4621      	mov	r1, r4
 80082fc:	4640      	mov	r0, r8
 80082fe:	f7ff ff71 	bl	80081e4 <__ssputs_r>
 8008302:	3001      	adds	r0, #1
 8008304:	f000 80a4 	beq.w	8008450 <_svfiprintf_r+0x1b8>
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	4453      	add	r3, sl
 800830c:	9309      	str	r3, [sp, #36]	; 0x24
 800830e:	783b      	ldrb	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 809d 	beq.w	8008450 <_svfiprintf_r+0x1b8>
 8008316:	2300      	movs	r3, #0
 8008318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800831c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	9307      	str	r3, [sp, #28]
 8008324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008328:	931a      	str	r3, [sp, #104]	; 0x68
 800832a:	462f      	mov	r7, r5
 800832c:	2205      	movs	r2, #5
 800832e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008332:	4850      	ldr	r0, [pc, #320]	; (8008474 <_svfiprintf_r+0x1dc>)
 8008334:	f7f7 ff7c 	bl	8000230 <memchr>
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	b9d0      	cbnz	r0, 8008372 <_svfiprintf_r+0xda>
 800833c:	06d9      	lsls	r1, r3, #27
 800833e:	bf44      	itt	mi
 8008340:	2220      	movmi	r2, #32
 8008342:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008346:	071a      	lsls	r2, r3, #28
 8008348:	bf44      	itt	mi
 800834a:	222b      	movmi	r2, #43	; 0x2b
 800834c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008350:	782a      	ldrb	r2, [r5, #0]
 8008352:	2a2a      	cmp	r2, #42	; 0x2a
 8008354:	d015      	beq.n	8008382 <_svfiprintf_r+0xea>
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	462f      	mov	r7, r5
 800835a:	2000      	movs	r0, #0
 800835c:	250a      	movs	r5, #10
 800835e:	4639      	mov	r1, r7
 8008360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008364:	3b30      	subs	r3, #48	; 0x30
 8008366:	2b09      	cmp	r3, #9
 8008368:	d94d      	bls.n	8008406 <_svfiprintf_r+0x16e>
 800836a:	b1b8      	cbz	r0, 800839c <_svfiprintf_r+0x104>
 800836c:	e00f      	b.n	800838e <_svfiprintf_r+0xf6>
 800836e:	462f      	mov	r7, r5
 8008370:	e7b8      	b.n	80082e4 <_svfiprintf_r+0x4c>
 8008372:	4a40      	ldr	r2, [pc, #256]	; (8008474 <_svfiprintf_r+0x1dc>)
 8008374:	1a80      	subs	r0, r0, r2
 8008376:	fa0b f000 	lsl.w	r0, fp, r0
 800837a:	4318      	orrs	r0, r3
 800837c:	9004      	str	r0, [sp, #16]
 800837e:	463d      	mov	r5, r7
 8008380:	e7d3      	b.n	800832a <_svfiprintf_r+0x92>
 8008382:	9a03      	ldr	r2, [sp, #12]
 8008384:	1d11      	adds	r1, r2, #4
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	9103      	str	r1, [sp, #12]
 800838a:	2a00      	cmp	r2, #0
 800838c:	db01      	blt.n	8008392 <_svfiprintf_r+0xfa>
 800838e:	9207      	str	r2, [sp, #28]
 8008390:	e004      	b.n	800839c <_svfiprintf_r+0x104>
 8008392:	4252      	negs	r2, r2
 8008394:	f043 0302 	orr.w	r3, r3, #2
 8008398:	9207      	str	r2, [sp, #28]
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	783b      	ldrb	r3, [r7, #0]
 800839e:	2b2e      	cmp	r3, #46	; 0x2e
 80083a0:	d10c      	bne.n	80083bc <_svfiprintf_r+0x124>
 80083a2:	787b      	ldrb	r3, [r7, #1]
 80083a4:	2b2a      	cmp	r3, #42	; 0x2a
 80083a6:	d133      	bne.n	8008410 <_svfiprintf_r+0x178>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9203      	str	r2, [sp, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfb8      	it	lt
 80083b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083b8:	3702      	adds	r7, #2
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	4d2e      	ldr	r5, [pc, #184]	; (8008478 <_svfiprintf_r+0x1e0>)
 80083be:	7839      	ldrb	r1, [r7, #0]
 80083c0:	2203      	movs	r2, #3
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7f7 ff34 	bl	8000230 <memchr>
 80083c8:	b138      	cbz	r0, 80083da <_svfiprintf_r+0x142>
 80083ca:	2340      	movs	r3, #64	; 0x40
 80083cc:	1b40      	subs	r0, r0, r5
 80083ce:	fa03 f000 	lsl.w	r0, r3, r0
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	4303      	orrs	r3, r0
 80083d6:	3701      	adds	r7, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	7839      	ldrb	r1, [r7, #0]
 80083dc:	4827      	ldr	r0, [pc, #156]	; (800847c <_svfiprintf_r+0x1e4>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e2:	2206      	movs	r2, #6
 80083e4:	1c7e      	adds	r6, r7, #1
 80083e6:	f7f7 ff23 	bl	8000230 <memchr>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d038      	beq.n	8008460 <_svfiprintf_r+0x1c8>
 80083ee:	4b24      	ldr	r3, [pc, #144]	; (8008480 <_svfiprintf_r+0x1e8>)
 80083f0:	bb13      	cbnz	r3, 8008438 <_svfiprintf_r+0x1a0>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	3307      	adds	r3, #7
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	3308      	adds	r3, #8
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	444b      	add	r3, r9
 8008402:	9309      	str	r3, [sp, #36]	; 0x24
 8008404:	e76d      	b.n	80082e2 <_svfiprintf_r+0x4a>
 8008406:	fb05 3202 	mla	r2, r5, r2, r3
 800840a:	2001      	movs	r0, #1
 800840c:	460f      	mov	r7, r1
 800840e:	e7a6      	b.n	800835e <_svfiprintf_r+0xc6>
 8008410:	2300      	movs	r3, #0
 8008412:	3701      	adds	r7, #1
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	4619      	mov	r1, r3
 8008418:	250a      	movs	r5, #10
 800841a:	4638      	mov	r0, r7
 800841c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008420:	3a30      	subs	r2, #48	; 0x30
 8008422:	2a09      	cmp	r2, #9
 8008424:	d903      	bls.n	800842e <_svfiprintf_r+0x196>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0c8      	beq.n	80083bc <_svfiprintf_r+0x124>
 800842a:	9105      	str	r1, [sp, #20]
 800842c:	e7c6      	b.n	80083bc <_svfiprintf_r+0x124>
 800842e:	fb05 2101 	mla	r1, r5, r1, r2
 8008432:	2301      	movs	r3, #1
 8008434:	4607      	mov	r7, r0
 8008436:	e7f0      	b.n	800841a <_svfiprintf_r+0x182>
 8008438:	ab03      	add	r3, sp, #12
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4622      	mov	r2, r4
 800843e:	4b11      	ldr	r3, [pc, #68]	; (8008484 <_svfiprintf_r+0x1ec>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	4640      	mov	r0, r8
 8008444:	f7fe f8f0 	bl	8006628 <_printf_float>
 8008448:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800844c:	4681      	mov	r9, r0
 800844e:	d1d6      	bne.n	80083fe <_svfiprintf_r+0x166>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	065b      	lsls	r3, r3, #25
 8008454:	f53f af35 	bmi.w	80082c2 <_svfiprintf_r+0x2a>
 8008458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845a:	b01d      	add	sp, #116	; 0x74
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	ab03      	add	r3, sp, #12
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4622      	mov	r2, r4
 8008466:	4b07      	ldr	r3, [pc, #28]	; (8008484 <_svfiprintf_r+0x1ec>)
 8008468:	a904      	add	r1, sp, #16
 800846a:	4640      	mov	r0, r8
 800846c:	f7fe fb92 	bl	8006b94 <_printf_i>
 8008470:	e7ea      	b.n	8008448 <_svfiprintf_r+0x1b0>
 8008472:	bf00      	nop
 8008474:	08008a1c 	.word	0x08008a1c
 8008478:	08008a22 	.word	0x08008a22
 800847c:	08008a26 	.word	0x08008a26
 8008480:	08006629 	.word	0x08006629
 8008484:	080081e5 	.word	0x080081e5

08008488 <_sbrk_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4c06      	ldr	r4, [pc, #24]	; (80084a4 <_sbrk_r+0x1c>)
 800848c:	2300      	movs	r3, #0
 800848e:	4605      	mov	r5, r0
 8008490:	4608      	mov	r0, r1
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	f7f9 fdbc 	bl	8002010 <_sbrk>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_sbrk_r+0x1a>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_sbrk_r+0x1a>
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	20000574 	.word	0x20000574

080084a8 <__ascii_mbtowc>:
 80084a8:	b082      	sub	sp, #8
 80084aa:	b901      	cbnz	r1, 80084ae <__ascii_mbtowc+0x6>
 80084ac:	a901      	add	r1, sp, #4
 80084ae:	b142      	cbz	r2, 80084c2 <__ascii_mbtowc+0x1a>
 80084b0:	b14b      	cbz	r3, 80084c6 <__ascii_mbtowc+0x1e>
 80084b2:	7813      	ldrb	r3, [r2, #0]
 80084b4:	600b      	str	r3, [r1, #0]
 80084b6:	7812      	ldrb	r2, [r2, #0]
 80084b8:	1c10      	adds	r0, r2, #0
 80084ba:	bf18      	it	ne
 80084bc:	2001      	movne	r0, #1
 80084be:	b002      	add	sp, #8
 80084c0:	4770      	bx	lr
 80084c2:	4610      	mov	r0, r2
 80084c4:	e7fb      	b.n	80084be <__ascii_mbtowc+0x16>
 80084c6:	f06f 0001 	mvn.w	r0, #1
 80084ca:	e7f8      	b.n	80084be <__ascii_mbtowc+0x16>

080084cc <memmove>:
 80084cc:	4288      	cmp	r0, r1
 80084ce:	b510      	push	{r4, lr}
 80084d0:	eb01 0302 	add.w	r3, r1, r2
 80084d4:	d807      	bhi.n	80084e6 <memmove+0x1a>
 80084d6:	1e42      	subs	r2, r0, #1
 80084d8:	4299      	cmp	r1, r3
 80084da:	d00a      	beq.n	80084f2 <memmove+0x26>
 80084dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084e4:	e7f8      	b.n	80084d8 <memmove+0xc>
 80084e6:	4283      	cmp	r3, r0
 80084e8:	d9f5      	bls.n	80084d6 <memmove+0xa>
 80084ea:	1881      	adds	r1, r0, r2
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	42d3      	cmn	r3, r2
 80084f0:	d100      	bne.n	80084f4 <memmove+0x28>
 80084f2:	bd10      	pop	{r4, pc}
 80084f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80084fc:	e7f7      	b.n	80084ee <memmove+0x22>

080084fe <__malloc_lock>:
 80084fe:	4770      	bx	lr

08008500 <__malloc_unlock>:
 8008500:	4770      	bx	lr

08008502 <_realloc_r>:
 8008502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008504:	4607      	mov	r7, r0
 8008506:	4614      	mov	r4, r2
 8008508:	460e      	mov	r6, r1
 800850a:	b921      	cbnz	r1, 8008516 <_realloc_r+0x14>
 800850c:	4611      	mov	r1, r2
 800850e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008512:	f7ff be0d 	b.w	8008130 <_malloc_r>
 8008516:	b922      	cbnz	r2, 8008522 <_realloc_r+0x20>
 8008518:	f7ff fdbc 	bl	8008094 <_free_r>
 800851c:	4625      	mov	r5, r4
 800851e:	4628      	mov	r0, r5
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008522:	f000 f821 	bl	8008568 <_malloc_usable_size_r>
 8008526:	42a0      	cmp	r0, r4
 8008528:	d20f      	bcs.n	800854a <_realloc_r+0x48>
 800852a:	4621      	mov	r1, r4
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff fdff 	bl	8008130 <_malloc_r>
 8008532:	4605      	mov	r5, r0
 8008534:	2800      	cmp	r0, #0
 8008536:	d0f2      	beq.n	800851e <_realloc_r+0x1c>
 8008538:	4631      	mov	r1, r6
 800853a:	4622      	mov	r2, r4
 800853c:	f7ff fab6 	bl	8007aac <memcpy>
 8008540:	4631      	mov	r1, r6
 8008542:	4638      	mov	r0, r7
 8008544:	f7ff fda6 	bl	8008094 <_free_r>
 8008548:	e7e9      	b.n	800851e <_realloc_r+0x1c>
 800854a:	4635      	mov	r5, r6
 800854c:	e7e7      	b.n	800851e <_realloc_r+0x1c>

0800854e <__ascii_wctomb>:
 800854e:	b149      	cbz	r1, 8008564 <__ascii_wctomb+0x16>
 8008550:	2aff      	cmp	r2, #255	; 0xff
 8008552:	bf85      	ittet	hi
 8008554:	238a      	movhi	r3, #138	; 0x8a
 8008556:	6003      	strhi	r3, [r0, #0]
 8008558:	700a      	strbls	r2, [r1, #0]
 800855a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800855e:	bf98      	it	ls
 8008560:	2001      	movls	r0, #1
 8008562:	4770      	bx	lr
 8008564:	4608      	mov	r0, r1
 8008566:	4770      	bx	lr

08008568 <_malloc_usable_size_r>:
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f18      	subs	r0, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfbc      	itt	lt
 8008572:	580b      	ldrlt	r3, [r1, r0]
 8008574:	18c0      	addlt	r0, r0, r3
 8008576:	4770      	bx	lr

08008578 <_init>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr

08008584 <_fini>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr
